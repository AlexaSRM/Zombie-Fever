{"version":3,"file":"unhandledRejectionHandler.js","sourceRoot":"","sources":["../unhandledRejectionHandler.ts"],"names":[],"mappings":";;AAAA;;;;;;GAMG;AACH,SAAgB,0BAA0B;IACtC,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,EAAE;QAClD,IAAI,kBAAkB,YAAY,KAAK,EAAE;YACrC,MAAM,KAAK,GAAG,kBAA2B,CAAC;YAC1C,OAAO,CAAC,KAAK,CAAC,mFAAmF,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;SACpH;aAAM;YACH,MAAM,oBAAoB,GAAG,kBAAkB,CAAC,CAAC,CAAC,OAAO,kBAAkB,GAAG,GAAG,GAAG,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC;YAChI,OAAO,CAAC,KAAK,CAAC,sEAAsE,oBAAoB,cAAc,CAAC,CAAC;SAC3H;QACD,MAAM,kBAAkB,CAAA;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC;AAXD,gEAWC","sourcesContent":["/**\n * Registering a unhandledRejection handler that throws the provided exception ensures that code \n * that has an unhandled rejection fails a test case and does not let failing code continue unnoticed.  \n * This is the warning this code replaces: UnhandledPromiseRejectionWarning: Unhandled promise \n * rejection. This error originated either by throwing inside of an async function without a catch block, \n * or by rejecting a promise which was not handled with .catch(). (rejection id: 1)\n */\nexport function crashOnUnhandledRejections() {\n    process.on('unhandledRejection', unhandledRejection => { \n        if (unhandledRejection instanceof Error) {\n            const error = unhandledRejection as Error;\n            console.error('unhandledRejection called. There is likely a missing \"await\" in this call stack: ' + error.stack);\n        } else {\n            const rejectionDescription = unhandledRejection ? typeof unhandledRejection + ' ' + unhandledRejection.toString() : 'undefined';\n            console.error(`unhandledRejection called. There is likely a missing \"await\" where ${rejectionDescription} was thrown.`);\n        }\n        throw unhandledRejection \n    });\n}"]}
{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../utilities.ts"],"names":[],"mappings":";AAAA,8IAA8I;;;;;;;;;AAE9I,uCAAyB;AAEzB,SAAgB,YAAY,CAAC,GAAW;IACvC,OAAO,GAAG,CAAC,OAAO,CAAC,qCAAqC,EAAE,MAAM,CAAC,CAAC;AACnE,CAAC;AAFD,oCAEC;AAED,SAAgB,wBAAwB,CAAC,IAA0B;IAC/D,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC3C,EAAE,CAAC,QAAQ,CACP,IAAI,EACJ,EAAE,QAAQ,EAAE,MAAM,EAAE,EACpB,CAAC,GAAQ,EAAE,IAAY,EAAE,EAAE;YACvB,IAAI,GAAG,EAAE;gBACL,MAAM,CAAC,GAAG,CAAC,CAAC;aACf;iBAAM;gBACH,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC/B,OAAO,CAAC,OAAO,CAAC,CAAC;aACpB;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACX,CAAC;AAdD,4DAcC;AAED,SAAgB,4BAA4B,CAAC,IAA0B;IACnE,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;IACzD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC1B,CAAC;AAHD,oEAGC;AAED,SAAS,QAAQ,CAAC,OAAe;IAC7B,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;QAClC,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAC3B;SAAM;QACH,OAAO,OAAO,CAAC;KAClB;AACL,CAAC","sourcesContent":["// Alexa-Util Module. Useful Alexa functions for any Alexa Games skill. Put those things in here please if they don't fit in any other module.\n\nimport * as fs from 'fs';\n\nexport function escapeRegExp(str: string) {\n\treturn str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\nexport function readUtf8FileExcludingBom(path: fs.PathLike | number): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        fs.readFile(\n            path,\n            { encoding: 'utf8' },\n            (err: any, data: string) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    const content = stripBom(data);\n                    resolve(content);\n                }\n            });\n        });\n}\n\nexport function readUtf8FileExcludingBomSync(path: fs.PathLike | number): string {\n    const data = fs.readFileSync(path, { encoding: 'utf8' });\n    return stripBom(data);\n}\n\nfunction stripBom(content: string): string {\n    if (content.charCodeAt(0) === 0xFEFF) {\n        return content.slice(1);\n    } else {\n        return content;\n    }\n}\n"]}
{"version":3,"file":"metricsExtension.spec.js","sourceRoot":"","sources":["../../../src/test/aceExtension/metricsExtension.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { SceneDirectionBuilder, StoryMetadata, StoryStateHelper } from '@alexa-games/sfb-f';\nimport { DriverExtensionTester, TestStoryBuilder } from '@alexa-games/sfb-test';\nimport { MetricsExtension } from '../..';\nimport * as chai from 'chai';\nimport chaiExclude from 'chai-exclude';\nimport { assert, expect } from 'chai';\n\nchai.use(chaiExclude);\n\n\ndescribe('Metrics Extension', () => {\n   let testStory: StoryMetadata;\n\n   beforeEach(\"set up set up test\", async  (done) => {\n\n      // Example of building *then section. but.. not required for this test.\n      const instructions = new SceneDirectionBuilder();\n\n      instructions.customDirection(\"fakeInstruction\", {\n         param1: \"test-value\"\n      });\n\n      const thenSection = instructions.build();\n\n      // Example of creating a test story object. (also not required for this test)\n      const testStoryBuilder = new TestStoryBuilder(\"test-story\");\n      testStoryBuilder.addScene(\"testing scene1\", \"this is a test scene\", thenSection);\n      testStoryBuilder.addScene(\"testing scene2\", \"this is a test scene\", thenSection);\n      testStoryBuilder.addScene(\"testing scene3\", \"this is a test scene\", thenSection);\n\n      testStory = testStoryBuilder.build();\n\n      done();\n   });\n\n   it('Performs a basic metrics workflow', async ()=> {\n      const expectedOutput = [{\n         skillId: 'test-application-id',\n         customerIdentifier: 'test-user-id',\n         eventType: 'metrics',\n         requestId: 'test-request-id',\n         sessionId: 'test-session-id',\n         stage: 'stage env variable not defined',\n         locale: 'en-US',\n         metadata: { schemaVersion: '1.0' },\n         details:\n             { previousSceneId: 'testing scene2', sceneId: 'testing scene1' } }];\n\n      let generatedOutput: any[] = [];\n      const metricsExtension = new MetricsExtension(async (m) => {\n         assert.isOk(m);\n         generatedOutput.push(m);\n      });\n\n      // This should work, or even setting it in the extension tester\n      // @ts-ignore\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene2');\n      const extensionTester = new DriverExtensionTester({\n         extensions: [],\n         locale: \"en-US\",\n         story: testStory,\n         storyState: {\n            system_bookmark: 'testing scene2'\n         }\n      });\n\n\n      await extensionTester.givenIntentRequest(\"some random intent\");\n\n      const testParam = extensionTester.generateDriverExtensionParameter();\n      testParam.driver.stage.logVisitedScene(('testing scene1'));\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene1');\n\n      try {\n         await metricsExtension.pre(testParam);\n         await metricsExtension.post(testParam);\n         assert.deepEqualExcluding(generatedOutput, expectedOutput, ['eventId', 'timestamp']);\n      } catch (err) {\n         console.log(err);\n         assert.fail(err.message);\n      }\n   });\n\n   it('Basic workflow with track metrics (using promise override)', async ()=> {\n      const expectedOutput = [{\n         skillId: 'test-application-id',\n         customerIdentifier: 'test-user-id',\n         eventType: 'metrics',\n         requestId: 'test-request-id',\n         sessionId: 'test-session-id',\n         stage: 'stage env variable not defined',\n         locale: 'en-US',\n         metadata: { schemaVersion: '1.0' },\n         details:\n             {\n                previousSceneId: 'testing scene2',\n                sceneId: 'testing scene1',\n               'test-type': 'test-value'\n             } }];\n\n      let generatedOutput: any[] = [];\n      const metricsExtension = new MetricsExtension(async (m) => {\n         assert.isOk(m);\n         return new Promise((resolve) => {\n            generatedOutput.push(m);\n            resolve();\n         });\n      });\n\n      // This should work, or even setting it in the extension tester\n      // @ts-ignore\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene2');\n      const extensionTester = new DriverExtensionTester({\n         extensions: [],\n         locale: \"en-US\",\n         story: testStory,\n         storyState: {\n            system_bookmark: 'testing scene2'\n         }\n      });\n\n\n      await extensionTester.givenIntentRequest(\"some random intent\");\n\n      const testParam = extensionTester.generateDriverExtensionParameter();\n      testParam.driver.stage.logVisitedScene(('testing scene1'));\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene1');\n\n      try {\n         await metricsExtension.pre(testParam);\n         // @ts-ignore\n         await metricsExtension.trackMetric({\n            instructionParameters: {\n               type: 'test-type',\n               value: 'test-value'\n            }\n         });\n         await metricsExtension.post(testParam);\n         assert.deepEqualExcluding(generatedOutput, expectedOutput, ['eventId', 'timestamp']);\n      } catch (err) {\n         console.log(err);\n         assert.fail(err.message);\n      }\n   });\n\n   it('Does not overwrite previousScene and Scene', async() => {\n      const expectedOutput = [{\n         skillId: 'test-application-id',\n         customerIdentifier: 'test-user-id',\n         eventType: 'metrics',\n         requestId: 'test-request-id',\n         sessionId: 'test-session-id',\n         stage: 'stage env variable not defined',\n         locale: 'en-US',\n         metadata: { schemaVersion: '1.0' },\n         details:\n             {\n                previousSceneId: 'testing scene2',\n                sceneId: 'testing scene1'\n             } }];\n\n      let generatedOutput: any[] = [];\n      const metricsExtension = new MetricsExtension(async (m) => {\n         assert.isOk(m);\n         generatedOutput.push(m);\n      });\n\n      // This should work, or even setting it in the extension tester\n      // @ts-ignore\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene2');\n      const extensionTester = new DriverExtensionTester({\n         extensions: [],\n         locale: \"en-US\",\n         story: testStory,\n         storyState: {\n            system_bookmark: 'testing scene2'\n         }\n      });\n\n\n      await extensionTester.givenIntentRequest(\"some random intent\");\n\n      const testParam = extensionTester.generateDriverExtensionParameter();\n      testParam.driver.stage.logVisitedScene(('testing scene1'));\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene1');\n\n      try {\n         await metricsExtension.pre(testParam);\n         // @ts-ignore\n         await metricsExtension.trackMetric({\n            instructionParameters: {\n               type: 'sceneId',\n               value: 'test-value'\n            }\n         });\n         // @ts-ignore\n         await metricsExtension.trackMetric({\n            instructionParameters: {\n               type: 'previousSceneId',\n               value: 'test-value'\n            }\n         });\n         await metricsExtension.post(testParam);\n         assert.deepEqualExcluding(generatedOutput, expectedOutput, ['eventId', 'timestamp']);\n      } catch (err) {\n         console.log(err);\n         assert.fail(err.message);\n      }\n   });\n\n   it('Handles promise rejection in override, expected to throw', async ()=> {\n      const expectedOutput = [{\n         skillId: 'test-application-id',\n         customerIdentifier: 'test-user-id',\n         eventType: 'metrics',\n         requestId: 'test-request-id',\n         sessionId: 'test-session-id',\n         stage: 'stage env variable not defined',\n         locale: 'en-US',\n         metadata: { schemaVersion: '1.0' },\n         details:\n             {\n                previousSceneId: 'testing scene2',\n                sceneId: 'testing scene1',\n                'test-type': 'test-value'\n             } }];\n\n      let generatedOutput: any[] = [];\n      const metricsExtension = new MetricsExtension(async (m) => {\n         assert.isOk(m);\n         return new Promise((resolve, reject) => {\n            reject();\n         });\n      });\n\n      // This should work, or even setting it in the extension tester\n      // @ts-ignore\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene2');\n      const extensionTester = new DriverExtensionTester({\n         extensions: [],\n         locale: \"en-US\",\n         story: testStory,\n         storyState: {\n            system_bookmark: 'testing scene2'\n         }\n      });\n\n\n      await extensionTester.givenIntentRequest(\"some random intent\");\n\n      const testParam = extensionTester.generateDriverExtensionParameter();\n      testParam.driver.stage.logVisitedScene(('testing scene1'));\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene1');\n\n\n      await metricsExtension.pre(testParam);\n      try {\n         await metricsExtension.post(testParam);\n      } catch (err){\n         expect(err.message).to.eq('failed to send metrics');\n      }\n   });\n\n   it('Handles bad data on trackMetrics', async() => {\n      const expectedOutput = [{\n         skillId: 'test-application-id',\n         customerIdentifier: 'test-user-id',\n         eventType: 'metrics',\n         requestId: 'test-request-id',\n         sessionId: 'test-session-id',\n         stage: 'stage env variable not defined',\n         locale: 'en-US',\n         metadata: { schemaVersion: '1.0' },\n         details:\n             {\n                previousSceneId: 'testing scene2',\n                sceneId: 'testing scene1',\n                'test-value': 1\n             } }];\n\n      let generatedOutput: any[] = [];\n      const metricsExtension = new MetricsExtension(async (m) => {\n         assert.isOk(m);\n         generatedOutput.push(m);\n      });\n\n      // This should work, or even setting it in the extension tester\n      // @ts-ignore\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene2');\n      const extensionTester = new DriverExtensionTester({\n         extensions: [],\n         locale: \"en-US\",\n         story: testStory,\n         storyState: {\n            system_bookmark: 'testing scene2'\n         }\n      });\n\n\n      await extensionTester.givenIntentRequest(\"some random intent\");\n\n      const testParam = extensionTester.generateDriverExtensionParameter();\n      testParam.driver.stage.logVisitedScene(('testing scene1'));\n      StoryStateHelper.setCurrentSceneID(testStory, 'testing scene1');\n\n      try {\n         await metricsExtension.pre(testParam);\n         // @ts-ignore\n         await metricsExtension.trackMetric({\n            instructionParameters: {\n               type: 'test-value'\n            }\n         });\n         // @ts-ignore\n         await metricsExtension.trackMetric({\n            instructionParameters: {\n               value: 'test-value'\n            }\n         });\n         // @ts-ignore\n         await metricsExtension.trackMetric({\n            instructionParameters: {\n               pie: 'test-value'\n            }\n         });\n         await metricsExtension.post(testParam);\n         assert.deepEqualExcluding(generatedOutput, expectedOutput, ['eventId', 'timestamp']);\n      } catch (err) {\n         console.log(err);\n         assert.fail(err.message);\n      }\n   })\n\n   it('Initializes', async () => {\n      const metricsExtension = new MetricsExtension();\n      assert.isOk(metricsExtension);\n\n      const metricsExtensionWithOverload = new MetricsExtension(async (m) => {});\n      assert.isOk(metricsExtensionWithOverload);\n   });\n});\n"]}
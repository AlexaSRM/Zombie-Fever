{"version":3,"file":"configAccessor.js","sourceRoot":"","sources":["../src/configAccessor.ts"],"names":[],"mappings":"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","sourcesContent":["declare var process: any\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { readUtf8FileExcludingBom } from '@alexa-games/sfb-util';\n\nimport * as _ from 'lodash';\n\nexport class ConfigAccessor {\n\n    static defaultStage = \"dev\";\n    static defaultLocale = \"en-us\";\n\n    private contentPath: string;\n\n    private deployedFlag?: boolean;\n\n    constructor(private abcConfig: any, contentPath: string) {\n        this.contentPath = path.resolve(contentPath);\n    }\n    public set deployed(value: boolean) {\n        this.deployedFlag = value;\n    }\n    setValue(keyName : string, val: any, stage? : string, locale? : string) : void {\n\n        // Force stage and locale to lowercase\n        stage = (stage) ? stage.toLowerCase() : stage;\n        locale = (locale) ? locale.toLowerCase() : locale;\n\n        if(stage && locale) {\n            _.set(this.abcConfig, stage + \"-\" + locale + \".\" + keyName, val);\n            return;\n        } \n\n        if(stage) {\n            _.set(this.abcConfig, stage + \".\" + keyName, val);\n            return;\n        }\n\n        if(locale) {\n            _.set(this.abcConfig, locale + \".\" + keyName, val);\n            return;\n        }\n\n        _.set(this.abcConfig, \"default.\" + keyName, val);\n        return;\n    }\n\n    public get askSkillDirectoryName() {\n        return this.getValue(\"ask-skill-directory-name\");\n    }\n\n    public get validResourceFileExtensions(): string[] {\n        return this.getValue(\"valid-resource-file-extensions\") || [\"json\", \"csv\"];\n    }\n\n    public get additionalResourceDirectories(): string[] {\n        return this.getValue(\"additional-resource-directories\") || [\"apl-templates\"];\n    }\n\n    public get publishLocales(): string[] {\n        return this.getValue(\"publish-locales\");\n    }\n\n    public getResourcePath(locale: string) {\n        \n        const resourcesPathWithLocaleAndResources = path.join(this.contentPath, locale, \"resources\");\n\n        if (this.deployedFlag === undefined) {\n            // If nothing has set the deployedFlag to a specific value, test for the \n            // presence of the resources folder. Don't set the deployedFlag based on this \n            // result because fs.existsSync will also return true if the locale is not available.\n            if(fs.existsSync(resourcesPathWithLocaleAndResources)) {\n                return resourcesPathWithLocaleAndResources;\n            }\n        } else if (this.deployedFlag === false) {\n            return resourcesPathWithLocaleAndResources\n        }\n       \n        return path.join(this.contentPath, locale);\n    }\n\n    public getS3ResourcesUri(locale: string): string {\n        return `https://${this.getS3DomainName(locale)}/${this.getS3BucketName(locale)}/${this.getAskSkillPath(locale)}/${locale}`;\n    }\n\n    public getS3DomainName(locale: string): string {\n        return this.getValue(\"s3-domain-name\", undefined, locale);\n    }\n\n    public getS3BucketName(locale: string): string {\n        return this.getValue(\"s3-bucket-name\", undefined, locale);\n    }\n\n    public getSnippetMapFilePath(locale: string): string {\n        return path.join(this.getResourcePath(locale), this.getValue(\"snippet-map-filename\", undefined, locale));;\n    }\n\n    public getAskSkillPath(locale: string): string {\n        return this.getValue(\"ask-skill-directory-name\", undefined, locale);\n    }\n\n    public shouldOverwriteWithSource(locale: string): boolean {\n        return this.getValue(\"update-string-with-source\", undefined, locale);\n    }\n\n    public getAplTemplatesFilePath(locale: string) {\n        return path.resolve(this.getResourcePath(locale), this.getValue(\"apl-templates-filename\", undefined, locale));\n    }\n\n    // Return \"\" for file path if apl-commands-filename does not exist\n    public getAplCommandsFilePath(locale: string) {\n        const aplCommandsFilename = this.getValue(\"apl-commands-filename\", undefined, locale);\n        return aplCommandsFilename ? path.resolve(this.getResourcePath(locale), aplCommandsFilename) : \"\";\n    }\n\n    getValue(keyName : string, stage? : string, locale? : string, skipLocaleMapping? : boolean, skillId? : string) : any {\n\n        // Force stage and locate to lowercase\n        stage = (stage) ? stage.toLowerCase() : stage;\n        locale = (locale) ? locale.toLowerCase() : locale;\n        \n        // If not specified, check for an environment variable and use it\n        if(!stage) {\n            stage = process.env.stage;\n            //console.log(\"Getting environment variable from: \" +  JSON.stringify(process.env) );\n        }\n\n        if(!locale) {\n            locale = process.env.locale;\n        }\n\n        // If still not specified, use a default value\n        if(!stage) {\n            stage = ConfigAccessor.defaultStage;\n        }\n\n        if(!locale) {\n            locale = ConfigAccessor.defaultLocale;\n        }\n\n        let mappedLocaleToUse = locale;\n        /*\n        // First map from given locale to mappedLocaleToUse\n        if(!skipLocaleMapping) {\n            // Need to make sure to set skipLocaleMapping to true to avoid a forever recursive loop\n            mappedLocaleToUse = ConfigHelper.getValue(\"localeToUse\", stage, locale, true);\n        }*/\n\n        let val : any = undefined;\n\n        // If skillId set, then try and lookup by it first\n        if(skillId) {\n            val = _.get(this.abcConfig, [skillId, keyName]);  // Don't use a string, because skill id includes dots, so instead use the lodash get array syntax\n            if(val) { return val; }                \n        }\n\n        // First lookup by stage and mappedLocaleToUse\n        val = _.get(this.abcConfig, stage + \"-\" + mappedLocaleToUse + \".\" + keyName);\n        if(val) { return val; }\n\n        // Then lookup by stage\n        val = _.get(this.abcConfig, stage + \".\" + keyName);\n        if(val) { return val; }\n\n        // Then lookup by mappedLocaleToUse\n        val = _.get(this.abcConfig, mappedLocaleToUse + \".\" + keyName);\n        if(val) { return val; }\n\n        // Then lookup by default\n        val = _.get(this.abcConfig, \"default.\" + keyName);\n        if(val) { return val; }\n        \n        return val;\n    }\n\n    public getRequestLocalizedValue(keyName : string, event : any) {\n        let locale = _.get(event, \"request.locale\");\n        let skillId = _.get(event, \"session.application.applicationId\");\n        //console.log(\"[DEBUG] ConfigHelper: getRequestLocalizedValue : Request locale=[ \" + locale + \"], SkillId=[\" + skillId + \"]\");\n\n        return this.getValue(keyName, undefined, locale, false, skillId);\n    }\n\n    public static async loadConfigFile(configFile: string, contentPath: string): Promise<ConfigAccessor> {\n        const data = await readUtf8FileExcludingBom(configFile);\n        return new ConfigAccessor(JSON.parse(data), contentPath);\n    }\n}\n"]}
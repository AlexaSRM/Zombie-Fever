"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const sfb_util_1 = require("@alexa-games/sfb-util");
class APLHelper {
    constructor(locale = "en-US", configAccessor) {
        this.locale = locale;
        this.configAccessor = configAccessor;
        this.commands = {};
        const aplTemplatePath = configAccessor.getAplTemplatesFilePath(locale);
        if (!fs.existsSync(aplTemplatePath)) {
            throw new Error(`Could not find the required APL template configuration in '${aplTemplatePath}'`);
        }
        try {
            this.templates = JSON.parse(sfb_util_1.readUtf8FileExcludingBomSync(aplTemplatePath));
        }
        catch (err) {
            throw new Error(`There was a problem while parsing the APL template configuration.\n${err}`);
        }
        const aplCommandPath = configAccessor.getAplCommandsFilePath(locale);
        if (aplCommandPath && fs.existsSync(aplCommandPath)) {
            try {
                this.commands = JSON.parse(sfb_util_1.readUtf8FileExcludingBomSync(aplCommandPath));
            }
            catch (err) {
                throw new Error(`There was a problem while parsing the APL commands configuration.\n${err}`);
            }
        }
    }
    supportsDisplay(handlerInput) {
        return (handlerInput.requestEnvelope.context &&
            handlerInput.requestEnvelope.context.System &&
            handlerInput.requestEnvelope.context.System.device &&
            handlerInput.requestEnvelope.context.System.device.supportedInterfaces &&
            (handlerInput.requestEnvelope.context.System.device.supportedInterfaces['Alexa.Presentation.APL'] ||
                handlerInput.requestEnvelope.context.System.device.supportedInterfaces.Display) &&
            handlerInput.requestEnvelope.context.Viewport) !== undefined;
    }
    generateAPLDirectiveWithVisualOptions(visualProperties) {
        let templateName = "default";
        if (visualProperties[0] && visualProperties[0].template) {
            templateName = visualProperties[0].template;
        }
        let aplTemplateDirective = this.templates[templateName];
        if (!aplTemplateDirective) {
            return [];
        }
        if (!aplTemplateDirective.type) {
            aplTemplateDirective.type = "Alexa.Presentation.APL.RenderDocument";
        }
        if (!aplTemplateDirective.token) {
            aplTemplateDirective.token = "ABC_RENDERED_DOCUMENT";
        }
        if (!aplTemplateDirective.version && aplTemplateDirective.document && aplTemplateDirective.document.version) {
            aplTemplateDirective.version = aplTemplateDirective.document.version;
        }
        aplTemplateDirective.datasources.visualProperties = Object.assign(aplTemplateDirective.datasources.visualProperties, visualProperties[0]);
        return [
            aplTemplateDirective
        ];
    }
    generateAPLCommand(commandName) {
        return this.commands[commandName];
    }
    getAPLTemplates() {
        return this.templates;
    }
}
exports.APLHelper = APLHelper;
//# sourceMappingURL=APLHelper.js.map
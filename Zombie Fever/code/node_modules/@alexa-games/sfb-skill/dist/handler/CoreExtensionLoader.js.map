{"version":3,"file":"CoreExtensionLoader.js","sourceRoot":"","sources":["../../src/handler/CoreExtensionLoader.ts"],"names":[],"mappings":";;AAAA,8CAAsF;AAEtF,qEAAkE;AAyBlE,MAAa,mBAAmB;IAM5B,YAAY,MAAc,EAAE,cAA8B,EAAE,KAAgC;QACxF,MAAM,cAAc,GAAG,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAChE,MAAM,WAAW,GAAG,cAAc,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAE3D,IAAI,CAAC,kBAAkB,GAAG,IAAI,oBAAY,CAAC,kBAAkB,CAAC,WAAW,WAAW,oCAAoC,CAAC,CAAC;QAE1H,IAAI,qBAAqB,GAAa,EAAE,CAAC;QAEzC,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAY,CAAC,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;QAE9F,IAAI,CAAC,qBAAqB,GAAG,mBAAmB,CAAC,2BAA2B,CACxE,cAAc,EACd,MAAM,EACN,KAAK,CAAC,aAAa,EACnB,KAAK,CAAC,eAAe,CAAC,CAAA;QAE1B,IAAI,CAAC,gBAAgB,GAAG,mBAAmB,CAAC,sBAAsB,CAC9D,cAAc,EACd,cAAc,EACd,MAAM,EACN,KAAK,CAAC,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEO,MAAM,CAAC,2BAA2B,CACtC,cAA8B,EAC9B,MAAc,EACd,aAAqB,EACrB,eAAiC;QAGjC,IAAI,CAAC,eAAe,EAAE;YAClB,eAAe,GAAG,+CAAsB,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;SAC/E;QAED,OAAO,IAAI,oBAAY,CAAC,qBAAqB,CACzC,MAAM,EACN,eAAgB,EAChB,cAAc,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,CAAC;IAEO,MAAM,CAAC,sBAAsB,CACjC,cAA8B,EAC9B,cAAsB,EACtB,MAAc,EACd,UAAsC;QAEtC,IAAI,CAAC,UAAU,EAAE;YACb,UAAU,GAAG,+CAAsB,CAAC,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YACzE,IAAI,CAAC,UAAU,EAAE;gBACb,OAAO,CAAC,IAAI,CAAC,0BAA0B,cAAc,CAAC,qBAAqB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAC5G;SACJ;QAED,IAAI,UAAU,EAAE;YACZ,OAAO,IAAI,oBAAY,CAAC,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;SACxE;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAEM,mBAAmB;QACtB,IAAI,gBAAgB,GAAwB;YACxC,IAAI,CAAC,qBAAqB;YAC1B,IAAI,CAAC,kBAAkB;YACvB,IAAI,CAAC,oBAAoB;SAC5B,CAAC;QAEF,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;SAC/C;QAED,OAAO,gBAAgB,CAAC;IAC5B,CAAC;CACJ;AA/ED,kDA+EC","sourcesContent":["import { ACEExtension, LanguageStrings, ImporterExtension } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from '../configAccessor';\nimport { ResourceStringsLoaders } from './ResourceStringsLoaders';\nimport { HandlerInput } from 'ask-sdk-core';\n\nimport * as fs from 'fs';\n\nexport interface CoreExtensionLoaderParams {\n    /**\n     * Source code path where story.abc file is located.\n     */\n    contentSource: string;\n\n    /**\n     * Provide strings rather than loading from the file system.\n     */\n    languageStrings?: LanguageStrings;\n\n    /**\n     * Provide snippets rather than loading from the file system.\n     */\n    snippets?: { [key: string]: string };\n}\n\n/**\n * Core Extensions are Importer Extensions Only (to be renamed)\n */\nexport class CoreExtensionLoader {\n    voiceOverExtension: ACEExtension.VoiceOverExtension;\n    globalSceneExtension: ACEExtension.GlobalDirectionsExtension;\n    snippetExtension: ACEExtension.SnippetExtension | undefined;\n    localizationExtension: ACEExtension.LocalizationExtension;\n\n    constructor(locale: string, configAccessor: ConfigAccessor, param: CoreExtensionLoaderParams) {\n        const s3ResourcesUri = configAccessor.getS3ResourcesUri(locale);\n        const s3BuketName = configAccessor.getS3BucketName(locale);\n\n        this.voiceOverExtension = new ACEExtension.VoiceOverExtension(`https://${s3BuketName}.s3.amazonaws.com/vo/{{file_name}}`);\n\n        let globalSceneExceptions: string[] = []; // list of scene names which should not have the global scene applied.\n\n        this.globalSceneExtension = new ACEExtension.GlobalDirectionsExtension(globalSceneExceptions);\n\n        this.localizationExtension = CoreExtensionLoader.createLocalizationExtension(\n            configAccessor,\n            locale,\n            param.contentSource,\n            param.languageStrings)\n\n        this.snippetExtension = CoreExtensionLoader.createSnippetExtension(\n            configAccessor,\n            s3ResourcesUri,\n            locale,\n            param.snippets);\n    }\n\n    private static createLocalizationExtension(\n        configAccessor: ConfigAccessor,\n        locale: string,\n        contentSource: string,\n        languageStrings?: LanguageStrings\n    ): ACEExtension.LocalizationExtension {\n\n        if (!languageStrings) {\n            languageStrings = ResourceStringsLoaders.loadLanguageStrings(contentSource);\n        }\n\n        return new ACEExtension.LocalizationExtension(\n            locale,\n            languageStrings!,\n            configAccessor.shouldOverwriteWithSource(locale));\n    }\n\n    private static createSnippetExtension(\n        configAccessor: ConfigAccessor,\n        s3ResourcesUri: string,\n        locale: string,\n        snippetMap?: { [key: string]: string }): ACEExtension.SnippetExtension | undefined {\n\n        if (!snippetMap) {\n            snippetMap = ResourceStringsLoaders.loadSnippets(configAccessor, locale);\n            if (!snippetMap) {\n                console.warn(`[WARN] Snippet config '${configAccessor.getSnippetMapFilePath(locale)}' cannot be found.`);\n            }\n        }\n\n        if (snippetMap) {\n            return new ACEExtension.SnippetExtension(snippetMap, s3ResourcesUri);\n        }\n\n        return undefined;\n    }\n\n    public getImportExtensions(): ImporterExtension[] {\n        let importExtensions: ImporterExtension[] = [\n            this.localizationExtension,\n            this.voiceOverExtension,\n            this.globalSceneExtension\n        ];\n\n        if (this.snippetExtension) {\n            importExtensions.push(this.snippetExtension)\n        }\n\n        return importExtensions;\n    }\n}"]}
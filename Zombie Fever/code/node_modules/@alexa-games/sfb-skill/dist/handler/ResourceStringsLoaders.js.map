{"version":3,"file":"ResourceStringsLoaders.js","sourceRoot":"","sources":["../../src/handler/ResourceStringsLoaders.ts"],"names":[],"mappings":";;;;;;;;;AACA,oDAAqE;AAGrE,uCAAyB;AACzB,2CAA6B;AAEhB,QAAA,wBAAwB,GAAG,sBAAsB,CAAC;AAE/D,MAAa,sBAAsB;IAKxB,MAAM,CAAC,mBAAmB,CAAC,aAAqB;QAG3D,OAAO,CAAC,GAAG,CAAC,iBAAiB,aAAa,EAAE,CAAC,CAAC;QAEtC,IAAI,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,gCAAwB,CAAC,CAAC;QAE5E,IAAI,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE;YAC/C,OAAO,CAAC,GAAG,CAAC,4BAA4B,kBAAkB,EAAE,CAAC,CAAC;YAClD,MAAM,IAAI,GAAG,uCAA4B,CAAC,kBAAkB,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAoB,CAAC;SAC9C;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAOM,MAAM,CAAC,YAAY,CAAC,cAA8B,EAAE,MAAc;QACrE,MAAM,kBAAkB,GAAG,cAAc,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAExE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE;YACpC,OAAO,SAAS,CAAC;SACpB;aAAM;YACH,MAAM,IAAI,GAAG,uCAA4B,CAAC,kBAAkB,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAA8B,CAAC;SACxD;IACL,CAAC;CACJ;AApCD,wDAoCC","sourcesContent":["import { LanguageStrings } from '@alexa-games/sfb-f';\nimport { readUtf8FileExcludingBomSync } from '@alexa-games/sfb-util';\nimport { ConfigAccessor } from '../configAccessor';\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport const LANGUAGE_STRING_FILENAME = 'languageStrings.json';\n\nexport class ResourceStringsLoaders {\n    /**\n     * Loads language string file if available.\n     * @param contentSource Path where story ABC files source is located.\n     */\n    public static loadLanguageStrings(contentSource: string): LanguageStrings {\n\n\nconsole.log(`contentSource=${contentSource}`);\n\n        let languageStringPath = path.join(contentSource, LANGUAGE_STRING_FILENAME);\n\n        if (fs.existsSync(languageStringPath)) {\nconsole.log(`Found languageStringPath=${languageStringPath}`);\n            const data = readUtf8FileExcludingBomSync(languageStringPath);\n            return JSON.parse(data) as LanguageStrings;\n        }\n\n        return {};\n    }\n\n    /**\n     * Loads snippet file for the given locale.\n     * @param configAccessor Configuration accessor.\n     * @param locale Current locale.\n     */\n    public static loadSnippets(configAccessor: ConfigAccessor, locale: string): { [key: string]: string } | undefined {\n        const snippetMapFilePath = configAccessor.getSnippetMapFilePath(locale);\n\n        if (!fs.existsSync(snippetMapFilePath)) {\n            return undefined;\n        } else {\n            const data = readUtf8FileExcludingBomSync(snippetMapFilePath);\n            return JSON.parse(data) as { [key: string]: string };\n        }\n    }\n}"]}
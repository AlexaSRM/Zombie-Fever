"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sfb_f_1 = require("@alexa-games/sfb-f");
const ResourceStringsLoaders_1 = require("./ResourceStringsLoaders");
class CoreExtensionLoader {
    constructor(locale, configAccessor, param) {
        const s3ResourcesUri = configAccessor.getS3ResourcesUri(locale);
        const s3BuketName = configAccessor.getS3BucketName(locale);
        this.voiceOverExtension = new sfb_f_1.ACEExtension.VoiceOverExtension(`https://${s3BuketName}.s3.amazonaws.com/vo/{{file_name}}`);
        let globalSceneExceptions = [];
        this.globalSceneExtension = new sfb_f_1.ACEExtension.GlobalDirectionsExtension(globalSceneExceptions);
        this.localizationExtension = CoreExtensionLoader.createLocalizationExtension(configAccessor, locale, param.contentSource, param.languageStrings);
        this.snippetExtension = CoreExtensionLoader.createSnippetExtension(configAccessor, s3ResourcesUri, locale, param.snippets);
    }
    static createLocalizationExtension(configAccessor, locale, contentSource, languageStrings) {
        if (!languageStrings) {
            languageStrings = ResourceStringsLoaders_1.ResourceStringsLoaders.loadLanguageStrings(contentSource);
        }
        return new sfb_f_1.ACEExtension.LocalizationExtension(locale, languageStrings, configAccessor.shouldOverwriteWithSource(locale));
    }
    static createSnippetExtension(configAccessor, s3ResourcesUri, locale, snippetMap) {
        if (!snippetMap) {
            snippetMap = ResourceStringsLoaders_1.ResourceStringsLoaders.loadSnippets(configAccessor, locale);
            if (!snippetMap) {
                console.warn(`[WARN] Snippet config '${configAccessor.getSnippetMapFilePath(locale)}' cannot be found.`);
            }
        }
        if (snippetMap) {
            return new sfb_f_1.ACEExtension.SnippetExtension(snippetMap, s3ResourcesUri);
        }
        return undefined;
    }
    getImportExtensions() {
        let importExtensions = [
            this.localizationExtension,
            this.voiceOverExtension,
            this.globalSceneExtension
        ];
        if (this.snippetExtension) {
            importExtensions.push(this.snippetExtension);
        }
        return importExtensions;
    }
}
exports.CoreExtensionLoader = CoreExtensionLoader;
//# sourceMappingURL=CoreExtensionLoader.js.map
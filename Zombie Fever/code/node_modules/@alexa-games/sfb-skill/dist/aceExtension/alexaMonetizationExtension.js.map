{"version":3,"file":"alexaMonetizationExtension.js","sourceRoot":"","sources":["../../src/aceExtension/alexaMonetizationExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import { DriverExtension, InstructionExtension, DriverExtensionParameter, InstructionExtensionParameter, StoryStateHelper, Choice, SceneDirectionBuilder } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from './../configAccessor';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { readUtf8FileExcludingBomSync } from '@alexa-games/sfb-util';\n\nexport interface ISPItem { \n    ISPID: string;\n    productName: string;\n}\n\nexport class AlexaMonetizationExtension implements DriverExtension, InstructionExtension {\n    private enterMonetization: boolean = false;\n    private workflowType: string = \"\";\n    private activeProductISP: string = \"\";\n    private productToISP: {[key: string]: string};\n\n    public constructor(locale: string, configAccessor: ConfigAccessor) {\n        const resourcePath = configAccessor.getResourcePath(locale);\n        const ispConfigPath: string = path.resolve(resourcePath, configAccessor.getValue(\"isp-config-filename\", undefined, locale));\n        this.productToISP = {};\n        if (!fs.existsSync(ispConfigPath)) {\n            console.warn(`[WARN] ISP config '${ispConfigPath}' cannot be found.`);\n        } else {\n            try {\n                let productISPConfig: ISPItem[] = JSON.parse(readUtf8FileExcludingBomSync(ispConfigPath));\n                for (let ispItem of productISPConfig) {\n                    this.productToISP[ispItem.productName] = ispItem.ISPID;\n                }\n            } catch (err) {\n                console.warn(`[WARN] Badly formed JSON : ISP config '${ispConfigPath}' could not be opened.`);\n            }\n        }\n    }\n\n    async post(param: DriverExtensionParameter) {\n        const handlerInput = param.userInputHelper.getHandlerInput();\n\n        if (this.enterMonetization && handlerInput) {\n            let directive: any = undefined;\n\t\t\tif (this.enterMonetization) {\n                switch(this.workflowType) {\n                case \"buy\": {\n                    directive = this.generateBuyDirective(this.activeProductISP);\n                    break;\n                }\n                case \"refund\": {\n                    directive = this.generateCancelDirective(this.activeProductISP);\n                    break;\n                }\n                }\n            }\n    \n            if (directive) {\n                handlerInput.responseBuilder.addDirective(directive);\n            }\n        }\n    }\n\n    async pre(param: DriverExtensionParameter) {\n        const handlerInput = param.userInputHelper.getHandlerInput();\n\n        if (handlerInput && handlerInput.requestEnvelope.request.type == \"Connections.Response\") {\n            StoryStateHelper.setStoryPaused(param.storyState, false);\n            \n            param.userInputHelper.setInputIntent(this.parseAlexaMonetizationResponse(handlerInput.requestEnvelope));\n        }        \n    }\n\n    async buy(param: InstructionExtensionParameter): Promise<void> {\n        this.workflowType = \"buy\";\n\n        this.registerMonetizationChoices(param);\n    }\n\n    async refund(param: InstructionExtensionParameter): Promise<void> {\n        this.workflowType = \"refund\";\n\n        this.registerMonetizationChoices(param);\n    }\n\n    private registerMonetizationChoices(param: InstructionExtensionParameter) {\n        const instructionParam = param.instructionParameters;\n\n        const successTarget: string = instructionParam.success? instructionParam.success.trim(): \"\";\n        const failTarget: string = instructionParam.fail? instructionParam.fail.trim(): \"\";\n        const declineTarget: string = instructionParam.declined? instructionParam.declined.trim(): failTarget;\n        const errorTarget: string = instructionParam.error? instructionParam.error.trim(): failTarget;\n        const alreadyTarget: string = instructionParam.already_purchased? instructionParam.already_purchased.trim(): failTarget;\n        \n        this.enterMonetization = true;\n\n        let isp: string = this.productToISP[instructionParam.item];\n\n        if (isp) {\n            this.activeProductISP = isp;\n        } else {\n            throw new Error(`[AlexaMonetizationExtension Syntax Error] monetized item=[${instructionParam.item}] does not have the ISP configured.`);\n        }\n\n        if (this.enterMonetization) {\n            let successChoice: Choice = {\n                id: \"purchase result sucess\",\n                sceneDirections: new SceneDirectionBuilder().goTo(successTarget).build(),\n                utterances: [\"Connections.Response.ACCEPTED\"],\n                saveToHistory: false\n            }\n\n            let declinedChoice: Choice = {\n                id: \"purchase result decline\",\n                sceneDirections: new SceneDirectionBuilder().goTo(declineTarget).build(),\n                utterances: [\"Connections.Response.DECLINED\"],\n                saveToHistory: false\n            }\n\n            let alreadyChoice: Choice = {\n                id: \"purchase result already purchased\",\n                sceneDirections: new SceneDirectionBuilder().goTo(alreadyTarget).build(),\n                utterances: [\"Connections.Response.ALREADY_PURCHASED\"],\n                saveToHistory: false\n            }\n\n            let errorChoice: Choice = {\n                id: \"purchase result error\",\n                sceneDirections: new SceneDirectionBuilder().goTo(errorTarget).build(),\n                utterances: [\"Connections.Response.ERROR\"],\n                saveToHistory: false\n            }\n\n            let forcedRelaunchChoice: Choice = {\n                id: \"purchase result launch\",\n                sceneDirections: new SceneDirectionBuilder().goTo(failTarget).build(),\n                utterances: [\"LaunchRequest\"],\n                saveToHistory: false\n            }\n\n            StoryStateHelper.enqueueAvailableChoice(param.storyState, successChoice);\n            StoryStateHelper.enqueueAvailableChoice(param.storyState, declinedChoice);\n            StoryStateHelper.enqueueAvailableChoice(param.storyState, alreadyChoice);\n            StoryStateHelper.enqueueAvailableChoice(param.storyState, errorChoice);\n            StoryStateHelper.enqueueAvailableChoice(param.storyState, forcedRelaunchChoice);\n        }\n    }\n\n    private parseAlexaMonetizationResponse(response: any): string {\n        let purchaseResult: string = \"ERROR\";\n\n        if (response.request.payload) {\n            purchaseResult = response.request.payload.purchaseResult;\n            let productId: string = response.request.payload.productId;\n    \n            console.log(\"[INFO] Purchase Result: \" + purchaseResult + \" for Product ID: \" + productId);    \n        }\n\n        return `Connections.Response.${purchaseResult}`;\n    }\n\n    /**\n     * Generate buy directive for a given product.\n     * As seen in https://developer.amazon.com/docs/in-skill-purchase/add-isps-to-a-skill.html#handle-results\n     * @param productId \n     * @param token \n     */\n    private generateBuyDirective(productId: string, token?: string): any {\n        if(!token) {\n            token = \"noTokenProvided\";\n        }\n\n        let buyDirective : any= {\n            type: \"Connections.SendRequest\",\n            name: \"Buy\",\n            payload: {\n                \"InSkillProduct\": {\n                    \"productId\": productId\n                }\n            },\n            token: token\n        };\n\n        return buyDirective;\n    }\n\n    /**\n     * Generate refund directive for a given product.\n     * As seen in https://developer.amazon.com/docs/in-skill-purchase/add-isps-to-a-skill.html#handle-results\n     */\n    private generateCancelDirective(productID:string, token: string = \"noTokenProvided\"): any {\n        return {\n            type: 'Connections.SendRequest',\n            name: 'Cancel',\n            payload: {\n                InSkillProduct: {\n                    productId: productID,\n                }\n            },\n            token: token\n        };\n    }\n}"]}
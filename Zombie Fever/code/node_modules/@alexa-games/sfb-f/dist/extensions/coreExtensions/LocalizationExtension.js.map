{"version":3,"file":"LocalizationExtension.js","sourceRoot":"","sources":["../../../extensions/coreExtensions/LocalizationExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scene, InstructionType } from '../../story/storyMetadata';\nimport { ImporterExtension } from '../ACEExtension';\nimport { SourceContentHelper } from '../../importPlugins/sourceContentHelper';\nimport { StoryMetadataHelper } from '../../importPlugins/storyMetadataHelper';\nimport { LanguageStrings } from './LanguageStrings';\n\nimport { createHash } from 'crypto';\n\n/**\n * Creates a string ID for each chunk of localizable strings, and replaces them.\n */\nexport class LocalizationExtension implements ImporterExtension {\n    public constructor(private locale: string, private languageString: LanguageStrings, private overwrite: boolean = false, private srcLocale: string = \"en-US\") {\n    }\n\n    async extendSourceContent(sourceHelper: SourceContentHelper): Promise<void> {\n    }\n\n    async extendImportedContent(metadataHelper: StoryMetadataHelper): Promise<void> {\n        const originScenes: Scene[] = metadataHelper.getAllScenes();\n\n        let srcLocaleStrings: {[key: string]: any} = {};\n        let resultingStrings: {[key: string]: any} = {};\n\n        for (let scene of originScenes) {\n            for (let content of scene.contents) {\n                // check narration strings\n                if (content.narration && content.narration.trim().length > 0) {\n                    const narration: string = content.narration.trim();\n                    const stringId: string = `${scene.id}.narration`;\n\n                    this.updateLanguageString(stringId, narration, srcLocaleStrings, resultingStrings);\n\n                    // replace with localized string\n                    content.narration = resultingStrings[stringId];\n                }\n\n                // check for utterance strings\n                if (content.sceneDirections && content.sceneDirections.length > 0) {\n                    for (let direction of content.sceneDirections) {\n                        if (direction.directionType === InstructionType.CHOICE) {\n                            const utterances = direction.parameters.utterances;\n                            const replacingUtterances: string[] = [];\n\n                            for (let utterance of utterances) {\n                                const stringId: string = `utterance-${utterance}`;\n                                \n                                this.updateLanguageString(stringId, utterance, srcLocaleStrings, resultingStrings);\n        \n                                // replace with localized string\n                                replacingUtterances.push(resultingStrings[stringId]);\n                            }\n\n                            direction.parameters.utterances = replacingUtterances;\n                        } if (direction.directionType === InstructionType.REPROMPT || direction.directionType === InstructionType.RECAP) {\n                            const message: string = direction.parameters.message.trim();\n                            const stringId: string = `${scene.id}.${direction.directionType}`;\n\n                            this.updateLanguageString(stringId, message, srcLocaleStrings, resultingStrings);\n\n                            // replace with localized string\n                            direction.parameters.message = resultingStrings[stringId];\n                        }\n                    }\n                }                  \n            }\n        }\n\n        if (!this.languageString[this.locale]) {\n            this.languageString[this.locale] = {\n                translation: {}\n            }\n        }\n\n        this.languageString[this.locale].translation = resultingStrings;\n        \n        metadataHelper.setAllScenes(originScenes);\n    }\n\n    public getLocalizedStringsObject(): LanguageStrings {\n        return this.languageString;\n    }\n\n    private updateLanguageString(stringId: string, stringValue: string,\n        sourceLanguages: {[key: string]: any}, currentLanguages: {[key: string]: any}) {\n\n        const stringHash: string = createHash('md5').update(stringValue.replace(/[\\s]+/g, \" \")).digest('hex');\n        const existingSourceString: string | undefined = this.languageString[this.srcLocale] && this.languageString[this.srcLocale].translation?\n            this.languageString[this.srcLocale].translation[stringId]\n            :undefined;\n\n        const languageStringHash: string | undefined = existingSourceString? createHash('md5').update(existingSourceString.replace(/[\\s]+/g, \" \")).digest('hex'): undefined;\n\n        if (languageStringHash && languageStringHash !== stringHash) {\n            // Source content changed since last languageString freeze.\n            if (this.overwrite) {\n                sourceLanguages[stringId] = stringValue;\n            } else {\n                sourceLanguages[stringId] = existingSourceString;\n            }\n        } else if (!languageStringHash) {\n            // New string id for Source content added\n            sourceLanguages[stringId] = stringValue;\n        } else {\n            sourceLanguages[stringId] = existingSourceString;\n        }\n\n        if (this.locale != this.srcLocale && this.languageString[this.locale] && this.languageString[this.locale].translation[stringId]) {\n            // non-source locale strings should not be updated since we don't know if the translation has already occured on the file.\n            currentLanguages[stringId] = this.languageString[this.locale].translation[stringId];\n        }\n\n        if (!currentLanguages[stringId]) {\n            currentLanguages[stringId] = sourceLanguages[stringId];\n        }\n    }\n}\n"]}
{"version":3,"file":"SnippetExtension.js","sourceRoot":"","sources":["../../../extensions/coreExtensions/SnippetExtension.ts"],"names":[],"mappings":";;AAIA,MAAa,gBAAgB;IAIzB,YAAY,UAAmC,EAAE,iBAAyB,EAAE;QAFpE,mBAAc,GAAW,EAAE,CAAC;QAGhC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,YAAiC;QACvD,MAAM,QAAQ,GAAG,YAAY,CAAC,oBAAoB,EAAE,CAAC;QAErD,KAAK,IAAI,WAAW,IAAI,QAAQ,EAAE;YAC9B,KAAK,IAAI,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBACjD,oIAAoI;gBACpI,IAAI,eAAe,GAAW,IAAI,MAAM,CAAC,iBAAiB,UAAU,0MAA0M,EAAE,IAAI,CAAC,CAAC,CAAC,wDAAwD;gBAE/U,IAAI,uBAAuB,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;gBAE1D,uBAAuB,GAAG,uBAAuB,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,6BAA6B,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;gBAEhI,oGAAoG;gBACpG,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;oBACxB,MAAM,YAAY,GAAG,WAAW,CAAC,IAAI,CAAC;oBACtC,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,uBAAuB,CAAC,CAAC;oBAErF,WAAW,CAAC,IAAI,GAAG,SAAS,CAAC;oBAC7B,0CAA0C;oBAC1C,IAAG,SAAS,KAAK,YAAY,EAAE;wBAC3B,MAAM;qBACT;iBACJ;aACJ;SACJ;QAED,YAAY,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,cAAmC;IAC/D,CAAC;CACJ;AAxCD,4CAwCC","sourcesContent":["import { ImporterExtension } from '../ACEExtension';\nimport { SourceContentHelper } from '../../importPlugins/sourceContentHelper';\nimport { StoryMetadataHelper } from '../../importPlugins/storyMetadataHelper';\n\nexport class SnippetExtension implements ImporterExtension {\n    private snippetMap: {[key: string]: string};\n    private s3ResourcesUri: string = \"\";\n\n    constructor(snippetMap: {[key: string]: string}, s3ResourcesUri: string = \"\") {\n        this.snippetMap = JSON.parse(JSON.stringify(snippetMap));\n        this.s3ResourcesUri = s3ResourcesUri;\n    }\n\n    async extendSourceContent(sourceHelper: SourceContentHelper): Promise<void> {\n        const contents = sourceHelper.getAllSourceContents();\n\n        for (let contentItem of contents) {\n            for (let snippetKey of Object.keys(this.snippetMap)) {\n                // This regex has a check for no additional \"[\" or \"<\" signs in it, so those will not be allowed within a snippet name or arguments.\n                let snippetKeyRegex: RegExp = new RegExp(`[<\\\\[][ \\\\t]*?${snippetKey}(?:[ \\\\t]+?([^>\\\\[\\\\] \\\\t]+?))?(?:[ \\\\t]+?([^>\\\\[\\\\] \\\\t]+?))?(?:[ \\\\t]+?([^>\\\\[\\\\] \\\\t]+?))?(?:[ \\\\t]+?([^>\\\\[\\\\] \\\\t]+?))?(?:[ \\\\t]+?([^>\\\\[\\\\] \\\\t]+?))?(?:[ \\\\t]+?([^>\\\\[\\\\] \\\\t]+?))?[ \\\\t]*?[>\\\\]]`, \"gi\"); // Allow up to 5 substitutions in snippets $1 through $5\n    \n                let snippetReplacementValue = this.snippetMap[snippetKey];\n    \n                snippetReplacementValue = snippetReplacementValue.replace(new RegExp('\\\\$SNIPPET_S3_RESOURCES_URI', 'gm'), this.s3ResourcesUri);\n    \n                // Replace until I don't need to replace anymore, or I hit 10 times so I don't infinite loop forever\n                for(let i = 0; i < 10; i++) {\n                    const beforeString = contentItem.text;\n                    const newString = contentItem.text.replace(snippetKeyRegex, snippetReplacementValue);\n\n                    contentItem.text = newString;\n                    // If no difference, break out of the loop\n                    if(newString === beforeString) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        sourceHelper.setAllSourceContents(contents);\n    }\n    \n    async extendImportedContent(metadataHelper: StoryMetadataHelper): Promise<void> {\n    }\n}"]}
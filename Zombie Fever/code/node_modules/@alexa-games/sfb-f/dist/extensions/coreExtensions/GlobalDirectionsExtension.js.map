{"version":3,"file":"GlobalDirectionsExtension.js","sourceRoot":"","sources":["../../../extensions/coreExtensions/GlobalDirectionsExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImporterExtension } from '../ACEExtension';\nimport { Scene, Instruction } from '../../story/storyMetadata';\nimport { SourceContentHelper } from '../../importPlugins/sourceContentHelper';\nimport { StoryMetadataHelper } from '../../importPlugins/storyMetadataHelper';\n\n\n/**\n *  Append the Scene Directions of a \"Global\" to all other scenes.\n *  The \"Global\" must be named Global.\n *  If you wish to prepend before every scene, define a scene named \"global prepend\".\n *  If you wish to postpend after every scene, define a scene named \"global postpend\".\n *  conditional variation of the scene is not supported for the Global.\n */\nexport class GlobalDirectionsExtension implements ImporterExtension {\n    private exceptionScenes: string[];\n\n    constructor(exceptionScenes: string[] = []) {\n        this.exceptionScenes = [];\n        for (let id of exceptionScenes) {\n            this.exceptionScenes.push(id.trim().toLowerCase());\n        }\n    }\n\n    async extendSourceContent(sourceHelper: SourceContentHelper): Promise<void> {\n    }\n\n    async extendImportedContent(metadataHelper: StoryMetadataHelper): Promise<void> {\n        let scenes: Scene[] = metadataHelper.getAllScenes();\n\n        //search global scene\n        let postpendGlobalScenes: Scene[] = scenes.filter(scene => {\n            const isGlobalPostpend = this.isGlobalPostpend(scene.id);\n\n            // Mark each scene direction with a sourceScene attribute before returning\n            if(isGlobalPostpend && scene && scene.contents && scene.contents[0] && scene.contents[0].sceneDirections ) {\n                for(let sceneDirection of scene.contents[0].sceneDirections) {\n                    recursiveMarkSourceScene(sceneDirection, scene.id); // Mark the sourceScene in this direction and all child directions it may contain\n                }\n            }\n\n            return isGlobalPostpend;\n        });\n\n        let prependGlobalScenes: Scene[] = scenes.filter(scene => {\n            const isGlobalPrepend = this.isGlobalPrepend(scene.id);\n\n            // Mark each scene direction with a sourceScene attribute before returning\n            if(isGlobalPrepend && scene && scene.contents && scene.contents[0] && scene.contents[0].sceneDirections ) {\n                for(let sceneDirection of scene.contents[0].sceneDirections) {\n                    recursiveMarkSourceScene(sceneDirection, scene.id); // Mark the sourceScene in this direction and all child directions it may contain\n                }\n            }\n\n            return isGlobalPrepend;\n        });\n\n        if (postpendGlobalScenes.length > 0) {\n            scenes.filter(scene => {\n                return !this.exceptionScenes.includes(scene.id.trim().toLowerCase());\n            }).forEach(scene => {\n                if (!this.isGlobalPostpend(scene.id) && !this.isGlobalPrepend(scene.id)) {\n                    scene.contents.forEach(content => {\n                        postpendGlobalScenes.forEach(postpendGlobalScene => {\n                            if (content.sceneDirections) {\n                                content.sceneDirections = content.sceneDirections.concat(postpendGlobalScene.contents[0].sceneDirections || []);\n                            } else {\n                                content.sceneDirections = postpendGlobalScene.contents[0].sceneDirections || [];\n                            }\n\n                            if (postpendGlobalScene.contents[0].narration && postpendGlobalScene.contents[0].narration.trim().length > 0) {\n                                content.narration += \" \" + postpendGlobalScene.contents[0].narration;\n                            }\n                        });\n                    });\n                }\n            });\n        }\n\n        if (prependGlobalScenes.length > 0) {\n            scenes.filter(scene => {\n                return !this.exceptionScenes.includes(scene.id.trim().toLowerCase());\n            }).forEach(scene => {\n                if (!this.isGlobalPostpend(scene.id) && !this.isGlobalPrepend(scene.id)) {\n                    scene.contents.forEach(content => {\n                        prependGlobalScenes.forEach(prependGlobalScene => {\n                            if (content.sceneDirections) {\n                                content.sceneDirections = (prependGlobalScene.contents[0].sceneDirections || []).concat(content.sceneDirections);\n                            } else {\n                                content.sceneDirections = prependGlobalScene.contents[0].sceneDirections || [];\n                            }\n\n                            if (prependGlobalScene.contents[0].narration && prependGlobalScene.contents[0].narration.trim().length > 0) {\n                                content.narration = prependGlobalScene.contents[0].narration + \" \" + content.narration;\n                            }\n                        });\n                    });\n                }\n            });\n        }\n\n        metadataHelper.setAllScenes(scenes);\n    }\n    \n    private isGlobalPrepend(id: string): boolean{\n        return id.toLowerCase().trim() === \"global prepend\".toLowerCase().trim();\n    }\n\n    private isGlobalPostpend(id: string): boolean{\n        return id.toLowerCase().trim() === \"Global\".toLowerCase().trim() || id.toLowerCase().trim() === \"global postpend\".toLowerCase().trim() || id.toLowerCase().trim() === \"global append\".toLowerCase().trim();\n    }\n}\n\nfunction recursiveMarkSourceScene(direction : Instruction, sourceScene : string) {\n    direction.sourceScene = sourceScene;\n\n    if(direction.parameters && direction.parameters.directions && direction.parameters.directions.length > 0) {\n\n        for(let dir of direction.parameters.directions) {\n            recursiveMarkSourceScene(dir, sourceScene);\n        }\n    }\n}"]}
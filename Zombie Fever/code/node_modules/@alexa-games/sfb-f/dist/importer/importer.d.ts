/**
 * abc-importer
 *
 * Imports and exports between various branched content formats and the Alexa Branching Content (ABC) format.
 */
import { AlexaABCVerifier } from "../verificationHandlers/alexa-abc-verifier";
import { ABCImportPlugin } from './../importPlugins/importerPlugin';
import { ABCExporter } from './../exportHandlers/exporter';
import { StoryMetadata } from './../story/storyMetadata';
import { ModelBuilder } from '../bakeUtilities/VoiceModelBuilder';
import { DriverExtension, ImporterExtension, InstructionExtension } from "../extensions/ACEExtension";
export interface ContentItem {
    id?: string;
    text: string;
}
interface ImportOption {
    /**
     * raw string of content to import.
     */
    content?: string;
    /**
     * list of contents to import as one story.
     */
    contents?: ContentItem[];
    /**
     * content format version. default is 1
     */
    version?: number;
    /**
     * importing locale
     */
    locale?: string;
    /**
     * if true, the import does not throw on import error.
     */
    ignoreSyntaxError?: boolean;
    modelBuilder?: ModelBuilder;
    invocationName?: string;
    customSlots?: {
        [key: string]: string[];
    };
}
export declare class ACEImporter {
    static readonly fallBackEnabledLocales: string[];
    importHandlersByType: {
        [key: string]: ABCImportPlugin;
    };
    exportHandlersByType: {
        [key: string]: ABCExporter;
    };
    importExtensions: (DriverExtension | ImporterExtension | InstructionExtension)[];
    verifier: AlexaABCVerifier;
    constructor(customImporters?: ABCImportPlugin[], customerExporters?: {
        [key: string]: ABCExporter;
    }, extensions?: (DriverExtension | ImporterExtension | InstructionExtension)[]);
    importABCStory(format: string, filename: string, storyTitle: string, storyID: string, autoIntentGrouping?: boolean, param?: ImportOption): Promise<StoryMetadata>;
    exportTo(format: string, filename: string, outputFilename: string): void;
}
export {};

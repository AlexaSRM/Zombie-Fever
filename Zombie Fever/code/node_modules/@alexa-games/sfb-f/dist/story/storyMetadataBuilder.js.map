{"version":3,"file":"storyMetadataBuilder.js","sourceRoot":"","sources":["../../story/storyMetadataBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { StoryMetadata, Instruction, Scene } from './storyMetadata';\nimport { InstructionBuilder } from './instructionBuilder';\n\n\ninterface BuilderScene {\n    id: string;\n    say?: string;\n    reprompt?: string;\n    recap?: string;\n    then?: Instruction[];\n}\n\n/**\n * Builder for [[StoryMetadata]] used for SFB.\n */\nexport class StoryMetadataBuilder {\n    private scenes: BuilderScene[];\n\n    constructor(private storyID: string, private storyTitle: string) {\n        this.scenes = [];\n    }\n\n    public addScene(sceneParam :BuilderScene) {\n        this.scenes.push(sceneParam);\n    }\n\n    public setSceneSay(sceneId: string, say: string) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].say = say;\n    }\n\n    public setSceneRecap(sceneId: string, recap: string) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].recap = recap;\n    }\n\n    public setSceneReprompt(sceneId: string, reprompt: string) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].reprompt = reprompt;\n    }\n\n    public setSceneInstructions(sceneId: string, instructions: Instruction[]) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].then = instructions;\n    }\n\n    public appendSceneSay(sceneId: string, say: string) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].say += \" \" + say;\n    }\n\n    public appendSceneRecap(sceneId: string, recap: string) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].recap += \" \" + recap;\n    }\n\n    public appendSceneReprompt(sceneId: string, reprompt: string) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].reprompt += \" \" + reprompt;\n    }\n\n    public appendSceneInstructions(sceneId: string, instructions: Instruction[]) {\n        const i = this.indexOf(sceneId);\n\n        if (i < 0) {\n            throw new Error(`Cannot find a scene with ID: '${sceneId}'`);\n        }\n\n        this.scenes[i].then = (this.scenes[i].then || []).concat(instructions);\n    }\n\n    private indexOf(sceneId: string): number {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.scenes[i];\n\n            if (scene.id === sceneId) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    build(): StoryMetadata {\n        const story: StoryMetadata = {\n            pluginName: \"default\",\n            storyID: this.storyID,\n            storyTitle: this.storyTitle,\n            scenes: [\n\n            ]\n        }\n\n        this.scenes.forEach((builderScene) => {\n\n            const instructionBuilder = new InstructionBuilder();\n\n            if (builderScene.recap) {\n                instructionBuilder.setRecap(builderScene.recap);\n            }\n\n            if (builderScene.reprompt) {\n                instructionBuilder.setReprompt(builderScene.reprompt);\n            }\n\n            if (builderScene.then) {\n                builderScene.then.forEach((instruction) => {\n                    instructionBuilder.addInstruction(instruction);\n                });\n            }\n\n            story.scenes.push({\n                id: builderScene.id,\n                contents: [\n                    {\n                        narration: builderScene.say,\n                        sceneDirections: instructionBuilder.build()\n                    }\n                ]\n            });\n        });\n\n        return story;\n    }\n}"]}
import { SceneAudioItem, AudioItem } from '../driver/driverEntity';
import { AudioFileAccessor, MixMode } from '@alexa-games/sfb-polly';
import { DriverPollyConfig, Narrator } from './driver';
export declare class AudioItemUtil {
    private generatedFiles;
    constructor();
    /**
     * Combines consecutive polly audio items in a sequence with same settings into one item.
     *
     * @param _sceneAudio audio item sequence to perform condensing on
     * @param keepScenesSeperate if true polly items the merge is performed per scene; otherwise combine all valid consecutive polly items across all scenes.
     */
    condensePollyItem(_sceneAudio: SceneAudioItem[], keepScenesSeperate?: boolean): SceneAudioItem[];
    /**
     * Given two AudioItems, determines if the mix/modify setting for the audio item is identifcal.
     */
    isEqualSetting(subjectAudio: AudioItem, comparingAudio: AudioItem): boolean;
    /**
     * Process the given scene audio items, and generate / mix resulting audio files.
     * Returns resulting scene audio items.
     *
     * @param sceneAudioItemList
     */
    proccessSceneAudioItems(sceneAudioItemList: SceneAudioItem[], pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor): Promise<SceneAudioItem[]>;
    /**
     * Appropriately process and generated a modified audio if needed.
     * Returns the modified AudioItem.
     *
     * @param audioItem audio item to process
     * @param pollyConfig
     * @param audioAccessor
     * @returns [[AudioItem]] of the resulting modified audio.
     */
    processAudioItem(audioItem: AudioItem, pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor): Promise<AudioItem>;
    /**
     * Get total count of AudioItems of type [[AlexaAudioType.AUDIO]] in the given SceneAudioItem list.
     */
    getAudioCount(sceneAudioList: SceneAudioItem[]): number;
    /**
     * Combine consecutive audio items to achieve the number of audio items of type [[AlexaAudioType.AUDIO]] to the given target.
     *
     * @param upperItemLimit maximum number of audio files
     * @param pollyConfig [[@alexa-games/sfb-polly/DriverPollyConfig]] SFB polly configuration key value map.
     * @param audioAccessor [[@alexa-games/sfb-polly/AudioFileAccessor]] audio file accessor used for downloading, and uploading audio files.
     * @param targetAudioCount number of audio items of type [[AlexaAudioType.AUDIO]] to target for the result.
     * @returns list of resulting audio items.
     */
    combineConsecutiveAudioItems(sceneAudioItemList: SceneAudioItem[], pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor, targetAudioCount: number): Promise<AudioItem[]>;
    /**
     * Mixdown collection of audio items into a single audio, then return a resulting AudioItem for the resulting audio file.
     *
     * @param audioItems audio items to process/readjust/edit
     * @param pollyConfig polly configuration defining how [[AlexaAudioType.POLLY]] should be handled
     * @param audioAccessor accessor for downloading, uploading, generating url for denoted audio files.
     * @returns Mixedown AudioItem
     */
    mixdownAudioItems(audioItems: AudioItem[], pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor, mixMode: MixMode, trimSpotInMillis?: number): Promise<AudioItem>;
    /**
     * Given a string of ssml (supported with voice, audio tags), create an array of Audio Items.
     * @param ssml string of ssml text
     */
    buildAudioItemsFromSSML(ssml: string, defaultNarrator?: Narrator): AudioItem[];
    generateSSMLText(sceneAudioItemList: SceneAudioItem[], pollyConfig: DriverPollyConfig): string;
    /**
     * Upload all files generated by this instance of AudioMixer to a cache/storage using the uploadAudio() of its [[AudioFileAccessor]].
     */
    uploadGeneratedFiles(audioAccessor: AudioFileAccessor, workingDir: string): Promise<void>;
}

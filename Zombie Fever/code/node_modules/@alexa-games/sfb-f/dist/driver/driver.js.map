{"version":3,"file":"driver.js","sourceRoot":"","sources":["../../driver/driver.ts"],"names":[],"mappings":";;AAYA,0DAA0G;AAE1G,0DAAuD;AAEvD,0FAAuF;AAEvF,6DACiG;AAEjG,yDAAsD;AAEtD,mCAAoC;AACpC,2CAAwC;AACxC,sEAAmE;AAEnE,sDAAuF;AAEvF,iEAA8D;AAC9D,yDAA6D;AAE7D,mDAAgD;AAChD,mDAAgD;AAEhD,MAAM,8BAA8B,GAAG,IAAI,CAAC;AAC5C,MAAM,KAAK,GAAG,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC;AA6B7C,MAAa,SAAS;IAsDlB,YAAY,aAA4B,EAAE,mBAAuC,EAAE,UAA+B,EAAE,kBAAsC,EAAE,SAAiB,OAAO,EAAE,aAAiC,EAAE,SAAqB;QA3CtO,qBAAgB,GAAY,KAAK,CAAC;QAElC,yBAAoB,GAAuC,EAAE,CAAC;QAE9D,qBAAgB,GAAuB,EAAE,CAAC;QAE1C,kBAAa,GAAmB,EAAE,CAAC;QAUnC,cAAS,GAGX,EAAE,CAAC;QAED,wBAAmB,GAAG,KAAK,CAAC;QAC5B,cAAS,GAAY,KAAK,CAAC;QAC3B,gBAAW,GAAY,KAAK,CAAC;QAK7B,oBAAe,GAAa;YAChC,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,KAAK;SAChB,CAAA;QAQD,gBAAW,GAAW,EAAE,CAAC;QAGrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,kBAAkB,EAAE;YACpB,IAAI,CAAC,WAAW,GAAG,kBAAkB,CAAC;SACzC;aAAM,IAAG,KAAK,EAAE;YACb,IAAI,CAAC,WAAW,GAAG,EAAC,UAAU,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,gBAAgB,EAAC,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,YAAY,EAAC,kBAAkB,EAAC,CAAC;SACrO;aAAM;YACH,IAAI,CAAC,WAAW,GAAG,EAAC,UAAU,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,gBAAgB,EAAC,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,YAAY,EAAC,kBAAkB,EAAC,CAAC;SAC5N;QAED,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE3C,IAAI,CAAC,aAAa,GAAG,aAAa;YAC9B,IAAI,2BAAe,CAAC;gBAChB,eAAe,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;gBAC5C,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,IAAI,kBAAkB;gBACjE,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;aAC1C,CAAC,CAAC;QAEP,IAAI,CAAC,SAAS,GAAG,SAAS,IAAK,IAAI,qBAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEjE,IAAI,CAAC,aAAa,GAAG,IAAI,6BAAa,CAAC,aAAa,CAAC,CAAC;QAEtD,IAAI,CAAC,SAAS,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEvD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB,IAAI,CAAC,aAAa,GAAG,IAAI,6BAAa,EAAE,CAAC;QAEzC,IAAI,CAAC,KAAK,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE/C,IAAI,aAAa,GAAsB;YAC5C,IAAI,qDAAyB,EAAE;SAC/B,CAAC;QAEF,IAAI,mBAAmB,EAAE;YACxB,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;SACpD;QAEP,KAAK,IAAI,UAAU,IAAI,aAAa,EAAE;YACrC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;SACxD;QAED,IAAI,UAAU,EAAE;YACZ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACpE;IACL,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,UAAU,CAAC,kBAAyC;QAC7D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAEpF,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,6BAAa,CAAC,UAAU,CAAC,CAAC;QAC9E,mCAAgB,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,mCAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAErD,OAAO;IACX,CAAC;IAED;;;;;;;OAOG;IACI,KAAK,CAAC,WAAW,CAAC,UAAqB,EAAE,kBAAyC;QACrF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAEpF,IAAI,mCAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;YACxC,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC;YAEzC,mCAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;SAC7D;QAED,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,CAAC,iBAAiB;QACnD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAEzB,iDAAiD;QACjD,MAAM,WAAW,GAAG,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;QACpD,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzC,IAAI,CAAC,gCAAiB,CAAC,SAAS,CAAC,EAAE;gBAC/B,SAAS;aACZ;YAED,MAAM,SAAS,CAAC,GAAG,CAAC;gBAChB,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,eAAe,EAAE,WAAW;gBAC5B,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;SACN;QAED,MAAM,SAAS,GAAG,WAAW,CAAC,YAAY,EAAE,CAAC;QAE7C,IAAI,CAAC,mCAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACrE,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAG,SAAS,CAAC,KAAK;gBAAE,OAAO,CAAC,GAAG,CAAC,6BAA6B,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACvF,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7B,IAAI,iBAAiB,GAAkB,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC3F,IAAG,SAAS,CAAC,KAAK;oBAAE,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,iBAAiB,CAAC,CAAC;gBAElF,IAAI,iBAAiB,IAAI,IAAI,EAAE;oBAC3B,IAAG,SAAS,CAAC,KAAK;wBAAE,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;oBAE/D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;wBAChB,OAAO,EAAE,6BAAa,CAAC,UAAU;wBACjC,QAAQ,EAAE,WAAW;qBACxB,CAAC,CAAC;iBACN;qBAAM;oBACH,IAAI,YAAY,GAAY,KAAK,CAAC;oBAElC,IAAI;wBACA,IAAI,KAAK,GAAU,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,6BAAa,CAAC,WAAW,CAAC,CAAC;wBAE9E,IAAI,KAAK,EAAE;4BACP,YAAY,GAAG,IAAI,CAAC;yBACvB;qBACJ;oBAAC,OAAM,GAAG,EAAE;wBACT,YAAY,GAAG,KAAK,CAAC;qBACxB;oBAED,IAAI,mCAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,YAAY,EAAE;wBACjE,IAAG,SAAS,CAAC,KAAK;4BAAE,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;wBACpF,mCAAgB,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;wBACxD,IAAI,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,6BAAa,CAAC,UAAU,EAAE;4BAClF,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;yBAChF;wBACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;4BAChB,OAAO,EAAE,6BAAa,CAAC,WAAW;4BAClC,QAAQ,EAAE,WAAW;yBACxB,CAAC,CAAC;qBACN;yBAAM;wBACH,IAAG,SAAS,CAAC,KAAK;4BAAE,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,iBAAiB,CAAC,CAAC;wBAErF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;4BAChB,OAAO,EAAE,iBAAiB;4BAC1B,QAAQ,EAAE,WAAW;yBACxB,CAAC,CAAC;qBACN;oBAED,uHAAuH;oBACvH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;iBACnC;aACJ;YAED,mCAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAExD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE;gBACrC,IAAI,CAAC,UAAU,CAAC,kBAAkB,GAAG,EAAE,CAAC;aAC3C;YAED,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3D,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE;gBAC9D,+BAA+B;gBAC/B,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACnD;YAED,IAAI,yBAAyB,GAAG,CAAC,CAAC;YAElC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBAEjD,IAAI,eAAe,GAGf,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEnC,IAAG,SAAS,CAAC,KAAK;oBAAE,OAAO,CAAC,GAAG,CAAC,wCAAwC,GAAG,eAAe,CAAC,CAAC;gBAC5F,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBAEpD,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;gBAE7E,IAAI,eAAe,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAE9D,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAExE,IAAI,SAAS,CAAC,OAAO,EAAE;oBACnB,IAAI,eAAe,GAAQ,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;oBACvD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClB,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;iBAC/C;gBAED,yBAAyB,EAAE,CAAC;gBAC5B,IAAG,yBAAyB,IAAI,8BAA8B,EAAE;oBAC5D,MAAM,IAAI,KAAK,CAAC,sCAAsC,GAAG,8BAA8B,GAAG,6BAA6B,GAAG,eAAe,CAAC,OAAO,GAAG,kCAAkC,CAAC,CAAC;iBAC3L;aACJ;YAED,IAAI,IAAI,CAAC,SAAS,EAAE;gBAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;gBACvB,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;aAC/C;SACJ;QAED,IAAI,CAAC,UAAU,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE,CAAC;QAC7E,IAAI,CAAC,UAAU,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,CAAC;QACjF,IAAI,CAAC,UAAU,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAAE,CAAC;QAE3E,iDAAiD;QACjD,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzC,IAAI,CAAC,gCAAiB,CAAC,SAAS,CAAC,EAAE;gBAC/B,SAAS;aACZ;YAED,MAAM,SAAS,CAAC,IAAI,CAAC;gBACjB,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,eAAe,EAAE,WAAW;gBAC5B,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;SACN;IACL,CAAC;IAEM,UAAU;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,oBAAoB,CAAC,UAAqB,EAAE,kBAAyC;QAC/F,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;QAE3E,IAAI,aAAa,GAAkB,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEvF,IAAI,aAAa,IAAI,6BAAa,CAAC,WAAW,EAAE;YAC5C,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAA;SACzC;QAED,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,6BAAa,CAAC,UAAU,CAAC,CAAC;QAE9E,IAAI,eAAe,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE9D,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnC,IAAI,SAAS,CAAC,OAAO,EAAE;YACnB,IAAI,eAAe,GAAQ,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YACvD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SAC/C;QAED,6CAA6C;QAC7C,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC,6BAAa,CAAC,UAAU,CAAA,CAAC,CAAC,aAAa,CAAC,CAAC;QAEtH,mCAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAEvD,iDAAiD;QACjD,MAAM,WAAW,GAAG,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;QACpD,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzC,IAAI,CAAC,gCAAiB,CAAC,SAAS,CAAC,EAAE;gBAC/B,SAAS;aACZ;YAED,MAAM,SAAS,CAAC,IAAI,CAAC;gBACjB,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,eAAe,EAAE,WAAW;gBAC5B,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB,CAAC,CAAC;SACN;QAED,OAAO;IACX,CAAC;IAED;;OAEG;IACI,6BAA6B,CAAC,QAAkB;QACnD,OAAO,CAAC,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;IACpC,CAAC;IAED;;;OAGG;IACI,kBAAkB;QACrB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,mBAAmB;QACtB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,iBAAiB;QAC1B,IAAI,EAAC,IAAI,EAAC,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE,CAAC,CAAC;QAEnF,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,yBAAyB;QAClC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,IAAI,CAAC,CAAC;QAErE,MAAM,iBAAiB,GAAQ,EAAE,CAAC;QAElC,KAAI,IAAI,IAAI,IAAI,eAAe,EAAE;YAE7B,IAAI,EAAC,IAAI,EAAC,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAEjD,IAAI,YAAY,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;YAExE,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACxC;QAED,OAAO,iBAAiB,CAAC;IAC7B,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE,CAAC;IAChD,CAAC;IAEM,KAAK,CAAC,0BAA0B;QACnC,IAAI,EAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAC,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE,CAAC,CAAC;QAEzG,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAC,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,mBAAmB;QAC5B,IAAI,EAAC,IAAI,EAAC,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,CAAC,CAAC;QAErF,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,4BAA4B;QACrC,IAAI,EAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAC,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,CAAC,CAAC;QAE3G,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAC,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,UAAU;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,kBAAoC;QAC9D,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAEnI,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,YAAY,CAAC;QACjB,IAAI;YACA,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,MAAM,cAAc,GAAW,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;gBAEjF,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,CAAC,cAAc,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE;oBAE9H,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,eAAe,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,gBAAgB,CAAC,CAAC;oBAEpK,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;4BACxC,UAAU,EAAE,kBAAkB;4BAC9B,UAAU,EAAE,EAAE;yBACjB,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;iBACzB;qBAAM;oBACH,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;iBACjF;aACJ;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,YAAY,GAAG,yGAAyG,CAAC;YACzH,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;SAClC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE9F,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE;YAClC,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SAClG;QAED,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACI,oBAAoB;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW;IACnE,CAAC;IAEM,gBAAgB;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,eAAe;QAClB,OAAO,mCAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7D,CAAC;IAED;;OAEG;IACI,iBAAiB;QACpB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,aAAa,CAAC,SAAoB;QAC3C,OAAO,IAAI,OAAO,CAAO,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YAC/C,IAAI,SAAS,CAAC,KAAK;gBAAE,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YAElE,MAAM,gBAAgB,GAAa,mCAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;YAExF,IAAI,SAAS,CAAC,KAAK;gBAAE,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAEpH,MAAM,cAAc,GAAkB,mCAAgB,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAErH,IAAI,SAAS,CAAC,KAAK;gBAAE,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,qBAAqB,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAEpJ,IAAI,cAAc,IAAI,IAAI,EAAE;gBACxB,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM,IAAI,CAAC,CAAC;uBAChF,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAC,CAAC,EAAE;oBAC1F,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;iBAC5B;qBAAM;oBACH,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;wBACjF,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;wBAC5E,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;qBACjF;yBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC1F,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;wBAC7E,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;qBAClF;oBAED,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;wBACvF,IAAI,CAAC,KAAK,CAAC,6BAA6B,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;qBACjF;oBAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;iBAC3B;aACJ;iBAAM;gBACH,mCAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;gBAEzE,MAAM,WAAW,GAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAErE,IAAI;oBACA,IAAI,cAAc,CAAC,eAAe,EAAE;wBAChC,oCAAoC;wBACpC,IAAI,4BAA4B,GAAW,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,cAAc,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;wBACpI,IAAI,CAAC,UAAU,CAAC,sBAAsB,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,IAAI,EAAE,CAAC;wBACtF,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,4BAA4B,CAAC,GAAG,cAAc,CAAC,eAAe,CAAC;wBAEtG,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;qBAC3E;yBAAM,IAAI,cAAc,CAAC,kBAAkB,EAAE;wBAC1C,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,kBAAkB,CAAC,CAAC;qBAChF;iBACJ;gBAAC,OAAO,GAAG,EAAE;oBACV,MAAM,CAAC,GAAG,CAAC,CAAC;iBACf;gBAED,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;oBACnB,mCAAgB,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAExD,IAAI,cAAc,CAAC,aAAa,EAAE;wBAC9B,mCAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;qBACrI;iBACJ;aACJ;YAED,mCAAgB,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACxD,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,YAAY,CAAC,OAAgB,EAAE,aAAsB;QAC/D,IAAI,SAAS,CAAC,KAAK;YAAE,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAEjE,IAAI,cAAc,GAAkB,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAExF,IAAI,OAAO,EAAE;YACT,cAAc,GAAG,OAAO,CAAC;SAC5B;QAED,IAAI,SAAS,CAAC,OAAO,EAAE;YACnB,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,cAAc,GAAG,GAAG,CAAC,CAAC;YAClD,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;SAC3C;QAED,IAAI,YAAY,GAAsB,SAAS,CAAC;QAChD,IAAI,cAAc,IAAI,IAAI,EAAE;YACxB,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC;SACxE;QAED,IAAI,CAAC,YAAY,EAAE;YACf,IAAI,SAAS,CAAC,KAAK;gBAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,cAAc,GAAG,CAAC,CAAC;;gBACpF,OAAO;SACf;QAED,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC;QAE/C,mCAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE7C,KAAK,IAAI,SAAS,IAAI,YAAY,CAAC,QAAQ,EAAE;YACzC,8BAA8B;YAC9B,IAAI,eAAe,GAAY,IAAI,CAAC;YAEpC,IAAI,SAAS,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBACrE,IAAI,SAAS,CAAC,KAAK;oBAAE,OAAO,CAAC,GAAG,CAAC,sCAAsC,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBAExH,IAAI,YAAY,GAAI,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAEjF,IAAI,SAAS,CAAC,KAAK;oBAAE,OAAO,CAAC,GAAG,CAAC,uCAAuC,GAAG,YAAY,CAAC,CAAC;gBAEzF,IAAG,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE;oBACnC,eAAe,GAAG,KAAK,CAAC;iBAC3B;aAEJ;YAED,IAAI,CAAC,eAAe,EAAE;gBAClB,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,SAAS;oBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,MAAM,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC/G,SAAS;aACZ;YAED,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,SAAS;gBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,MAAM,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;YAE/G;;cAEE;YACF,IAAI,cAAc,GAAgB,EAAE,CAAC;YAErC,IAAI,SAAS,CAAC,SAAS,EAAE;gBACrB,IAAI,aAAa,GAAW,gBAAgB,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;qBACpF,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;qBACnB,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;gBAE5B,IAAI,mBAAmB,GAAa,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAE9D,IAAI,iBAAiB,GAAW,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5G,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAA,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;aAC3I;YAED;;cAEE;YACF,IAAI,SAAS,CAAC,eAAe,IAAI,SAAS,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnE,MAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,cAAc,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;gBAEtF,MAAM,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;aACzD;YAED,IAAI,aAAa,IAAI,aAAa,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,IAAI,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/H,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,UAAU,CAAC;aAClE;YAED,IAAI,aAAa,IAAI,aAAa,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzH,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,UAAU,CAAC;aAC/D;YAED,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,cAAc,CAAC,CAAC;YAEvD,MAAM,CAAC,+CAA+C;SACzD;QAED,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,mBAAmB,CAAC,kBAA0B;QACvD,IAAI,SAAS,CAAC,KAAK;YAAE,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;QAE3E,IAAI,sBAAsB,GAAY,KAAK,CAAC;QAE5C,IAAI,oBAAoB,GAAY,KAAK,CAAC;QAE1C,IAAI,UAAU,GAAkB,EAAE,CAAC;QAEnC,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,EAAE;YACtG,4CAA4C;YAC5C,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;SAC3E;aAAM;YACH,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,kBAAkB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SACpF;QAED,KAAK,IAAI,UAAU,GAAG,CAAC,EAAG,UAAU,GAAG,UAAU,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;YACpE,IAAI,UAAU,GAA0B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACtG,IAAI,IAAI,GAAoB,UAAU,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC;YAEjE,KAAK,IAAI,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBAC3C,IAAI,OAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,IAAI,QAAQ,EAAE;oBAE3C,MAAM,WAAW,GAAG,SAAS,KAAK,WAAW,CAAC;oBAE9C,UAAU,CAAC,SAAS,CAAC,GAAG,gBAAgB,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;iBACjG;aACJ;YAED,QAAO,IAAI,EAAE;gBACb,KAAK,+BAAe,CAAC,MAAM,CAAC,CAAC;oBAEzB,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,yCAAyC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;oBAE3I,KAAK,IAAI,SAAS,IAAI,IAAI,CAAC,gBAAgB,EAAE;wBACzC,IAAI,qCAAsB,CAAC,SAAS,CAAC,EAAE;4BACnC,MAAM,qBAAqB,GAAW,UAAU,CAAC,UAAU,CAAC;4BAE5D,IAAK,SAAiB,CAAC,qBAAqB,CAAC,EAAE;gCAC3C,MAAO,SAAiB,CAAC,qBAAqB,CAAC,CAAC;oCACxC,eAAe,EAAC,UAAU,CAAC,UAAU;oCACrC,qBAAqB,EAAE,UAAU;oCACjC,SAAS,EAAE,IAAI,CAAC,KAAK;oCACrB,aAAa,EAAE,IAAI,CAAC,aAAa;oCACjC,UAAU,EAAE,IAAI,CAAC,UAAU;iCAC9B,CAAC,CAAC;6BACV;yBACJ;6BAAM;4BACH,SAAS;yBACZ;qBACJ;oBAED,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,IAAI,CAAC,CAAC;oBACvB,MAAM,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACrD,MAAM,QAAQ,GAAW,UAAU,CAAC,YAAY,CAAC;oBAEjD,mCAAgB,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;oBAEtE,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,QAAQ,EAAE,CAAC,CAAC;oBAChG,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,QAAQ,CAAC,CAAC;oBAC3B,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACnD,IAAI,UAAU,GAAkB,UAAU,CAAC,aAAa,CAAC;oBAEzD,IAAI,CAAC,UAAU,EAAE;wBACb,UAAU,GAAG,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;qBACpE;oBAED,IAAI,UAAU,IAAI,IAAI,EAAE;wBACpB,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;qBACjF;oBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG;wBAC5B,IAAI,EAAE,SAAS;wBACf,KAAK,EAAE,UAAU;qBACpB,CAAA;oBAED,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,UAAU,EAAE,CAAC,CAAC;oBACtG,MAAM;iBAET;gBACD,KAAK,+BAAe,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAI,QAAQ,GAAW,mBAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAE1H,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;oBAEvC,IAAI,UAAU,CAAC,YAAY,IAAI,UAAU,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC/D,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;qBAC3D;oBAED,IAAI,MAAM,GAAW;wBACjB,EAAE,EAAE,QAAQ;wBACZ,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,UAAU,CAAC;wBACnF,UAAU,EAAE,UAAU;wBACtB,aAAa,EAAE,KAAK,CAAA,kGAAkG;qBACzH,CAAA;oBAED,IAAI,UAAU,CAAC,SAAS,EAAE;wBACtB,MAAM,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;qBAC3C;oBAED,mCAAgB,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;oBAEjE,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,0BAA0B,QAAQ,yBAAyB,UAAU,CAAC,UAAU,GAAG,CAAC,CAAC;oBAEhJ,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,SAAS,CAAC,CAAC;oBAC5B,IAAI,eAAe,GAAY,IAAI,CAAC;oBAEpC,IAAI,eAAe,GAAW,UAAU,CAAC,SAAS,CAAC;oBAEnD,IAAI,SAAS,CAAC,KAAK;wBAAE,OAAO,CAAC,GAAG,CAAC,sCAAsC,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;oBAEpH,IAAI,YAAY,GAAI,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBAE7E,IAAI,SAAS,CAAC,KAAK;wBAAE,OAAO,CAAC,GAAG,CAAC,uCAAuC,GAAG,YAAY,CAAC,CAAC;oBAEzF,IAAG,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE;wBACnC,eAAe,GAAG,KAAK,CAAC;qBAC3B;oBAED,IAAI,CAAC,eAAe,EAAE;wBAClB,IAAI,SAAS,CAAC,OAAO,IAAI,eAAe;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,SAAS,mBAAmB,eAAe,GAAG,CAAC,CAAC;qBAC1K;yBAAM;wBACH,IAAI,SAAS,CAAC,OAAO,IAAI,eAAe;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,SAAS,mBAAmB,eAAe,GAAG,CAAC,CAAC;wBAEvK,IAAI,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;4BAE3D,MAAM,2BAA2B,GAAW,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;4BAE/G,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,2BAA2B,CAAC,CAAC;4BAEvE,sBAAsB,GAAG,IAAI,CAAC;yBACjC;qBACJ;oBAED,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,KAAK,CAAC,CAAC;oBACxB,IAAI,eAAe,GAAW,UAAU,CAAC,MAAM,CAAC;oBAEhD,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,IAAI,IAAI,SAAS,EAAE;wBACxF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;4BAChB,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,KAAK;4BAC/C,QAAQ,EAAE,UAAU,CAAC,mBAAmB,IAAI,WAAW;yBAC1D,CAAC,CAAC;qBAEN;yBAAM;wBACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;4BAChB,OAAO,EAAE,eAAe,CAAC,WAAW,EAAE;4BACtC,QAAQ,EAAE,UAAU,CAAC,mBAAmB,IAAI,WAAW;yBAC1D,CAAC,CAAC;qBACN;oBAED,sBAAsB,GAAG,IAAI,CAAC;oBAE9B,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,EAAC,CAAC,CAAC,aAAa,eAAe,GAAG,CAAC,CAAC;oBAC3F,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,WAAW,CAAC,CAAC;oBAC9B,IAAI,eAAe,GAAW,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;oBAE9D,MAAM,aAAa,GAAW,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;oBAE9F,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;wBACpC,IAAI,CAAC,UAAU,CAAC,iBAAiB,GAAG,EAAE,CAAC;qBAC1C;oBAED,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAEtD,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,CAAC,aAAa,eAAe,GAAG,CAAC,CAAC;oBAE1F,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;wBAChB,OAAO,EAAE,eAAe;wBACxB,QAAQ,EAAE,UAAU,CAAC,mBAAmB,IAAI,WAAW;qBAC1D,CAAC,CAAC;oBAEH,sBAAsB,GAAG,IAAI,CAAC;oBAE9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;wBACnF,MAAM,aAAa,GAAW,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAEjF,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,4BAA4B,aAAa,IAAI,CAAC,CAAC;wBAE1G,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;wBAChE,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;wBAEhE,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;qBAC5D;yBAAM;wBACH,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,0CAA0C,CAAC,CAAC;qBAC1G;oBAED,sBAAsB,GAAG,IAAI,CAAC;oBAE9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,OAAO,CAAC,CAAC;oBAC1B,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;oBACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;wBAChB,OAAO,EAAE,6BAAa,CAAC,UAAU;wBACjC,QAAQ,EAAE,UAAU,CAAC,mBAAmB,IAAI,WAAW;qBAC1D,CAAC,CAAC;oBAEH,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,SAAS,EAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC;oBAElG,sBAAsB,GAAG,IAAI,CAAC;oBAC9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;wBACnF,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;wBAC7E,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;wBAEjF,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,2CAA2C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC,gBAAgB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBACnP;yBAAM;wBACH,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC;qBACzF;oBAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,sBAAsB,GAAG,IAAI,CAAC;oBAE9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,eAAe,CAAC,CAAC;oBAClC,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;wBACvF,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;wBAC/H,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;wBAEjF,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,aAAa,EAAC,CAAC,CAAC,6CAA6C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBAChL;yBAAM;wBACH,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,aAAa,EAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC;qBAChG;oBAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,sBAAsB,GAAG,IAAI,CAAC;oBAE9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,IAAI,CAAC,CAAC;oBACvB,IAAI,SAAS,GAAW,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC;oBAE7C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,MAAM,IAAI,CAAC,EAAE;wBACvF,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,CAAC,qCAAqC,CAAC,CAAC;qBACnG;yBAAM;wBACH,IAAI,eAAe,GAAa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;wBAE/F,IAAI,gBAAgB,GAAQ,SAAS,CAAC;wBAEtC,OAAO,SAAS,EAAE,GAAG,CAAC,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;4BAClD,gBAAgB,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBACvD;wBAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;wBAEtC,IAAI,CAAC,UAAU,CAAC,kBAAkB,GAAG,eAAe,CAAC;wBACrD,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,CAAC,kBAAkB,UAAU,CAAC,KAAK,cAAc,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;qBACjJ;oBAED,sBAAsB,GAAG,IAAI,CAAC;oBAE9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,KAAK,CAAC,CAAC;oBACxB,IAAI,YAAY,GAAa,gBAAgB,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;yBACpF,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;yBACnB,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;yBACtB,KAAK,CAAC,IAAI,CAAC,CAAC;oBAEjB,IAAI,aAAa,GAAW,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;oBAE1F,IAAI,aAAa,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;wBACjC,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAA,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBAErM,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,EAAC,CAAC,CAAC,OAAO,aAAa,GAAG,CAAC,CAAC;qBACtF;yBAAM;wBACH,IAAI,SAAS,CAAC,OAAO;4BAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,EAAC,CAAC,CAAC,uCAAuC,CAAC,CAAC;qBACtG;oBAED,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,GAAG,CAAC,CAAC;oBACtB,mCAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;oBACzD,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;oBACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBAExB,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBAE1C,sBAAsB,GAAG,IAAI,CAAC;oBAC9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,KAAK,CAAC,CAAC;oBACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBACtB,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBAE5C,sBAAsB,GAAG,IAAI,CAAC;oBAC9B,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,GAAG,CAAC,CAAC;oBACtB,IAAI,MAAM,GAAW,UAAU,CAAC,QAAQ,CAAC;oBAEzC,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAClC,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,eAAe,MAAM,YAAY,UAAU,CAAC,OAAO,IAAE,EAAE,aAAa,UAAU,CAAC,MAAM,IAAE,EAAE,YAAY,UAAU,CAAC,KAAK,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAA,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBAErO,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,KAAK,EAAC,CAAC,CAAC,MAAM,MAAM,EAAE,CAAC,CAAC;oBACxE,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,KAAK,CAAC,CAAC;oBACxB,IAAI,aAAa,GAAW,UAAU,CAAC,YAAY,CAAC;oBAEpD,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE;wBAC7B,aAAa,GAAG,EAAE,CAAC;wBAEnB,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;4BAC1C,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gCAC5B,aAAa,IAAI,GAAG,GAAG,KAAK,CAAC;gCAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;6BAC/B;yBACJ;qBAEJ;yBAAM;wBACH,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;qBACzC;oBAED,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,EAAC,CAAC,CAAC,OAAO,aAAa,GAAG,CAAC,CAAC;oBACnF,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,gBAAgB,CAAC,CAAC;oBACnC,IAAI,IAAI,GAAW,UAAU,CAAC,QAAQ,CAAC;oBACvC,IAAI,QAAQ,GAAW,UAAU,CAAC,YAAY,CAAC;oBAE/C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAC;wBAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;qBAClC;oBAED,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE;wBAClC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBACvC;oBAED,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAG,CAAC;oBAEnC,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,eAAe,EAAC,CAAC,CAAC,OAAO,IAAI,SAAS,QAAQ,GAAG,CAAC,CAAC;oBACnG,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,QAAQ,CAAC,CAAC;oBAC3B,IAAI,IAAI,GAAW,UAAU,CAAC,QAAQ,CAAC;oBACvC,IAAI,QAAQ,GAAW,UAAU,CAAC,YAAY,CAAC;oBAC/C,IAAI,SAAS,GAAW,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC;oBAEhD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAC;wBAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;qBAClC;oBAED,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAErC,IAAI,IAAI,GAAW,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;oBAC3C,IAAI,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,IAAI,EAAE;wBACrD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;qBAChF;oBAED,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,OAAO,IAAI,SAAS,QAAQ,GAAG,CAAC,CAAC;oBAC9F,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,QAAQ,CAAC,CAAC;oBAC3B,IAAI,WAAW,GAAW,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;oBAE/C,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,WAAW,CAAC;oBAE5C,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,MAAM,WAAW,EAAE,CAAC,CAAC;iBACrF;gBACD,KAAK,+BAAe,CAAC,WAAW,CAAC,CAAC;oBAC9B,IAAI,IAAI,GAAW,UAAU,CAAC,QAAQ,CAAC;oBACvC,IAAI,QAAQ,GAAW,UAAU,CAAC,YAAY,CAAC;oBAE/C,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,QAAQ,EAAE;wBAClF,IAAI,aAAa,GAAW,CAAC,CAAC,CAAC;wBAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;4BACxD,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;gCACtC,aAAa,GAAG,CAAC,CAAC;gCAClB,MAAM;6BACT;yBACJ;wBAED,IAAI,aAAa,IAAI,CAAC,EAAE;4BACrB,IAAI,YAAY,GAAQ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC9E,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,YAAY,CAAC;yBAC/C;qBACJ;yBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,WAAW,EAAE;wBAC5F,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;4BAC3F,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAG,CAAC;yBACtC;6BAAM,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,EAAE;4BAC3D,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC;yBAC1C;qBACJ;oBAED,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,OAAO,IAAI,WAAW,QAAQ,GAAG,CAAC,CAAC;oBAChG,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,YAAY,CAAC,CAAC;oBAC/B,IAAI,QAAQ,GAAW,UAAU,CAAC,YAAY,CAAC;oBAE/C,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;wBAC3B,IAAI,YAAY,GAAQ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;wBAEjE,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,YAAY,CAAC;qBAChD;oBAED,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,kBAAkB,QAAQ,GAAG,CAAC,CAAC;oBAC5F,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,WAAW,CAAC,CAAC;oBAC9B,IAAI,QAAQ,GAAW,UAAU,CAAC,YAAY,CAAC;oBAE/C,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;wBAC3B,IAAI,YAAY,GAAQ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;wBAElG,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,YAAY,CAAC;qBAChD;oBAED,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,iBAAiB,QAAQ,GAAG,CAAC,CAAC;oBAC3F,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,IAAI,CAAC,CAAC;oBACvB,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBAEnD,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oBAErC,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,CAAC,OAAO,YAAY,GAAG,CAAC,CAAC;oBACjF,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBAEnD,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oBAEtC,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,OAAO,YAAY,GAAG,CAAC,CAAC;oBACnF,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,GAAG,CAAC,CAAC;oBACtB,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACnD,IAAI,KAAK,GAAiB,UAAU,CAAC,aAAa,IAAI,WAAW,CAAA,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBAE3G,IAAI,UAAU,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;wBACvC,KAAK,GAAG,EAAE,CAAC;qBACd;yBAAM,IAAI,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;wBACxC,KAAK,GAAG,UAAU,CAAC,aAAa,CAAC;wBAEjC,IAAI,KAAK,IAAI,MAAM,EAAE;4BACjB,KAAK,GAAG,IAAI,CAAC;yBAChB;6BAAM,IAAI,KAAK,IAAI,OAAO,EAAE;4BACzB,KAAK,GAAG,KAAK,CAAC;yBACjB;qBACJ;oBAGD,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,SAAS,EAAE;wBAC5C,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;qBACrC;oBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oBAEtC,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,KAAK,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,KAAK,EAAE,CAAC,CAAC;oBAC5F,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACnD,IAAI,KAAK,GAAW,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBAEzD,IAAI,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;wBACjC,KAAK,GAAG,CAAC,CAAC;qBACb;oBAED,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE;wBACtC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;qBACrC;oBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;oBAC5G,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,KAAK,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;oBAClI,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,QAAQ,CAAC,CAAC;oBAC3B,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACnD,IAAI,KAAK,GAAW,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBAEzD,IAAI,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;wBACjC,KAAK,GAAG,CAAC,CAAC;qBACb;oBAED,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE;wBACtC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;qBACrC;oBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;oBAE5G,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,KAAK,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;oBACpI,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,QAAQ,CAAC,CAAC;oBAC3B,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACnD,IAAI,KAAK,GAAW,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBAEzD,IAAI,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;wBACjC,KAAK,GAAG,CAAC,CAAC;qBACb;oBAED,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE;wBACtC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;qBACrC;oBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;oBAE5G,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,KAAK,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;oBACpI,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACnD,IAAI,KAAK,GAAW,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBAEzD,IAAI,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;wBACjC,KAAK,GAAG,CAAC,CAAC;qBACb;oBAED,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE;wBACtC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;qBACrC;oBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAC,GAAG,CAAC;oBAE1G,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,KAAK,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;oBAClI,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,OAAO,CAAC,CAAC;oBAC1B,IAAI,YAAY,GAAW,UAAU,CAAC,YAAY,CAAC;oBACnD,IAAI,KAAK,GAAW,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBAEzD,IAAI,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;wBACjC,KAAK,GAAG,CAAC,CAAC;qBACb;oBAED,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,EAAE;wBACtC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;qBACrC;oBAED,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,GAAC,GAAG,CAAC;oBAE1G,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,SAAS,EAAC,CAAC,CAAC,OAAO,YAAY,QAAQ,KAAK,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;oBACnI,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,IAAI,CAAC,CAAC;oBACvB,IAAI,QAAQ,GAAW,UAAU,CAAC,UAAU,CAAC;oBAE7C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAEhC,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAC,CAAC,CAAC,OAAO,QAAQ,GAAG,CAAC,CAAC;oBAC7E,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,QAAQ,CAAC,CAAC;oBAC3B,IAAI,gBAAgB,GAAa,gBAAgB,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;yBACxF,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;yBACnB,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;yBACtB,KAAK,CAAC,IAAI,CAAC,CAAC;oBAEjB,IAAI,gBAAgB,GAAW,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;oBACrG,IAAI,CAAC,KAAK,CAAC,6BAA6B,CACpC,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAA,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBAEtK,IAAI,SAAS,CAAC,OAAO;wBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,EAAC,CAAC,CAAC,OAAO,gBAAgB,GAAG,CAAC,CAAC;oBACzF,MAAM;iBACT;gBACD,KAAK,+BAAe,CAAC,OAAO,CAAC,CAAC;oBAC1B,IAAI,oBAAoB,EAAE;wBACtB,IAAI,cAAc,GAAoB,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,IAAI,EAAE,CAAC;wBAC/E,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,GAAkB,UAAU,CAAC;wBAEtE,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;qBACpD;yBAAM;wBACH,oBAAoB,GAAG,IAAI,CAAC;wBAE5B,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAgB,UAAU,CAAC,CAAC;qBAC5D;oBAED,MAAM;iBACT;gBACD,OAAO,CAAC,CAAC;oBACL,MAAM,IAAI,KAAK,CAAC,2EAA2E;0BACrF,UAAU,GAAG,mBAAmB;0BAChC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,KAAK;0BACvD,UAAU,GAAG,mCAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;iBACjF;aACA;YAED,IAAI,sBAAsB,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/D,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACpE,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;gBAE1F,IAAI,WAAW,IAAI,cAAc,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,IAAI,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,EAAE;oBACvI,OAAO,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;iBACrE;gBACD,MAAM;aACT;SACJ;QAED,OAAO,sBAAsB,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACK,gBAAgB,CAAC,UAAkB;QACvC,IAAI,SAAS,GAAW,8BAA8B,CAAA;QAEtD,IAAI,SAAS,GAAyB,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEjE,IAAI,WAAW,GAAa,EAAE,CAAC;QAC/B,OAAO,SAAS,IAAI,IAAI,EAAE;YACtB,IAAI,UAAU,GAAW,CAAC,CAAC;YAC3B,IAAI,SAAS,GAAW,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACnD,IAAI,SAAS,GAAW,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACnD,IAAI,WAAW,GAAW,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAErD,IAAI,KAAK,GAAa,EAAE,CAAC;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;gBAChC,IAAI,SAAS,CAAC,cAAc,EAAE;oBAC1B,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBACnC;qBAAM;oBACH,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;iBACzD;aACJ;YAED,IAAI,QAAQ,GAAW,KAAK,CAAC,MAAM,CAAC;YACpC,IAAI,WAAW,EAAE;gBACb,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,iBAAiB;gBACzC,QAAQ,GAAG,WAAW,CAAA;aACzB;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAChC,UAAU,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;aAC1B;YAED,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE7B,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1C;QAED,IAAI,gBAAgB,GAAW,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,EAAE;YAC9D,OAAO,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,aAAa,GAAQ,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAChD,IAAI,SAAS,CAAC,KAAK;YAAE,OAAO,CAAC,GAAG,CAAC,yDAAyD,GAAG,gBAAgB,GAAG,aAAa,GAAG,aAAa,GAAG,GAAG,CAAE,CAAC;QAEtJ,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,aAAa,CAAC;IAC/C,CAAC;;AA/wCL,8BAgxCC;AA/wCmB,0BAAgB,GAAG,CAAC,CAAC;AAEvB,eAAK,GAAY,KAAK,CAAC;AACvB,iBAAO,GAAY,KAAK,CAAC;AAEvC;;GAEG;AACW,wBAAc,GAAY,KAAK,CAAC;AAywClD,SAAS,gBAAgB,CAAC,IAAY,EAAE,WAAgB,EAAE,WAAoB;IAC1E,MAAM,aAAa,GAAG,IAAI,6BAAa,CAAC,4BAAgB,CAAC,oBAAoB,EAAE,EAAE,WAAW,CAAC,CAAC;IAE9F,OAAO,aAAa,CAAC,aAAa,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAC1D,CAAC;AAED,2DAA2D;AAC3D,SAAS,aAAa,CAAC,EAAW,EAAE,OAAa;IAC7C,yFAAyF;IACzF,OAAO,cAAa,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC5F,CAAC;AAED,SAAS,KAAK,CAAC,GAAU,EAAE,MAAU,EAAE,KAAS;IAC5C,IAAI,OAAO,GAAQ,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,EAAE,CAAC;IAExD,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,CAAC,EAAE;QAChG,OAAO,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,EAAC,OAAO,CAAC,QAAQ,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAC,OAAO,CAAC,UAAU,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/I,OAAO;KACV;IAED,IAAI,KAAK,IAAI,SAAS,IAAI,KAAK,IAAI,IAAI,EAAE;QACrC,OAAO;KACV;IAED,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAChC,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;YAChC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAI,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SACpD;aAAM;YACH,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,EAAE;gBAC5B,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;oBAChB,OAAO,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,OAAO,CAAC,QAAQ,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,UAAU,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;iBAC1I;qBAAM;oBACH,OAAO,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,QAAQ,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,UAAU,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;iBAC9H;aACJ;SACJ;KACJ;IACD,OAAO;AACX,CAAC;AAED,SAAS,aAAa,CAAC,MAAU,EAAE,KAAS;IACxC,IAAI,UAAU,GAAoB,EAAE,CAAC;IACrC,sBAAsB;IACtB,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACjC,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;YACzC,UAAU,CAAC,IAAI,CAAC;gBACZ,QAAQ,EAAE,GAAG;gBACb,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;gBACpD,UAAU,EAAE,SAAS;aACxB,CAAC,CAAC;SACN;KACJ;IAED,KAAK,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAChC,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;YAC3D,UAAU,CAAC,IAAI,CAAC;gBACZ,QAAQ,EAAE,GAAG;gBACb,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,CAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;gBAC7E,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;aACrD,CAAC,CAAC;SACN;KACJ;IAED,OAAO,UAAU,CAAC;AACtB,CAAC;AAED,SAAS,SAAS,CAAC,YAAoB,EAAE,MAAc;IACnD,IAAI,IAAI,GAAW,MAAM,CAAC,YAAY,CAAC,CAAC;IAExC,IAAI,MAAM,GAAW,IAAI,CAAC;IAC1B,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,EAAE;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAG,CAAC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;YAC9C,MAAM,IAAI,GAAG,CAAC;SACjB;KACJ;SAAM;QACH,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;KACzD;IACD,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["declare var process : {\n\tenv: {\n      platform: string,\n      ABC_DEBUG_PAD_SIZE: string\n\t},\n\tplatform: string\n}\n\nimport { UserInput, Choice, AudioItem, SceneAudioItem, StateDiffItem, VisualOptions, ResultOption } from './driverEntity';\n\nimport { ABCImportPlugin } from './../importPlugins/importerPlugin';\n\nimport { BuiltInScenes, StoryMetadata, Instruction, InstructionType, Scene} from '../story/storyMetadata';\n\nimport { StoryAccessor } from '../story/storyAccessor';\n\nimport { DefaultFormatImportPlugin } from '../importPlugins/DefaultFormatImportPlugin';\n\nimport { isDriverExtension, isInstructionExtension,\n    InstructionExtension, ImporterExtension, DriverExtension } from '../extensions/ACEExtension';\n\nimport { StoryStateHelper } from './storyStateHelper';\n\nimport { createHash } from 'crypto';\nimport { PlayStage } from './PlayStage';\nimport { UserInputHelper } from '../importPlugins/userInputHelper';\n\nimport { AudioFileAccessor, PollyUtil, S3AudioAccessor } from '@alexa-games/sfb-polly';\n\nimport { TokenReplacer } from '../transformers/tokenReplacer';\nimport { SegmenterBuilder } from '../transformers/segmenter';\n\nimport { AudioItemUtil } from './AudioItemUtil';\nimport { CallStackUtil } from './callStackUtil';\n\nconst TOTAL_SCENES_PROCESS_SAFEGUARD = 1000;\nconst isWin = (process.platform === \"win32\");\n\ntype ACEExtensionType = ImporterExtension | DriverExtension | InstructionExtension;\n\nexport interface Narrator {\n    name: string;\n    pitch: string;\n    rate: string;\n    volume: string;\n    engine?: string;\n}\n\nexport interface DriverPollyConfig {\n    enabled: boolean;\n    enabledInPreview?: boolean;\n    previewPollyVoice?: string;\n    combineAudioTags: boolean;\n    dontUseCache: boolean;\n    s3DomainName: string;\n    bucketName: string;\n    FFMPEGLocation: string;\n    workingDir: string;\n    cognito?: {\n        identityPoolId: string;\n        loginWithAmazonAccessToken?: string;\n    }\n    [key: string]: any;\n}\n\nexport class ACEDriver {\n    static readonly SSML_AUDIO_LIMIT = 5;\n\n    public static debug: boolean = false;\n    public static testing: boolean = false;\n\n    /**\n     * flag this variable to alway run the average value for dice rolls.\n     */\n    public static probabilityOff: boolean = false;\n\n    private isPollyAsDefault: boolean = false;\n\n    private importHandlersByType : {[key: string] : ABCImportPlugin} = {};\n\n    private customExtensions: ACEExtensionType[] = [];\n\n    private resultOptions: ResultOption[] = [];\n\n    public storyState: {[key: string]: any};\n\n    public storyAccessor: StoryAccessor;\n\n    public stage: PlayStage;\n\n    public audioItemUtil: AudioItemUtil;\n\n    private playQueue: {\n        sceneID: string,\n        property: string\n    }[] = [];\n\n    private unhandledChoiceFlag = false;\n    private isPausing: boolean = false;\n    private isRepeating: boolean = false;\n    private locale: string;\n\n    public pollyConfig: DriverPollyConfig;\n\n    private defaultNarrator: Narrator = {\n        name: \"Joanna\",\n        pitch: \"\",\n        rate: \"\",\n        volume: \"1.0\"\n    }\n\n    private pollyUtil: PollyUtil;\n\n    private audioAccessor: AudioFileAccessor;\n\n    private callStack: CallStackUtil;\n\n    historySize: number = 10;\n\n    constructor(storyMetadata: StoryMetadata, customImportPlugins?: ABCImportPlugin[], extensions?: ACEExtensionType[], pollyConfiguration?: DriverPollyConfig, locale: string = 'en-US', audioAccessor?: AudioFileAccessor, pollyUtil?: PollyUtil) {\n        this.locale = locale;\n\n        if (pollyConfiguration) {\n            this.pollyConfig = pollyConfiguration;\n        } else if(isWin) {\n            this.pollyConfig = {bucketName: \"sfb-sample-bucket\", combineAudioTags: true, dontUseCache: true, FFMPEGLocation: \"..\\\\ffmpeg.exe\", workingDir: \"c:\\\\Tmp\", enabledInPreview:false, enabled:false, s3DomainName:\"s3.amazonaws.com\"};\n        } else {\n            this.pollyConfig = {bucketName: \"sfb-sample-bucket\", combineAudioTags: true, dontUseCache: true, FFMPEGLocation: \"./ffmpeg\", workingDir: \"/Tmp\", enabledInPreview:false, enabled:false, s3DomainName:\"s3.amazonaws.com\"};\n        }\n\n        PollyUtil.configurePolly(this.pollyConfig);\n\n        this.audioAccessor = audioAccessor ||\n            new S3AudioAccessor({\n                audioWorkingDir: this.pollyConfig.workingDir,\n                s3DomainName: this.pollyConfig.s3DomainName || \"s3.amazonaws.com\",\n                bucketName: this.pollyConfig.bucketName,\n            });\n\n        this.pollyUtil = pollyUtil ||  new PollyUtil(this.audioAccessor);\n\n        this.storyAccessor = new StoryAccessor(storyMetadata);\n\n        this.callStack = new CallStackUtil(this.storyAccessor);\n\n        this.storyState = {};\n\n        this.audioItemUtil = new AudioItemUtil();\n\n        this.stage = new PlayStage(this.audioItemUtil);\n\n        let importPlugins: ABCImportPlugin[] = [\n\t\t\tnew DefaultFormatImportPlugin()\n\t\t];\n\n\t\tif (customImportPlugins) {\n\t\t\timportPlugins = importPlugins.concat(customImportPlugins);\n        }\n\n\t\tfor (let importPlug of importPlugins) {\n\t\t\tthis.importHandlersByType[importPlug.pluginName] = importPlug;\n        }\n\n        if (extensions) {\n            this.customExtensions = this.customExtensions.concat(extensions);\n        }\n    }\n\n    /**\n     * invoke before calling resumeStory if the story history and progress needs to be reset by running the start sequence.\n     * onStart implementation of all registered extensions are run.\n     *\n     * @param startingStoryState\n     */\n    public async resetStory(startingStoryState?: {[key: string]: any}) {\n        this.storyState = JSON.parse(JSON.stringify(startingStoryState || this.storyState));\n\n        StoryStateHelper.setCurrentSceneID(this.storyState, BuiltInScenes.StartScene);\n        StoryStateHelper.resetAvailableChoices(this.storyState);\n        StoryStateHelper.resetChoiceHistory(this.storyState);\n\n        return;\n    }\n\n    /**\n     * Resume the story.\n     * If story has been paused, run the resume cycle by playing the 'Resume' scene first.\n     * Otherwise, Run normally from the bookmarked scene ID.\n     *\n     * @param userInput\n     * @param startingStoryState\n     */\n    public async resumeStory(_userInput: UserInput, startingStoryState?: {[key: string]: any}) {\n        this.storyState = JSON.parse(JSON.stringify(startingStoryState || this.storyState));\n\n        if (StoryStateHelper.isEndingReached(this.storyState)) {\n            delete this.storyState.system_prevRecap;\n            delete this.storyState.system_prevSpeech;\n\n            StoryStateHelper.setEndingReached(this.storyState, false);\n        }\n\n        this.playQueue = [];\n        this.unhandledChoiceFlag = false; // Reset to false\n        this.isRepeating = false;\n\n        // apply user input extension by DriverExtensions\n        const inputHelper = new UserInputHelper(_userInput);\n        for (let extension of this.customExtensions) {\n            if (!isDriverExtension(extension)) {\n                continue;\n            }\n\n            await extension.pre({\n                driver: this,\n                storyState: this.storyState,\n                userInputHelper: inputHelper,\n                locale: this.locale\n            });\n        }\n\n        const userInput = inputHelper.getUserInput();\n\n        if (!StoryStateHelper.isStoryPaused(this.storyState) && !this.isPausing) {\n            await this.processChoice.call(this, userInput);\n        }\n\n        if (!this.isRepeating) {\n            if(ACEDriver.debug) console.log(\"[DEBUG] Play queue length: \" + this.playQueue.length);\n            if (this.playQueue.length === 0) {\n                let bookmarkedSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n                if(ACEDriver.debug) console.log(\"[DEBUG] Current bookmark: \" + bookmarkedSceneID);\n\n                if (bookmarkedSceneID == null) {\n                    if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue start scene\");\n\n                    this.playQueue.push({\n                        sceneID: BuiltInScenes.StartScene,\n                        property: \"narration\"\n                    });\n                } else {\n                    let resumeExists: boolean = false;\n\n                    try {\n                        let scene: Scene = this.storyAccessor.getSceneByID(BuiltInScenes.ResumeScene);\n\n                        if (scene) {\n                            resumeExists = true;\n                        }\n                    } catch(err) {\n                        resumeExists = false;\n                    }\n\n                    if (StoryStateHelper.isStoryPaused(this.storyState) && resumeExists) {\n                        if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue resume scene, and clear choices.\");\n                        StoryStateHelper.resetAvailableChoices(this.storyState);\n                        if (StoryStateHelper.getCurrentSceneID(this.storyState) !== BuiltInScenes.PauseScene) {\n                            this.storyState.resume = StoryStateHelper.getCurrentSceneID(this.storyState);\n                        }\n                        this.playQueue.push({\n                            sceneID: BuiltInScenes.ResumeScene,\n                            property: \"narration\"\n                        });\n                    } else {\n                        if(ACEDriver.debug) console.log(\"[DEBUG] Enqueue saved scene: \" + bookmarkedSceneID);\n\n                        this.playQueue.push({\n                            sceneID: bookmarkedSceneID,\n                            property: \"narration\"\n                        });\n                    }\n\n                    // Also set a flag to indicate that we hit an unhandled choice so the caller can do something different if they want to\n                    this.unhandledChoiceFlag = true;\n                }\n            }\n\n            StoryStateHelper.setStoryPaused(this.storyState, false);\n\n            if (!this.storyState.system_originStack) {\n                this.storyState.system_originStack = [];\n            }\n\n            this.storyState.system_originStack.push(this.playQueue[0]);\n\n            if (this.storyState.system_originStack.length > this.historySize) {\n                // too large, remove first item\n                this.storyState.system_originStack.splice(0, 1);\n            }\n\n            let totalScenesProcessedCount = 0;\n\n            while (this.playQueue.length > 0 && !this.isPausing) {\n\n                let dequeuedSceneID: {\n                    sceneID: string,\n                    property: string\n                } = this.playQueue.splice(0, 1)[0];\n\n                if(ACEDriver.debug) console.log(\"[DEBUG] Setting the current scene to: \" + dequeuedSceneID);\n                this.stage.logVisitedScene(dequeuedSceneID.sceneID);\n\n                StoryStateHelper.setCurrentSceneID(this.storyState, dequeuedSceneID.sceneID);\n\n                let preProcessState: string = JSON.stringify(this.storyState);\n\n                await this.processScene.call(this, undefined, dequeuedSceneID.property);\n\n                if (ACEDriver.testing) {\n                    let beforeStructure: any = JSON.parse(preProcessState);\n                    console.log(\"\\n\");\n                    check(\"\", beforeStructure, this.storyState);\n                }\n\n                totalScenesProcessedCount++;\n                if(totalScenesProcessedCount >= TOTAL_SCENES_PROCESS_SAFEGUARD) {\n                    throw new Error(\"[ACE Driver - Infinite Loop] Looped \" + TOTAL_SCENES_PROCESS_SAFEGUARD + \" times, last scene ID was: \" + dequeuedSceneID.sceneID + \". Please fix your infinite loop.\");\n                }\n            }\n\n            if (this.isPausing) {\n                this.isPausing = false;\n                await this.executePauseSequence(_userInput);\n            }\n        }\n\n        this.storyState.system_prevSpeech = this.stage.getStageSpeechAudioSequence();\n        this.storyState.system_prevReprompt = this.stage.getStageRepromptAudioSequence();\n        this.storyState.system_prevRecap = this.stage.getStageRecapAudioSequence();\n\n        // apply user input extension by DriverExtensions\n        for (let extension of this.customExtensions) {\n            if (!isDriverExtension(extension)) {\n                continue;\n            }\n\n            await extension.post({\n                driver: this,\n                storyState: this.storyState,\n                userInputHelper: inputHelper,\n                locale: this.locale\n            });\n        }\n    }\n\n    public pauseStory() {\n        this.isPausing = true;\n    }\n\n    /**\n     * Run the pause sequence by playing the 'Pause' scene.\n     *\n     * @param startingStoryState\n     */\n    private async executePauseSequence(_userInput: UserInput, startingStoryState?: {[key: string]: any}) {\n        this.storyState = Object.assign({}, startingStoryState || this.storyState);\n\n        let savingSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n\n        if (savingSceneID == BuiltInScenes.ResumeScene) {\n            savingSceneID = this.storyState.resume\n        }\n\n        StoryStateHelper.setCurrentSceneID(this.storyState, BuiltInScenes.PauseScene);\n\n        let preProcessState: string = JSON.stringify(this.storyState);\n\n        await this.processScene.call(this);\n\n        if (ACEDriver.testing) {\n            let beforeStructure: any = JSON.parse(preProcessState);\n            console.log(\"\\n\");\n            check(\"\", beforeStructure, this.storyState);\n        }\n\n        // saving the previous scene for next resume.\n        StoryStateHelper.setCurrentSceneID(this.storyState, savingSceneID === null ? BuiltInScenes.StartScene: savingSceneID);\n\n        StoryStateHelper.setStoryPaused(this.storyState, true);\n\n        // apply user input extension by DriverExtensions\n        const inputHelper = new UserInputHelper(_userInput);\n        for (let extension of this.customExtensions) {\n            if (!isDriverExtension(extension)) {\n                continue;\n            }\n\n            await extension.post({\n                driver: this,\n                storyState: this.storyState,\n                userInputHelper: inputHelper,\n                locale: this.locale\n            });\n        }\n\n        return;\n    }\n\n    /**\n     * Configure the default polly narrator settings.\n     */\n    public configureDefaultPollyNarrator(narrator: Narrator) {\n        console.info(\"[INFO] Default narrator set: \" + JSON.stringify(narrator));\n        this.defaultNarrator = narrator;\n    }\n\n    /**\n     * Turning on the 'default polly' causes all narration texts (including the ones not surrounded by the 'voice' tag) to be read in polly voice.\n     * The polly voice setting for this can be configured by calling configureDefaultPollyNarrator().\n     */\n    public turnOnDefaultPolly() {\n        this.isPollyAsDefault = true;\n    }\n\n    /**\n     * Turning off the 'default polly' causes all narration texts (texts NOT surrounded by the 'voice' tag) to be processed as non-polly voice.\n     */\n    public turnOffDefaultPolly() {\n        this.isPollyAsDefault = false;\n    }\n\n    public async getSpeechSSMLText() {\n        let {ssml} = await this.buildAudioScenes(this.stage.getStageSpeechAudioSequence());\n\n        return ssml;\n    }\n\n    public async getSpeechSSMLTextPerScene() {\n        const sceneAudioItems = this.stage.getStageSpeechAudioSequence(true);\n\n        const scenesAndSsmlList: any = [];\n\n        for(let item of sceneAudioItems) {\n\n            let {ssml} = await this.buildAudioScenes([item]);\n\n            let sceneAndSsml = { sceneID: item.sceneID, sceneAudioItem: item, ssml }\n\n            scenesAndSsmlList.push(sceneAndSsml);\n        }\n\n        return scenesAndSsmlList;\n    }\n\n    public getVisitedSceneIDsOnRun(): string[] {\n        return this.stage.getVisitedSceneIDsOnRun();\n    }\n\n    public async getSpeechSSMLAndPrettyText() {\n        let {ssml, pretty, errorMessage} = await this.buildAudioScenes(this.stage.getStageSpeechAudioSequence());\n\n        return {ssml, pretty, errorMessage};\n    }\n\n    public async getRepromptSSMLText() {\n        let {ssml} = await this.buildAudioScenes(this.stage.getStageRepromptAudioSequence());\n\n        return ssml;\n    }\n\n    public async getRepromptSSMLAndPrettyText() {\n        let {ssml, pretty, errorMessage} = await this.buildAudioScenes(this.stage.getStageRepromptAudioSequence());\n\n        return {ssml, pretty, errorMessage};\n    }\n\n    public async getVisuals() : Promise<VisualOptions[] | undefined> {\n        return this.stage.getStageVisualOptions();\n    }\n\n    public async buildAudioScenes(sceneAudioItemList: SceneAudioItem[]): Promise<{ssml: string, pretty: string, errorMessage?: string}> {\n        const mixedSceneAudio = await this.audioItemUtil.proccessSceneAudioItems(sceneAudioItemList, this.pollyConfig, this.audioAccessor);\n\n        let ssml = \"\";\n        let errorMessage;\n        try {\n            if (mixedSceneAudio.length > 0 ){\n                const audioTypeCount: number = this.audioItemUtil.getAudioCount(mixedSceneAudio);\n\n                if (this.pollyConfig.enabled && ((audioTypeCount > 5 && this.pollyConfig.combineAudioTags) || this.pollyConfig.enabledInPreview)) {\n\n                    const combinedAudioItems = await this.audioItemUtil.combineConsecutiveAudioItems(mixedSceneAudio, this.pollyConfig, this.audioAccessor, ACEDriver.SSML_AUDIO_LIMIT);\n\n                    ssml = this.audioItemUtil.generateSSMLText([{\n                        foreground: combinedAudioItems,\n                        background: []\n                    }], this.pollyConfig);\n                } else {\n                    ssml = this.audioItemUtil.generateSSMLText(mixedSceneAudio, this.pollyConfig);\n                }\n            }\n        } catch (err) {\n            errorMessage = \"[ERROR] Could not generate mixed audio. Please verify that your resources path is correctly configured.\";\n            console.log(errorMessage, err);\n        }\n\n        const previewSSML = this.audioItemUtil.generateSSMLText(sceneAudioItemList, this.pollyConfig);\n\n        if (!this.pollyConfig.dontUploadToS3) {\n            await this.audioItemUtil.uploadGeneratedFiles(this.audioAccessor, this.pollyConfig.workingDir);\n        }\n\n        return {ssml: ssml, pretty: previewSSML, errorMessage};\n    }\n\n    /**\n     * Get the current story state.\n     */\n    public getCurrentStoryState(): {[key: string]: any} {\n        return JSON.parse(JSON.stringify(this.storyState)); //deep copy\n    }\n\n    public getResultOptions(): ResultOption[] {\n        return this.resultOptions;\n    }\n\n    /**\n     * See if the scene marked as ending, or scene leading to no new choice has been reached as a result of the current resume/run.\n     */\n    public isEndingReached(): boolean {\n        return StoryStateHelper.isEndingReached(this.storyState);\n    }\n\n    /**\n     * See if a choice was unhandled and allow the caller to do something else if they need to.\n     */\n    public isUnhandledChoice(): boolean {\n        return this.unhandledChoiceFlag;\n    }\n\n    /**\n     * Execute the selected choice indicated by the user input.\n     */\n    public async processChoice(userInput: UserInput): Promise<any> {\n        return new Promise<any> (async (resolve, reject) => {\n            if (ACEDriver.debug) console.log(\"[DEBUG] Calling processChoice\");\n\n            const availableChoices: Choice[] = StoryStateHelper.getAvailableChoices(this.storyState)\n\n            if (ACEDriver.debug) console.log(\"[DEBUG] Loading Available Choices: \" + JSON.stringify(availableChoices, null, 4));\n\n            const selectedChoice: Choice | null = StoryStateHelper.getChoiceByUserInput(this.storyState, userInput, this.locale);\n\n            if (ACEDriver.debug) console.log(`[DEBUG] With UserInput=${JSON.stringify(userInput)}, Selected Choice=${JSON.stringify(selectedChoice, null, 4)}`);\n\n            if (selectedChoice == null) {\n                if ((!this.storyState.system_prevRecap || this.storyState.system_prevRecap.length == 0)\n                    && (!this.storyState.system_prevSpeech || this.storyState.system_prevSpeech.length == 0)) {\n                    this.isRepeating = false;\n                } else {\n                    if (this.storyState.system_prevRecap && this.storyState.system_prevRecap.length > 0) {\n                        this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevRecap);\n                        this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevRecap);\n                    } else if (this.storyState.system_prevSpeech && this.storyState.system_prevSpeech.length > 0) {\n                        this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevSpeech);\n                        this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevSpeech);\n                    }\n\n                    if (this.storyState.system_prevReprompt && this.storyState.system_prevReprompt.length > 0) {\n                        this.stage.setStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n                    }\n\n                    this.isRepeating = true;\n                }\n            } else {\n                StoryStateHelper.setSelectedChoiceID(this.storyState, selectedChoice.id);\n\n                const beforeState: any = JSON.parse(JSON.stringify(this.storyState));\n\n                try {\n                    if (selectedChoice.sceneDirections) {\n                        // Keep for backwards compatibility.\n                        let tempChoiceInstructionAddress: string = StoryStateHelper.getCurrentSceneID(this.storyState) + \":\" + selectedChoice.id + \":\" + -1;\n                        this.storyState.system_instruction_mem = this.storyState.system_instruction_mem || [];\n                        this.storyState.system_instruction_mem[tempChoiceInstructionAddress] = selectedChoice.sceneDirections;\n    \n                        await this.performInstructions.call(this, tempChoiceInstructionAddress);\n                    } else if (selectedChoice.instructionAddress) {\n                        await this.performInstructions.call(this, selectedChoice.instructionAddress);\n                    }\n                } catch (err) {\n                    reject(err);\n                }\n\n                if (!this.isRepeating) {\n                    StoryStateHelper.resetAvailableChoices(this.storyState);\n\n                    if (selectedChoice.saveToHistory) {\n                        StoryStateHelper.addChoiceHistory(this.storyState, selectedChoice, getStateDiffs(beforeState, this.storyState), this.historySize);\n                    }\n                }\n            }\n\n            StoryStateHelper.clearSelectedChoiceID(this.storyState);\n            resolve();\n        });\n    }\n\n    /**\n     * Process the current scene. Updating speech, reprompt, variables as indicated by the scene.\n     */\n    private async processScene(sceneID?: string, sceneProperty?: string): Promise<any> {\n        if (ACEDriver.debug) console.log(\"[INFO] Calling processScene.\");\n\n        let currentSceneID: string | null = StoryStateHelper.getCurrentSceneID(this.storyState);\n\n        if (sceneID) {\n            currentSceneID = sceneID;\n        }\n\n        if (ACEDriver.testing) {\n            console.log(\"\\n\\nSCENE '\" + currentSceneID + \"'\");\n            console.log(\"........................\");\n        }\n\n        let currentScene: Scene | undefined = undefined;\n        if (currentSceneID != null) {\n            currentScene = this.storyAccessor.getSceneByID(currentSceneID || \"\");\n        }\n\n        if (!currentScene) {\n            if (ACEDriver.debug) throw new Error(`[WARN] Cannot find the Scene=[${currentSceneID}]`);\n            else return;\n        }\n\n        this.stage.startNewScene(currentSceneID || \"\");\n\n        StoryStateHelper.clearRecap(this.storyState);\n\n        for (let variation of currentScene.contents) {\n            // evaluate body's conditional\n            let conditionPassed: boolean = true;\n\n            if (variation.condition && !variation.condition.startsWith(\"otherwise\")) {\n                if (ACEDriver.debug) console.log(\"[DEBUG] pre-substitution condition= \" + JSON.stringify(variation.condition, null, 4));\n\n                let substitution  = replaceVariables(variation.condition, this.storyState, true);\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] post-substitution condition= \" + substitution);\n\n                if(!evalInContext(substitution, this)) {\n                    conditionPassed = false;\n                }\n                \n            }\n\n            if (!conditionPassed) {\n                if (ACEDriver.testing && variation.condition) console.log(`${padString(\"FAILED\",8)}\\t>${variation.condition}`);\n                continue;\n            }\n\n            if (ACEDriver.testing && variation.condition) console.log(`${padString(\"PASSED\",8)}\\t>${variation.condition}`);\n\n            /*\n            * Narration\n            */\n            let sceneNarration: AudioItem[] = [];\n\n            if (variation.narration) {\n                let narrationText: string = replaceVariables(variation.narration, this.storyState, false)\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \");\n\n                let narrationVariations: string[] = narrationText.split(\"||\");\n\n                let selectedNarration: string = narrationVariations[Math.floor(Math.random() * narrationVariations.length)];\n                sceneNarration = this.audioItemUtil.buildAudioItemsFromSSML(selectedNarration, this.isPollyAsDefault? this.defaultNarrator : undefined);\n            }\n\n            /*\n            * Scene Directions\n            */\n            if (variation.sceneDirections && variation.sceneDirections.length > 0) {\n                const instructionSetAddress = this.callStack.getSceneAddress(currentSceneID || \"\", 0);\n\n                await this.performInstructions(instructionSetAddress);\n            }\n\n            if (sceneProperty && sceneProperty.trim().toLowerCase() == \"reprompt\" && this.stage.getRepromptSceneAudio().foreground.length > 0) {\n                sceneNarration = this.stage.getRepromptSceneAudio().foreground;\n            }\n\n            if (sceneProperty && sceneProperty.trim().toLowerCase() == \"recap\" && this.stage.getRecapSceneAudio().foreground.length > 0) {\n                sceneNarration = this.stage.getRecapSceneAudio().foreground;\n            }\n\n            this.stage.appendSceneSpeechForeground(sceneNarration);\n\n            break; // Only one of the scene variations are played.\n        }\n\n        this.stage.closeScene();\n    }\n\n    /**\n     * Peform given list of scene directions in order.\n     *\n     * @param directions Scene Directions to peform.\n     * @return returns the resulting scene direction where all the variables are replaced by the actual values.\n     */\n    public async performInstructions(instructionAddress: string): Promise<boolean> {\n        if (ACEDriver.debug) console.log(`[DEBUG] Calling performInstructions...`);\n\n        let isTerminatingDirection: boolean = false;\n\n        let visualAlreadyDefined: boolean = false;\n\n        let directions: Instruction[] = [];\n\n        if (this.storyState.system_instruction_mem && this.storyState.system_instruction_mem[instructionAddress]) {\n            // For backward compatibility, needs to stay\n            directions = this.storyState.system_instruction_mem[instructionAddress];\n        } else {\n            directions = this.callStack.getInstructions(instructionAddress, this.storyState);\n        }\n\n        for (let lineNumber = 0 ; lineNumber < directions.length; lineNumber++) {\n            let parameters: {[key: string]: any;} = JSON.parse(JSON.stringify(directions[lineNumber].parameters));\n            let type: InstructionType = directions[lineNumber].directionType;\n\n            for (let paramName of Object.keys(parameters)) {\n                if (typeof(parameters[paramName]) == 'string') {\n\n                    const isCondition = paramName === \"condition\";\n\n                    parameters[paramName] = replaceVariables(parameters[paramName], this.storyState, isCondition);\n                }\n            }\n\n            switch(type) {\n            case InstructionType.CUSTOM: {\n\n                if (ACEDriver.testing) console.log(`${padString(\"CUSTOM\",8)}\\t> calling custom instruction with:\\n${JSON.stringify(parameters, null, 4)}`);\n\n                for (let extension of this.customExtensions) {\n                    if (isInstructionExtension(extension)) {\n                        const customInstructionName: string = parameters.customName;\n\n                        if ((extension as any)[customInstructionName]) {\n                            await (extension as any)[customInstructionName]({\n                                    instructionName:parameters.customName,\n                                    instructionParameters: parameters,\n                                    playStage: this.stage,\n                                    storyAccessor: this.storyAccessor,\n                                    storyState: this.storyState\n                                });\n                        }\n                    } else {\n                        continue;\n                    }\n                }\n\n                break;\n            }\n            case InstructionType.SLOT: {\n                const variableName: string = parameters.variableName;\n                const slotType: string = parameters.variableType;\n\n                StoryStateHelper.addExpectedCustomSlot(this.storyState, variableName);\n\n                if (ACEDriver.testing) console.log(`${padString(\"SLOT\",8)}\\t>'${variableName}' as ${slotType}`);\n                break;\n            }\n            case InstructionType.BOOKMARK: {\n                let bookmarkName: string = parameters.variableName;\n                let targetName: string | null = parameters.variableValue;\n\n                if (!targetName) {\n                    targetName = StoryStateHelper.getCurrentSceneID(this.storyState);\n                }\n\n                if (targetName == null) {\n                    throw new Error(\"SFBDriver: target is not defined for the bookmark command.\");\n                }\n\n                this.storyState[bookmarkName] = {\n                    type: 'sceneID',\n                    value: targetName\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"BOOKMARK\",8)}\\t>'${bookmarkName}' as ${targetName}`);\n                break;\n\n            }\n            case InstructionType.CHOICE: {\n                let choiceID: string = createHash('md5').update(JSON.stringify(parameters.utterances).trim().toLowerCase()).digest('hex');\n\n                let utterances = parameters.utterances;\n\n                if (parameters.utteranceIDs && parameters.utteranceIDs.length > 0) {\n                    utterances = utterances.concat(parameters.utteranceIDs);\n                }\n\n                let choice: Choice = {\n                    id: choiceID,\n                    instructionAddress: this.callStack.getChoiceAddress(instructionAddress, lineNumber),\n                    utterances: utterances,\n                    saveToHistory: false//parameters.saveToHistory && parameters.saveToHistory.trim().toLowerCase() == 'true'? true: false\n                }\n\n                if (parameters.narration) {\n                    choice.narration = parameters.narration;\n                }\n\n                StoryStateHelper.enqueueAvailableChoice(this.storyState, choice);\n\n                if (ACEDriver.testing) console.log(`${padString(\"CHOICE\",8)}\\t> Register ChoiceID=[${choiceID}] for expected input '${parameters.utterances}'`);\n\n                break;\n            }\n            case InstructionType.CONDITION: {\n                let conditionPassed: boolean = true;\n\n                let conditionString: string = parameters.condition;\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] pre-substitution condition= \" + JSON.stringify(conditionString, null, 4));\n\n                let substitution  = replaceVariables(conditionString, this.storyState, true);\n\n                if (ACEDriver.debug) console.log(\"[DEBUG] post-substitution condition= \" + substitution);\n\n                if(!evalInContext(substitution, this)) {\n                    conditionPassed = false;\n                }\n\n                if (!conditionPassed) {\n                    if (ACEDriver.testing && conditionString) console.log(`${padString(\"FAILED\",8)}\\t>'${directions[lineNumber].parameters.condition}' evaluated as [${conditionString}]`);\n                } else {\n                    if (ACEDriver.testing && conditionString) console.log(`${padString(\"PASSED\",8)}\\t>'${directions[lineNumber].parameters.condition}' evaluated as [${conditionString}]`);\n                    \n                    if (parameters.directions && parameters.directions.length > 0) {\n\n                        const conditionInstructionAddress: string = this.callStack.getConditionAddress(instructionAddress, lineNumber);\n\n                        await this.performInstructions.call(this, conditionInstructionAddress);\n\n                        isTerminatingDirection = true;\n                    }\n                }\n\n                break;\n            }\n            case InstructionType.GO_TO: {\n                let destinationPage: string = parameters.target;\n\n                if (this.storyState[destinationPage] && this.storyState[destinationPage].type == 'sceneID') {\n                    this.playQueue.push({\n                        sceneID: this.storyState[destinationPage].value,\n                        property: parameters.targetSceneProperty || \"narration\"\n                    });\n\n                } else {\n                    this.playQueue.push({\n                        sceneID: destinationPage.toLowerCase(),\n                        property: parameters.targetSceneProperty || \"narration\"\n                    });\n                }\n\n                isTerminatingDirection = true;\n\n                if (ACEDriver.testing) console.log(`${padString(\"GO TO\",8)}\\t>scene '${destinationPage}'`);\n                break;\n            }\n            case InstructionType.SAVE_AND_GO: {\n                let destinationPage: string = parameters.target.toLowerCase();\n\n                const savingAddress: string = this.callStack.getReturnAddress(instructionAddress, lineNumber);\n\n                if (!this.storyState.system_call_stack) {\n                    this.storyState.system_call_stack = [];\n                }\n\n                this.storyState.system_call_stack.push(savingAddress);\n\n                if (ACEDriver.testing) console.log(`${padString(\"CALL\",8)}\\t>scene '${destinationPage}'`);\n\n                this.playQueue.push({\n                    sceneID: destinationPage,\n                    property: parameters.targetSceneProperty || \"narration\"\n                });\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.RETURN: {\n                if (this.storyState.system_call_stack && this.storyState.system_call_stack.length > 0) {\n                    const returnAddress: string = this.storyState.system_call_stack.splice(-1, 1)[0];\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RETURN\",8)}\\t> Returning to address ${returnAddress}.'`);\n\n                    const popSceneID = this.callStack.getSourceScene(returnAddress);\n                    StoryStateHelper.setCurrentSceneID(this.storyState, popSceneID);\n                    \n                    await this.performInstructions.call(this, returnAddress);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RETURN\",8)}\\t> There is instructions to return to.'`);\n                }\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.RESTART: {\n                await this.resetStory();\n                this.playQueue.push({\n                    sceneID: BuiltInScenes.StartScene,\n                    property: parameters.targetSceneProperty || \"narration\"\n                });\n\n                if (ACEDriver.testing) console.log(`${padString(\"RESTART\",8)}\\t> Refresh and restart the story.`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case InstructionType.REPEAT: {\n                if (this.storyState.system_prevSpeech && this.storyState.system_prevSpeech.length > 0) {\n                    this.stage.appendStageSpeechAudioSequence(this.storyState.system_prevSpeech);\n                    this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n\n                    if (ACEDriver.testing) console.log(`${padString(\"REPEAT\",8)}\\t> Repeating previously heard speech:\\n${JSON.stringify(this.storyState.system_prevSpeech, null, 4)}\\nreprompt:\\n${JSON.stringify(this.storyState.system_prevReprompt, null, 4)}`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"REPEAT\",8)}\\t> Nothing to repeat.'`);\n                }\n\n                this.isRepeating = true;\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.REPEAT_REPROMPT: {\n                if (this.storyState.system_prevReprompt && this.storyState.system_prevReprompt.length > 0) {\n                    this.stage.setStageSpeechAudioSequence(this.stage.getStageRepromptAudioSequence().concat(this.storyState.system_prevReprompt));\n                    this.stage.appendStageRepromptAudioSequence(this.storyState.system_prevReprompt);\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RE-REPROMPT\",8)}\\t> Repeating previously heard reprompt:\\n${JSON.stringify(this.storyState.system_prevReprompt, null, 4)}`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RE-REPROMPT\",8)}\\t> Nothing to reprompt.'`);\n                }\n\n                this.isRepeating = true;\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.BACK: {\n                let countBack: number = parameters.count + 1;\n\n                if (!this.storyState.system_originStack || this.storyState.system_originStack.length == 0) {\n                    if (ACEDriver.testing) console.log(`${padString(\"BACK\",8)}\\t>There is no scene to go back to.`);\n                } else {\n                    let transitionStack: string[] = JSON.parse(JSON.stringify(this.storyState.system_originStack));\n\n                    let destinationScene: any = undefined;\n\n                    while (countBack-- > 0 && transitionStack.length > 0) {\n                        destinationScene = transitionStack.splice(-1, 1)[0];\n                    }\n\n                    this.playQueue.push(destinationScene);\n\n                    this.storyState.system_originStack = transitionStack;\n                    if (ACEDriver.testing) console.log(`${padString(\"BACK\",8)}\\t> back count=${parameters.count} to scene '${JSON.stringify(destinationScene)}'`);\n                }\n\n                isTerminatingDirection = true;\n\n                break;\n            }\n            case InstructionType.RECAP: {\n                let recapMessage: string[] = replaceVariables(parameters.message, this.storyState, false)\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \")\n                    .split(\"||\");\n\n                let selectedRecap: string = recapMessage[Math.floor(Math.random() * recapMessage.length)];\n\n                if (selectedRecap.trim().length > 0) {\n                    this.stage.appendSceneRecapForeground(this.audioItemUtil.buildAudioItemsFromSSML(selectedRecap.replace(/\\n/g, ' ').replace(/[\\s]+/g, ' '), this.isPollyAsDefault? this.defaultNarrator : undefined));\n\n                    if (ACEDriver.testing) console.log(`${padString(\"RECAP\",8)}\\t>'${selectedRecap}'`);\n                } else {\n                    if (ACEDriver.testing) console.log(`${padString(\"RECAP\",8)}\\t>'Nothing to set as recap message.'`);\n                }\n\n                break;\n            }\n            case InstructionType.END: {\n                StoryStateHelper.setEndingReached(this.storyState, true);\n                await this.resetStory();\n                this.isRepeating = true;\n\n                if (ACEDriver.testing) console.log(`END`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case InstructionType.PAUSE: {\n                this.isPausing = true;\n                if (ACEDriver.testing) console.log(`PAUSE`);\n\n                isTerminatingDirection = true;\n                break;\n            }\n            case InstructionType.BGM: {\n                let bgmURL: string = parameters.audioURL;\n\n                this.stage.appendSceneSpeechBackground(\n                    this.audioItemUtil.buildAudioItemsFromSSML(`<audio src='${bgmURL}' delay='${parameters.delayMs||\"\"}' volume='${parameters.volume||\"\"}' blend='${parameters.blend}'/>`, this.isPollyAsDefault? this.defaultNarrator : undefined));\n\n                if (ACEDriver.testing) console.log(`${padString(\"BGM\",8)}\\t>${bgmURL}`);\n                break;\n            }\n            case InstructionType.CLEAR: {\n                let attributeName: string = parameters.variableName;\n\n                if (attributeName.trim() == \"*\") {\n                    attributeName = \"\";\n\n                    for (let key of Object.keys(this.storyState)) {\n                        if (!key.startsWith(\"system_\")) {\n                            attributeName += `${key} ; `;\n                            delete this.storyState[key];\n                        }\n                    }\n\n                } else {\n                    delete this.storyState[attributeName];\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"CLEAR\",8)}\\t>'${attributeName}'`);\n                break;\n            }\n            case InstructionType.ADD_TO_INVENTORY: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n\n                if (!this.storyState[listName]){\n                    this.storyState[listName] = {};\n                }\n\n                if (!this.storyState[listName][item]) {\n                    this.storyState[listName][item] = 0;\n                }\n\n                this.storyState[listName][item] ++;\n\n                if (ACEDriver.testing) console.log(`${padString(\"ADD INVENTORY\",8)}\\t>'${item}' to '${listName}'`);\n                break;\n            }\n            case InstructionType.ADD_ITEM: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n                let sizeLimit: string = parameters.size || \"-1\";\n\n                if (!this.storyState[listName]){\n                    this.storyState[listName] = [];\n                }\n\n                this.storyState[listName].push(item);\n\n                let size: number = parseInt(sizeLimit, 10);\n                if (size > 0 && this.storyState[listName].length > size) {\n                    this.storyState[listName].splice(0, this.storyState[listName].length - size);\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"ADD ITEM\",8)}\\t>'${item}' to '${listName}'`);\n                break;\n            }\n            case InstructionType.GET_TIME: {\n                let currentTime: number = new Date().getTime();\n\n                this.storyState.system_return = currentTime;\n\n                if (ACEDriver.testing) console.log(`${padString(\"GET TIME\",8)}\\t>${currentTime}`);\n            }\n            case InstructionType.REMOVE_ITEM: {\n                let item: string = parameters.itemName;\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName] && typeof this.storyState[listName].length == 'number') {\n                    let deletingIndex: number = -1;\n                    for (let i = 0; i < this.storyState[listName].length; i ++) {\n                        if (this.storyState[listName][i] == item) {\n                            deletingIndex = i;\n                            break;\n                        }\n                    }\n\n                    if (deletingIndex >= 0) {\n                       let removeResult: any = this.storyState[listName].splice(deletingIndex, 1)[0];\n                       this.storyState.system_return = removeResult;\n                    }\n                } else if (this.storyState[listName] && typeof this.storyState[listName].length == 'undefined') {\n                    if (typeof this.storyState[listName][item] == 'number' && this.storyState[listName][item] > 0) {\n                        this.storyState[listName][item] --;\n                    } else if (typeof this.storyState[listName][item] != 'number') {\n                        delete this.storyState[listName][item];\n                    }\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>'${item}' from '${listName}'`);\n                break;\n            }\n            case InstructionType.REMOVE_FIRST: {\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName]) {\n                    let removeResult: any = this.storyState[listName].splice(0, 1)[0]\n\n                    this.storyState.system_return = removeResult;\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>FIRST from '${listName}'`);\n                break;\n            }\n            case InstructionType.REMOVE_LAST: {\n                let listName: string = parameters.variableName;\n\n                if (this.storyState[listName]) {\n                    let removeResult: any = this.storyState[listName].splice(this.storyState[listName].length - 1, 1);\n\n                    this.storyState.system_return = removeResult;\n                }\n\n                if (ACEDriver.testing) console.log(`${padString(\"DEL ITEM\",8)}\\t>LAST from '${listName}'`);\n                break;\n            }\n            case InstructionType.FLAG: {\n                let variableName: string = parameters.variableName;\n\n                this.storyState[variableName] = true;\n\n                if (ACEDriver.testing) console.log(`${padString(\"FLAG\",8)}\\t>'${variableName}'`);\n                break;\n            }\n            case InstructionType.UNFLAG: {\n                let variableName: string = parameters.variableName;\n\n                this.storyState[variableName] = false;\n\n                if (ACEDriver.testing) console.log(`${padString(\"UNFLAG\",8)}\\t>'${variableName}'`);\n                break;\n            }\n            case InstructionType.SET: {\n                let variableName: string = parameters.variableName;\n                let value: number | any = parameters.variableValue == \"undefined\"? 0: parseFloat(parameters.variableValue);\n\n                if (parameters.variableValue.length === 0) {\n                    value = \"\";\n                } else if (isNaN(parameters.variableValue)) {\n                    value = parameters.variableValue;\n\n                    if (value == 'true') {\n                        value = true;\n                    } else if (value == 'false') {\n                        value = false;\n                    }\n                }\n\n\n                if (this.storyState[variableName] == undefined) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = value;\n\n                if (ACEDriver.testing) console.log(`${padString(\"SET\",8)}\\t>'${variableName}' as ${value}`);\n                break;\n            }\n            case InstructionType.REDUCE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) - value) * 100) / 100;\n                if (ACEDriver.testing) console.log(`${padString(\"REDUCE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.INCREASE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) + value) * 100) / 100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"INCREASE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.MULTIPLY: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) * value) * 100) / 100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"MULTIPLY\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.DIVIDE: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) / value) * 100)/100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"DIVIDE\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.MODULUS: {\n                let variableName: string = parameters.variableName;\n                let value: number = parseFloat(parameters.variableValue);\n\n                if (isNaN(parameters.variableValue)) {\n                    value = 0;\n                }\n\n                if (isNaN(this.storyState[variableName])) {\n                    this.storyState[variableName] = 0;\n                }\n\n                this.storyState[variableName] = Math.round((parseFloat(this.storyState[variableName]) % value) * 100)/100;\n\n                if (ACEDriver.testing) console.log(`${padString(\"MODULUS\",8)}\\t>'${variableName}' by ${value} = ${this.storyState[variableName]}`);\n                break;\n            }\n            case InstructionType.ROLL: {\n                let rollEval: string = parameters.diceString;\n\n                this.evaluateDiceRoll(rollEval);\n\n                if (ACEDriver.testing) console.log(`${padString(\"ROLL\",8)}\\t>'${rollEval}'`);\n                break;\n            }\n            case InstructionType.REPROMPT: {\n                let repromptMessages: string[] = replaceVariables(parameters.message, this.storyState, false)\n                    .replace(/\\n/g, \" \")\n                    .replace(/[\\s]+/g, \" \")\n                    .split(\"||\");\n\n                let selectedReprompt: string = repromptMessages[Math.floor(Math.random() * repromptMessages.length)];\n                this.stage.appendSceneRepromptForeground(\n                    this.audioItemUtil.buildAudioItemsFromSSML(selectedReprompt.replace(/\\n/g, ' ').replace(/[\\s]+/g, ' '), this.isPollyAsDefault? this.defaultNarrator : undefined));\n\n                if (ACEDriver.testing) console.log(`${padString(\"REPROMPT\",8)}\\t>'${selectedReprompt}'`);\n                break;\n            }\n            case InstructionType.VISUALS: {\n                if (visualAlreadyDefined) {\n                    let currentVisuals: VisualOptions[] = this.stage.getStageVisualOptions() || [];\n                    currentVisuals[currentVisuals.length - 1] = <VisualOptions>parameters;\n\n                    this.stage.setStageVisualOptions(currentVisuals);\n                } else {\n                    visualAlreadyDefined = true;\n\n                    this.stage.appendStageVisuals(<VisualOptions>parameters);\n                }\n\n                break;\n            }\n            default: {\n                throw new Error(\"[STORY - SYNTAX ERROR] the story effect is not recognized.\\nline number=[\"\n                    + lineNumber + \"]\\nline content=[\"\n                    + JSON.stringify(directions[lineNumber], null, 4) + \"]\\n\"\n                    + \"pageID=[\" + StoryStateHelper.getCurrentSceneID(this.storyState) + \"]\");\n            }\n            }\n\n            if (isTerminatingDirection || lineNumber == directions.length - 1) {\n                const stackExists = this.callStack.callStackExists(this.storyState);\n                const addressInStack = this.callStack.addressInStack(this.storyState, instructionAddress);\n\n                if (stackExists && addressInStack && this.storyState.system_instruction_mem && this.storyState.system_instruction_mem[instructionAddress]) {\n                    delete this.storyState.system_instruction_mem[instructionAddress];\n                }\n                break;\n            }\n        }\n\n        return isTerminatingDirection;\n    }\n\n    /**\n     * Compute a dice roll given a standard dice string.\n     *\n     * @param diceString\n     */\n    private evaluateDiceRoll(diceString: string) {\n        let diceRegex: RegExp = /([\\d])d([\\d]*)+[k]?([\\d]*)/gi\n\n        let diceMatch: RegExpExecArray|null = diceRegex.exec(diceString);\n\n        let rollResults: number[] = [];\n        while (diceMatch != null) {\n            let rollResult: number = 0;\n            let diceCount: number = parseInt(diceMatch[1], 10);\n            let faceCount: number = parseInt(diceMatch[2], 10);\n            let selectCount: number = parseInt(diceMatch[3], 10);\n\n            let rolls: number[] = [];\n            for (let i = 0; i < diceCount; i++) {\n                if (ACEDriver.probabilityOff) {\n                    rolls.push((faceCount + 1) / 2);\n                } else {\n                    rolls.push(Math.floor(Math.random() * faceCount) + 1);\n                }\n            }\n\n            let sumCount: number = rolls.length;\n            if (selectCount) {\n                rolls.sort().reverse(); //descending sort\n                sumCount = selectCount\n            }\n\n            for (let i = 0 ; i < sumCount; i++) {\n                rollResult += rolls[i];\n            }\n\n            rollResults.push(rollResult);\n\n            diceMatch = diceRegex.exec(diceString);\n        }\n\n        let diceMatchReplace: string = diceString.replace(diceRegex, () => {\n            return String(rollResults.splice(0, 1)[0]);\n        });\n\n        let rollFinalEval: any = eval(diceMatchReplace);\n        if (ACEDriver.debug) console.log(\"[DEBUG] Roll result for the entire dice configuration=[\" + diceMatchReplace + \"], result=[\" + rollFinalEval + \"]\" );\n\n        this.storyState.rollResult = rollFinalEval;\n    }\n}\n\nfunction replaceVariables(line: string, eventParams: any, isCondition: boolean): string {\n    const tokenReplacer = new TokenReplacer(SegmenterBuilder.getVariableSegmenter(), eventParams);\n\n    return tokenReplacer.replaceTokens(line, isCondition);\n}\n\n// Evalute the given string given the limited context given\nfunction evalInContext(js : string, context : any) {\n    //# Return the results of the in-line anonymous function we .call with the passed context\n    return function() { return eval(js.replace(/\\bundefined\\b/g, \"false\")); }.call(context);\n}\n\nfunction check(pre:string, before:any, after:any) {\n    let padSize: any = process.env.ABC_DEBUG_PAD_SIZE || 20;\n\n    if ((before === undefined && after !== undefined) || (before !== undefined && after === undefined)) {\n        console.log(`[${padString(pre,padSize)}\\t|\\t${padString(JSON.stringify(before),padSize)}\\t>>>\\t${padString(JSON.stringify(after), padSize)}]`);\n        return;\n    }\n\n    if (after == undefined || after == null) {\n        return;\n    }\n\n    for (let key of Object.keys(after)) {\n        if (typeof after[key] === \"object\") {\n            check(pre + \".\" +  key, before[key], after[key]);\n        } else {\n            if (before[key] !== after[key]) {\n                if (pre.length > 0) {\n                    console.log(`[${padString(pre + \".\" + key, padSize)}\\t|\\t${padString(before[key], padSize)}\\t>>>\\t${padString(after[key], padSize)}]`);\n                } else {\n                    console.log(`[${padString(key, padSize)}\\t|\\t${padString(before[key], padSize)}\\t>>>\\t${padString(after[key], padSize)}]`);\n                }\n            }\n        }\n    }\n    return;\n}\n\nfunction getStateDiffs(before:any, after:any): StateDiffItem[] {\n    let stateDiffs: StateDiffItem[] = [];\n    // check removed items\n    for (let key of Object.keys(before)) {\n        if (before[key] && after[key] === undefined) {\n            stateDiffs.push({\n                itemName: key,\n                beforeValue: JSON.parse(JSON.stringify(before[key])),\n                afterValue: undefined\n            });\n        }\n    }\n\n    for (let key of Object.keys(after)) {\n        if (JSON.stringify(after[key]) != JSON.stringify(before[key])) {\n            stateDiffs.push({\n                itemName: key,\n                beforeValue: before[key]? JSON.parse(JSON.stringify(before[key])) : undefined,\n                afterValue: JSON.parse(JSON.stringify(after[key]))\n            });\n        }\n    }\n\n    return stateDiffs;\n}\n\nfunction padString(incomingText: string, length: number) {\n    let text: string = String(incomingText);\n\n    let result: string = text;\n    if (text.length < length) {\n        for (let i = 0 ; i <= length - text.length; i ++) {\n            result += \" \";\n        }\n    } else {\n        result = \"~\" + result.substring(text.length - length);\n    }\n    return result;\n}\n"]}
{"version":3,"file":"AudioItemUtil.js","sourceRoot":"","sources":["../../driver/AudioItemUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { SceneAudioItem, AudioItem, AlexaAudioType, AudioBlendOption } from '../driver/driverEntity';\nimport { AudioMixer, AudioFileAccessor, AudioMixSetting, TrimOption, SequenceType, MixMode, PollyUtil, S3AudioAccessor } from '@alexa-games/sfb-polly';\nimport { DriverPollyConfig, ACEDriver, Narrator } from './driver';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport class AudioItemUtil {\n    private generatedFiles: {[key:string]: boolean;};\n\n    constructor() {\n        this.generatedFiles = {};\n    }\n\n    /**\n     * Combines consecutive polly audio items in a sequence with same settings into one item.\n     *\n     * @param _sceneAudio audio item sequence to perform condensing on\n     * @param keepScenesSeperate if true polly items the merge is performed per scene; otherwise combine all valid consecutive polly items across all scenes.\n     */\n    public condensePollyItem(_sceneAudio: SceneAudioItem[], keepScenesSeperate?: boolean): SceneAudioItem[] {\n        let sceneAudio: SceneAudioItem[] = JSON.parse(JSON.stringify(_sceneAudio));\n        let optimizedStageSpeechSequence: SceneAudioItem[] = [];\n        // combine back-to-back polly items sharing same voice property into one.\n        let tempItem: SceneAudioItem | undefined = undefined;\n        let buildingItem: AudioItem | undefined = undefined;\n        let tempPushed: boolean = false;\n        let currentlyProcessingSceneID: string | undefined = undefined;\n\n        for (let sceneItem of sceneAudio) {\n            const processingNewSceneId = (currentlyProcessingSceneID !== undefined) && \n                (currentlyProcessingSceneID !== sceneItem.sceneID);\n\n            currentlyProcessingSceneID = sceneItem.sceneID;\n\n            if (sceneItem.background.length > 0 || (keepScenesSeperate && processingNewSceneId)) {\n                if (tempItem) {\n                    if (buildingItem) {\n                        tempItem.foreground.push(buildingItem);\n                        buildingItem = undefined;\n                    }\n\n                    tempPushed = true;\n                    optimizedStageSpeechSequence.push(tempItem);\n                    tempItem = undefined;\n                }\n\n                optimizedStageSpeechSequence.push(sceneItem);\n                continue;\n            }\n\n            for (let foregroundItem of sceneItem.foreground) {\n                if (!tempItem) {\n                    tempPushed = false;\n                    tempItem = {\n                        sceneID: sceneItem.sceneID,\n                        foreground: [],\n                        background: []\n                    };\n                }\n\n                if (foregroundItem.type === AlexaAudioType.POLLY) {\n                    if (buildingItem) {\n                        if (this.isEqualSetting(foregroundItem, buildingItem)) {\n                            buildingItem.content += ` ${foregroundItem.content}`;\n                        } else {\n                            tempItem.foreground.push(buildingItem);\n\n                            buildingItem = foregroundItem;\n                        }\n                    } else {\n                        buildingItem = foregroundItem;\n                    }\n                } else {\n                    if (buildingItem) {\n                        tempItem.foreground.push(buildingItem);\n                    }\n                    tempItem.foreground.push(foregroundItem);\n                    buildingItem = undefined;\n                }\n            }\n        }\n\n        if (buildingItem && tempItem) {\n            tempItem.foreground.push(buildingItem);\n        }\n\n\n        if (!tempPushed && tempItem) {\n            optimizedStageSpeechSequence.push(tempItem);\n        }\n\n        return optimizedStageSpeechSequence;\n    }\n\n    /**\n     * Given two AudioItems, determines if the mix/modify setting for the audio item is identifcal.\n     */\n    public isEqualSetting(subjectAudio: AudioItem, comparingAudio: AudioItem): boolean {\n        const isSameType = subjectAudio.type === comparingAudio.type;\n        const hasSameOptions = JSON.stringify(subjectAudio.options) === JSON.stringify(comparingAudio.options);\n\n        return isSameType && hasSameOptions;        \n    }\n\n    /**\n     * Process the given scene audio items, and generate / mix resulting audio files.\n     * Returns resulting scene audio items.\n     * \n     * @param sceneAudioItemList \n     */\n    public async proccessSceneAudioItems(sceneAudioItemList: SceneAudioItem[], pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor): Promise<SceneAudioItem[]> {\n        const result: Promise<SceneAudioItem>[] = [];\n    \n        for (let sceneAudio of sceneAudioItemList) {\n            const sceneAudioPromise = new Promise<SceneAudioItem>(async (resolve, reject) => {\n                try {\n                    const processes: Promise<AudioItem>[] = [];\n\n                    for (let foregroundAudio of sceneAudio.foreground) {\n                        processes.push(this.processAudioItem(foregroundAudio, pollyConfig, audioAccessor));\n                    }\n    \n                    const processedForeground: AudioItem[] = (await Promise.all(processes));\n    \n                    let primaryBackgroundAudioItem : AudioItem | undefined = undefined;\n    \n                    for (let backgroundAudio of sceneAudio.background) {\n                        if (backgroundAudio.type === AlexaAudioType.AUDIO) {\n                            // TODO: Loop through and make a whole audio builder out of all the background items\n                            // TODO: Right now it only supports one background audio item\n                            primaryBackgroundAudioItem = backgroundAudio;\n                        }\n                    }\n    \n                    let fullSceneAudio: AudioItem[] = processedForeground;\n    \n                    if(primaryBackgroundAudioItem && pollyConfig.enabled) {\n                        if (!ACEDriver.testing || pollyConfig.enabledInPreview) {\n                            if(processedForeground.length > 0) {\n                                const foregroundAudio: AudioItem = await this.mixdownAudioItems(processedForeground, pollyConfig, audioAccessor, MixMode.CONCATENATE);\n                                \n                                const util = new PollyUtil(audioAccessor);\n                                const foregroundName = path.basename(foregroundAudio.content);\n                                const foregroundPath = path.resolve(pollyConfig.workingDir, foregroundName);\n\n                                if (!fs.existsSync(foregroundPath)) {\n                                    await audioAccessor.downloadAudio(foregroundAudio.content, pollyConfig.workingDir);\n                                }\n\n                                const backgroundDelay = primaryBackgroundAudioItem.delay;\n                                \n                                if(backgroundDelay < 0) {\n                                    foregroundAudio.delay += Math.abs(backgroundDelay);\n                                    primaryBackgroundAudioItem.delay = 0;\n                                }\n\n                                const foregroundDurationInMillis = await util.calculateMP3Duration(foregroundPath) + foregroundAudio.delay;\n\n                                const combinedAudio = await this.mixdownAudioItems([\n                                    foregroundAudio,\n                                    primaryBackgroundAudioItem\n                                ], pollyConfig, audioAccessor, MixMode.LAYER, foregroundDurationInMillis);\n    \n                                fullSceneAudio = [combinedAudio];\n                            }\n                        }\n                    }\n    \n                    resolve({\n                        foreground: fullSceneAudio,\n                        background: [],\n                        sceneID: sceneAudio.sceneID\n                    });\n                } catch(err) {\n                    reject(err);\n                }\n            });\n            result.push(sceneAudioPromise);\n        }\n\n        return await Promise.all(result);\n    }\n\n    /**\n     * Appropriately process and generated a modified audio if needed.\n     * Returns the modified AudioItem.\n     * \n     * @param audioItem audio item to process\n     * @param pollyConfig \n     * @param audioAccessor\n     * @returns [[AudioItem]] of the resulting modified audio.\n     */\n    public async processAudioItem(audioItem: AudioItem, pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor): Promise<AudioItem> {\n        if (!ACEDriver.testing || pollyConfig.enabledInPreview) {\n            if (audioItem.type === AlexaAudioType.AUDIO) {\n                // If values are defaults, then don't change the audio file at all and keep it at it's original quality\n                if(!pollyConfig.enabled || (audioItem.delay == 0 && audioItem.volume == 1.0) ) {\n                    return audioItem;\n                } else {\n                    const mixedAudio = await this.mixdownAudioItems([audioItem], pollyConfig, audioAccessor, MixMode.LAYER);\n                    return mixedAudio;\n                }\n            } else if (audioItem.type === AlexaAudioType.POLLY) {\n                if(audioItem.options) {\n                    if(pollyConfig.enabled) {                                        \n                        const mixedAudio = await this.mixdownAudioItems([audioItem], pollyConfig, audioAccessor, MixMode.LAYER);\n                        return mixedAudio;\n                    }\n                }\n            } else {\n                if(ACEDriver.testing && pollyConfig.enabledInPreview) {\n                    const previewPollyVoice = pollyConfig.previewPollyVoice || 'Joanna';\n\n                    const simulatorDefaultSSML = `<voice name='${previewPollyVoice}'>${audioItem.content}</voice>`;\n\n                    const textAudioItem = this.buildAudioItemsFromSSML(simulatorDefaultSSML);\n\n                    const mixedAudioItem = await this.mixdownAudioItems(textAudioItem, pollyConfig, audioAccessor, MixMode.LAYER);\n                    return mixedAudioItem;\n                }\n            }\n        }\n\n        return audioItem;            \n    }\n\n    /**\n     * Get total count of AudioItems of type [[AlexaAudioType.AUDIO]] in the given SceneAudioItem list.\n     */\n    public getAudioCount(sceneAudioList: SceneAudioItem[]): number {\n        const audioCount = sceneAudioList.map((scene): number => {\n            if (scene.foreground.length > 0) {\n                return scene.foreground\n                    .map((item): number => {return item.type === AlexaAudioType.AUDIO ? 1: 0})\n                    .reduce((prev, curr, i, arr) => {\n                        return prev + curr;\n                    });\n            } else {\n                return 0;\n            }\n            \n        })\n        .reduce((prev, curr, i, arr) => {return prev + curr});\n\n        return audioCount\n    }\n    /**\n     * Combine consecutive audio items to achieve the number of audio items of type [[AlexaAudioType.AUDIO]] to the given target.\n     *\n     * @param upperItemLimit maximum number of audio files\n     * @param pollyConfig [[@alexa-games/sfb-polly/DriverPollyConfig]] SFB polly configuration key value map.\n     * @param audioAccessor [[@alexa-games/sfb-polly/AudioFileAccessor]] audio file accessor used for downloading, and uploading audio files.\n     * @param targetAudioCount number of audio items of type [[AlexaAudioType.AUDIO]] to target for the result.\n     * @returns list of resulting audio items.\n     */\n    public async combineConsecutiveAudioItems(sceneAudioItemList: SceneAudioItem[], pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor, targetAudioCount: number): Promise<AudioItem[]> {\n        const result: Promise<AudioItem>[] = [];\n\n        const totalAudioCount: number = this.getAudioCount(sceneAudioItemList);\n        const reductionTarget = totalAudioCount - targetAudioCount;\n        let reducedCount: number = 0;\n\n        let mixGroup: AudioItem[] = [];\n\n        for (let scene of sceneAudioItemList) {\n            for (let audioItem of scene.foreground) {\n                if (audioItem.type === AlexaAudioType.AUDIO && reducedCount < reductionTarget) {\n                    mixGroup.push(audioItem);\n\n                    if (mixGroup.length > 1) {\n                        reducedCount ++;\n                    }\n\n                    continue;\n                }\n                \n                if (mixGroup.length > 1) {\n                    const copyGroup = JSON.parse(JSON.stringify(mixGroup));\n\n                    const concatPromise = new Promise<AudioItem> (async (resolve) => {\n                        const concatenatedAudio = await this.mixdownAudioItems(copyGroup, pollyConfig, audioAccessor, MixMode.CONCATENATE);\n                        resolve(concatenatedAudio);\n                    });\n\n                    mixGroup = [];\n                    result.push(concatPromise);\n                } \n\n                result.push(new Promise<AudioItem>((resolve) => {resolve(audioItem)}));\n            }\n        }\n\n        if (mixGroup.length > 0) {\n            const copyGroup = JSON.parse(JSON.stringify(mixGroup));\n            const concatPromise = new Promise<AudioItem> (async (resolve, reject) => {\n                try {\n                    const concatenatedAudio = await this.mixdownAudioItems(copyGroup, pollyConfig, audioAccessor, MixMode.CONCATENATE);\n                    resolve(concatenatedAudio);    \n                } catch (err) {\n                    reject(err);\n                }\n            });\n\n            result.push(concatPromise);\n        }\n\n        return await Promise.all(result);\n    }\n\n    /**\n     * Mixdown collection of audio items into a single audio, then return a resulting AudioItem for the resulting audio file.\n     *\n     * @param audioItems audio items to process/readjust/edit\n     * @param pollyConfig polly configuration defining how [[AlexaAudioType.POLLY]] should be handled\n     * @param audioAccessor accessor for downloading, uploading, generating url for denoted audio files.\n     * @returns Mixedown AudioItem\n     */\n    public async mixdownAudioItems(audioItems: AudioItem[], pollyConfig: DriverPollyConfig, audioAccessor: AudioFileAccessor, mixMode: MixMode, trimSpotInMillis: number = 0): Promise<AudioItem> {\n        const audioBuilder = new AudioMixer(pollyConfig.FFMPEGLocation, pollyConfig.workingDir, audioAccessor);\n\n        for (let audio of audioItems) {\n            const filename = path.basename(audio.content);\n            \n            if (audio.type == AlexaAudioType.AUDIO) {\n                audioBuilder.addAudio({\n                    sequenceType: SequenceType.SFX,\n                    filename: filename,\n                    url: audio.content,\n                    delayMs: audio.delay,\n                    volume: audio.volume,\n                    fadeInDuration: audio.options && audio.options.fadeIn? parseInt(audio.options.fadeIn)/1000: 0,\n                    fadeOutDuration: audio.options && audio.options.fadeOut ? parseInt(audio.options.fadeOut)/1000 : 0,\n                    fadeOutTime: audio.options && audio.options.fadeOut ? (trimSpotInMillis - parseInt(audio.options.fadeOut))/1000 : 0,\n                });\n            } else if (audio.type == AlexaAudioType.POLLY) {\n                if (!audio.options) {\n                    throw new Error(\"SFBDriver: Polly is missing required properties 'voice'\");\n                }\n    \n                if (audio.content && audio.content.trim().length > 0) {\n                    const pollyAudioPath = await audioBuilder.addPollyItem({\n                        name: audio.options.voice,\n                        text: audio.content,\n                        delayMs: audio.delay,\n                        volume: \"1.0\",\n                        rate: audio.options.rate,\n                        pitch: audio.options.pitch,\n                        engine: audio.options.engine\n                    });\n\n                    this.generatedFiles[pollyAudioPath] = true;\n                }\n            }\n        }\n        \n        const mixSetting: AudioMixSetting = {\n            trim: TrimOption.FIRST,\n            mode: mixMode\n        }\n\n        if (audioItems[0].options && audioItems[0].options.blend === AudioBlendOption.LONGEST) {\n            mixSetting.trim = TrimOption.LONGEST;\n        }\n\n        const mixedAudioPath = await audioBuilder.mix(mixSetting);\n\n        const mixedAudioURL = await audioAccessor.getAudioURL(path.basename(mixedAudioPath));\n\n        this.generatedFiles[mixedAudioPath] = true;        \n\n        return {\n            delay: 0,\n            type: AlexaAudioType.AUDIO,\n            content: pollyConfig.dontUploadToS3? mixedAudioPath: mixedAudioURL,\n            volume: 1.0\n        }\n    }\n\n    /**\n     * Given a string of ssml (supported with voice, audio tags), create an array of Audio Items.\n     * @param ssml string of ssml text\n     */\n    public buildAudioItemsFromSSML(ssml: string, defaultNarrator?: Narrator): AudioItem[] {\n        let dialogue: string = ssml.trim();\n        \n        let partitioningRegex: RegExp = /(<audio[ \\t]+?src=[\"'][^><]+?[\"'][ \\t]*?\\/>)|(<voice[ \\t]+?.+?<\\/voice>)|([\\s\\S]+?)(?=(?:<audio[ \\t]+?src=[\"'][^><]+?[\"'][ \\t]*?\\/>)|(?:<voice[ \\t]+?.+?<\\/voice>)|$)/g;\n    \n        let partitionMatch: string[] | null = partitioningRegex.exec(dialogue);\n    \n        let audioItems: AudioItem[] = [];\n        while (partitionMatch != null) {\n            \n            if (partitionMatch[1] && partitionMatch[1].trim().length > 0) {\n                let audioTagParse: RegExp = /\\b(src|volume|delay|blend)=[\\\"']([\\S]+?)[\\\"']/g;\n    \n                let audioTagText: string = partitionMatch[1];\n                let audioTagMatch: any = audioTagParse.exec(audioTagText);\n    \n                let volume: number = 1.0;\n                let delay: number = 0;\n                let content: string = \"\";\n                let blendOption: string = AudioBlendOption.TRIM;\n                while (audioTagMatch != null) {\n\n                    if (!audioTagMatch[2] || audioTagMatch[2].trim().length <= 0) {\n                        // skip for no attribute value\n                    } else if (audioTagMatch[1].trim() == \"src\") {\n                        content = audioTagMatch[2]\n                    } else if (audioTagMatch[1].trim() == \"volume\") {\n                        volume = parseFloat(audioTagMatch[2]);\n                    } else if (audioTagMatch[1].trim() == \"delay\") {\n                        delay = parseInt(audioTagMatch[2]);\n                    } else if (audioTagMatch[1].trim() == \"blend\") {\n                        blendOption = audioTagMatch[2];\n                    }\n\n                    audioTagMatch = audioTagParse.exec(audioTagText);\n                }\n    \n                audioItems.push({\n                    type: AlexaAudioType.AUDIO,\n                    content: content,\n                    volume: volume,\n                    delay: delay,\n                    options: {\n                        blend: blendOption\n                    }\n                });\n            } else if (partitionMatch[2] && partitionMatch[2].trim().length > 0) {   \n                const pollyTagText: string = partitionMatch[2];\n                const contentMatch: any = /<voice([\\s\\S]+?)>([\\s\\S]*?)<\\/voice>/g.exec(pollyTagText);\n\n                const voiceHeader: string = contentMatch[1];\n                const content: string = contentMatch[2];\n\n                let pollyTagParse: RegExp = /(name|volume|delay|pitch|rate|engine)=[\\\"']([\\S]+?)[\\\"']/g;\n                let pollyTagMatch: any = pollyTagParse.exec(voiceHeader);\n    \n                let name: string = \"\";\n                let volume: number = 1.0;\n                let delay: number = 0;\n                let rate: string = \"\";\n                let pitch: string = \"\";\n                let engine: string = \"\";\n                while (pollyTagMatch != null) {\n                    if (!pollyTagMatch[2] || pollyTagMatch[2].trim().length <= 0) {\n                        // skip for no attribute value\n                    } else if (pollyTagMatch[1].trim() == \"name\") {\n                        name = pollyTagMatch[2];\n                    } else if (pollyTagMatch[1].trim() == \"volume\") {\n                        volume = parseFloat(pollyTagMatch[2]);\n                    } else if (pollyTagMatch[1].trim() == \"delay\") {\n                        delay = parseInt(pollyTagMatch[2]);\n                    } else if (pollyTagMatch[1].trim() == \"pitch\") {\n                        pitch = pollyTagMatch[2];\n                    } else if (pollyTagMatch[1].trim() == \"rate\") {\n                        rate = pollyTagMatch[2];\n                    } else if (pollyTagMatch[1].trim() == \"engine\") {\n                        engine = pollyTagMatch[2];\n                    }\n    \n                    pollyTagMatch = pollyTagParse.exec(voiceHeader);\n                }\n        \n                audioItems.push({\n                    type: AlexaAudioType.POLLY,\n                    content: content,\n                    volume: volume,\n                    delay: delay,\n                    options: {\n                        pitch: pitch,\n                        rate: rate,\n                        voice: name,\n                        engine: engine\n                    }\n                });\n            } else if (defaultNarrator) {\n                if (partitionMatch[3].trim().length > 0) {\n                    audioItems.push({\n                        type: AlexaAudioType.POLLY,\n                        content: partitionMatch[3],\n                        volume: parseFloat(defaultNarrator.volume),\n                        delay: 0,\n                        options: {\n                            pitch: defaultNarrator.pitch,\n                            rate: defaultNarrator.rate,\n                            voice: defaultNarrator.name,\n                            engine: defaultNarrator.engine || \"\"\n                        }\n                    });\n                }\n            } else {\n                if (partitionMatch[3].trim().length > 0) {\n                    audioItems.push({\n                        type: AlexaAudioType.TEXT,\n                        content: partitionMatch[3],\n                        volume: 1.0,\n                        delay: 0\n                    });\n                }\n            }\n    \n            partitionMatch = partitioningRegex.exec(dialogue);\n        }\n    \n        return audioItems;\n    }\n\n    public generateSSMLText(sceneAudioItemList: SceneAudioItem[], pollyConfig: DriverPollyConfig): string {\n        let finalSSML : string = \"\";\n\n        for (let audioItem of sceneAudioItemList) {\n            for (let foregroundAudio of audioItem.foreground) {\n                let ssml = \"\";\n\n                // Build the foreground audio up into a single ssml tag\n                if (!ACEDriver.testing || pollyConfig.enabledInPreview) {\n                    if (foregroundAudio.type === AlexaAudioType.AUDIO) {\n                        ssml = `<audio src='${foregroundAudio.content}' />`;    \n                    } else if (foregroundAudio.type === AlexaAudioType.POLLY) {\n                        if(foregroundAudio.options) {\n                            const voiceOpenTag: string = `<voice name='${foregroundAudio.options.voice}'>`;\n                            const voiceCloseTag: string = `</voice>`;\n\n                            const hasPitchChange = !!(foregroundAudio.options.pitch && foregroundAudio.options.pitch.length > 0 && foregroundAudio.options.pitch !== \"+0%\" && foregroundAudio.options.pitch !== \"-0%\");\n                            const hasRateChange = !!(foregroundAudio.options.rate && foregroundAudio.options.rate.length > 0 && foregroundAudio.options.rate !== \"100%\");\n                            const hasVolumeChange = !!(foregroundAudio.options.volume && foregroundAudio.options.volume.length > 0 && foregroundAudio.options.volume.trim() !== \"1.0\");\n\n                            let prosodyOpenTag: string = \"\";\n                            let prosodyCloseTag: string = \"\";\n\n                            if (hasPitchChange || hasRateChange || hasVolumeChange) {\n                                let prosodyOptions = \"\";\n                                if (hasPitchChange) {\n                                    prosodyOptions += `pitch='${foregroundAudio.options.pitch}'`;\n                                }\n\n                                if (hasRateChange) {\n                                    prosodyOptions += ` rate='${foregroundAudio.options.rate}'`;\n                                }\n\n                                if (hasVolumeChange) {\n                                    prosodyOptions += ` volume='${foregroundAudio.options.volume}'`;\n                                }\n                                \n                                prosodyOpenTag += `<prosody ${prosodyOptions}>`;\n                                prosodyCloseTag = `</prosody>`;\n                            }\n                            \n                            ssml = `${voiceOpenTag}${prosodyOpenTag}${foregroundAudio.content}${prosodyCloseTag}${voiceCloseTag}`;\n                        } else {\n                            ssml = ` ${foregroundAudio.content}`;\n                        }\n                    } else {\n                        ssml = ` ${foregroundAudio.content}`;\n                    }\n                } else {\n                    // We are testing, so just return something that will not be valid ssml\n                    if (foregroundAudio.type === AlexaAudioType.AUDIO) {\n                        ssml = `<audio src='${foregroundAudio.content}'/>`;\n                    } else if (foregroundAudio.type === AlexaAudioType.POLLY) {\n                        if(foregroundAudio.options) {\n                            ssml = `<voice name='${foregroundAudio.options.voice}'>${foregroundAudio.content}</voice>`;\n                        } else {\n                            ssml = `(POLLY:name=ERROR_NO_POLLY_NAME_SET text=${foregroundAudio.content} delayMs=${foregroundAudio.delay} volume=${foregroundAudio.volume})`;\n                        }\n                    } else {\n                        ssml = ` ${foregroundAudio.content}`;\n                    }\n                }\n\n                finalSSML += ssml;\n            }\n        }\n\n        return finalSSML;\n    }\n\n    /**\n\t * Upload all files generated by this instance of AudioMixer to a cache/storage using the uploadAudio() of its [[AudioFileAccessor]].\n\t */\n\tpublic async uploadGeneratedFiles(audioAccessor: AudioFileAccessor, workingDir: string): Promise<void> {\n\t\tif (Object.keys(this.generatedFiles).length > 0) { \n            const uploadTasks = Object.keys(this.generatedFiles)\n                .filter((filePath) => fs.existsSync(filePath))\n                .map((filePath: string) => {\n                    return audioAccessor.uploadAudio(path.basename(filePath), workingDir);\n                });\n\t\n\t\t\tawait Promise.all(uploadTasks);\n\t\t}\n\t}\n}"]}
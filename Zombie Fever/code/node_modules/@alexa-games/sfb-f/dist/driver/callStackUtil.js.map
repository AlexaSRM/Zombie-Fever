{"version":3,"file":"callStackUtil.js","sourceRoot":"","sources":["../../driver/callStackUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import {StoryAccessor} from '../story/storyAccessor';\nimport {Instruction} from '../story/storyMetadata';\n\ninterface Address {\n    version: number;\n    sequence: {\n        type: string;\n        source: string;\n        line: number;\n        option?: string;\n    }[];\n}\n\n/**\n * Story's call stack manager for generating addresses, and accessing instructions in the story based on the address.\n */\nexport class CallStackUtil {\n    readonly PUBLISHED_VERSION: number = 1;\n\n    constructor(private story: StoryAccessor) {\n    }\n\n    public getChoiceAddress(originAddress: string, lineNumber: number): string {\n        const address = this.deserialize(originAddress);\n\n        address.sequence.push({\n            line: lineNumber,\n            source: address.sequence[address.sequence.length - 1].source,\n            type: \"choice\"\n        });\n\n        return this.serialize(address);\n    }\n\n    public getConditionAddress(originAddress: string, lineNumber: number): string {\n        const address = this.deserialize(originAddress);\n\n        address.sequence.push({\n            line: lineNumber,\n            source: address.sequence[address.sequence.length - 1].source,\n            type: \"condition\"\n        });\n\n        return this.serialize(address);\n    }\n\n    public getSceneAddress(sceneID: string, lineNumber: number): string {\n        const address: Address = {\n            version: this.PUBLISHED_VERSION,\n            sequence: [\n                {\n                    type: \"scene\",\n                    source: sceneID,\n                    line: lineNumber\n                }\n            ]\n        }\n\n        return this.serialize(address);\n    }\n\n    public getReturnAddress(originAddress: string, lineNumber: number): string {\n        const address = this.deserialize(originAddress);\n\n        address.sequence.push({\n            line: lineNumber,\n            source: address.sequence[address.sequence.length - 1].source,\n            type: \"jump\"\n        });\n\n        return this.serialize(address);\n    }\n\n    public getSourceScene(address: string): string {\n        if (this.isNewCallStack(address)) {\n            const addressStructure = this.deserialize(address);\n\n            return addressStructure.sequence[addressStructure.sequence.length - 1].source;\n        } else {\n            return address.split(\":\")[0];\n        }\n    }\n\n    private isNewCallStack(address: string): boolean {\n        try {\n            const addressStructure = address.split(\"@\");\n\n            return addressStructure && parseInt(addressStructure[0]) <= this.PUBLISHED_VERSION;\n        } catch(err) {\n            return false;\n        }\n    }\n\n    private deserialize(addressString: string): Address {        \n        const result: Address = {\n            version: this.PUBLISHED_VERSION,\n            sequence: [\n\n            ]\n        };\n\n        if (this.isNewCallStack(addressString)) {\n            const sequencePre = addressString.split(\"@\");\n\n            const version = parseInt(sequencePre[0]);\n\n            result.version = version;\n            \n            for (let i = 1; i < sequencePre.length; i++) {\n                const sequenceProps = sequencePre[i].split(\"::\");\n\n                result.sequence.push({\n                    source: sequenceProps[0],\n                    type: sequenceProps[1],\n                    line: parseInt(sequenceProps[2]),\n                    option: sequenceProps[3]\n                });\n            }\n            \n            \n            result;\n        } else {\n            result.sequence = [\n                {\n                    source: addressString.split(\"::\")[0],\n                    line: -1,\n                    type: \"legacy\",\n                    option: addressString\n                }\n            ];\n        }\n\n        return result;\n    }\n\n    private serialize(address: Address): string {\n        let serializedString = String(address.version);\n\n        for(let sequenceItem of address.sequence) {\n            let sequenceItemSerialized = `@${sequenceItem.source}::${sequenceItem.type}::${sequenceItem.line}::`;\n            \n            if(sequenceItem.option) {\n                sequenceItemSerialized += sequenceItem.option;\n            }    \n            \n            serializedString += sequenceItemSerialized\n        }\n\n        return serializedString;\n    }\n    \n    public getInstructions(address: string, storyState: any): Instruction[] {\n        const addressStructure = this.deserialize(address);\n        let instructions: Instruction[] = [];\n\n        for (let addressItem of addressStructure.sequence) {\n            \n            switch(addressItem.type) {\n            case \"scene\": {\n                const sceneInstructions = this.story.getSceneInstructions(addressItem.source);\n\n                instructions = this.getInstructionSection(addressItem.line, sceneInstructions);\n                break;\n            }\n            case \"jump\": {\n                instructions = this.getInstructionSection(addressItem.line + 1, instructions);\n\n                break;\n            }\n            case \"condition\": {\n                const section = this.getInstructionSection(addressItem.line, instructions);\n\n                const conditionalInstruction = section[0].parameters.directions;\n\n                instructions = (conditionalInstruction || []).concat(this.getInstructionSection(addressItem.line + 1, instructions));\n                break;\n            }\n            case \"choice\": {\n                const section = this.getInstructionSection(addressItem.line, instructions);\n\n                const choiceInstruction = section[0].parameters.directions;\n\n                instructions = choiceInstruction || [];\n                break;\n            }\n            case \"legacy\": {\n                if (addressItem.option && storyState.system_instruction_mem && storyState.system_instruction_mem[addressItem.option]) {\n                    // For backward compatibility, needs to stay\n                    instructions = storyState.system_instruction_mem[addressItem.option];\n                }\n            }\n            }\n        }\n\n        return instructions;\n    }\n\n    public getInstructionSection(lineNumber: number, instructions: Instruction[]): Instruction[] {\n        if (lineNumber >= instructions.length) {\n            return [];\n        } else if (lineNumber > 0) {\n            return instructions.slice(lineNumber);\n        } else {\n            return instructions;\n        }\n    }\n\n    public callStackExists(state: any) {\n        return state.system_call_stack && state.system_call_stack.length > 0;\n    }\n\n    public addressInStack(state: any, address: string) {\n        return state.system_call_stack && state.system_call_stack.includes(address);\n    }\n}"]}
export declare enum SegmentType {
    /**
     * Stuff in between other types of segments
     */
    PlainText = 0,
    /**
     * Replaced with the value of a variable
     */
    Variable = 1,
    /**
     * Replaced with the value of a snippet
     */
    Snippet = 2,
    /**
     * An SSML/XML style element
     */
    Element = 3,
    /**
     * Segment has a open bracket, but no closing bracket.
     */
    Error = 4
}
export interface Segment {
    /**
     * Value of the segment.
     */
    value: string;
    /**
     * Segment type
     */
    type: SegmentType;
    /**
     * Original segment value. This will be the same as value for plain text and Element, but will include brackets
     * for Variable and Snippet.
     */
    original: string;
}
export interface SegmenterConfig {
    /**
     * Bracket pair that define a segment. For example: {}, or [], or <>
     */
    brackets: string;
    /**
     * Type of segment defined by the specified bracket pair
     */
    type: SegmentType;
    /**
     * Whether to keep the brackets on the resulting value. True will preserve the
     * brackets, false will remove them.
     */
    preserve: boolean;
}
export declare class Segmenter {
    private readonly config;
    private readonly openBrackets;
    private readonly closeBrackets;
    constructor(config: SegmenterConfig[]);
    /**
     * Returns an array of segments categorized by type.
     * @param value String to segment
     */
    parse(value: string): Segment[];
    private getSegmentTypeFromCharacter;
    private makeSegment;
}
export declare class SegmenterBuilder {
    static getVariableSegmenter(): Segmenter;
    static getAllSegmenter(): Segmenter;
}

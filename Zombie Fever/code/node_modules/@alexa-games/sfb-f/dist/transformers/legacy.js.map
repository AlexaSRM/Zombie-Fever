{"version":3,"file":"legacy.js","sourceRoot":"","sources":["../../transformers/legacy.ts"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * Leaving the original function here for the time being.  Unit tests are calling it to demonstrate \n * compatibility. \n */\nexport function substituteSlotValues(line : string, eventParams : any, isCondition : boolean = true) : any {\n    // Now substitute in all the {variable1}, {variable2}, etc. fields\n    let regex = /\\{([^{}]*?)\\}/g;\n\n    let matches = line.match(regex);\n    \n    let allSlotsFilled : boolean = true;\n\n    while(matches) {\n        let slotsToFill : any = {};\n\n        // Find all the replacement slot names\n        for(const match of matches) {\n            slotsToFill[match] = 1;\n        }\n\n        let keys = Object.keys(slotsToFill);\n        \n        for(let keyOriginal of keys) {\n            // Remove the opening and closing { } signs and single quotes within the key\n            let key = keyOriginal.substr(1, keyOriginal.length - 2).replace(/\\'/g,\"\");\n\n            line = line.replace(new RegExp(\"\\\\{\" + keyOriginal.substr(1, keyOriginal.length - 2) + \"\\\\}\",\"g\"), \"{\" + key + \"}\");\n\n            if (key.split(\".\").length > 1 ) {\n                let splitKey:string[] = key.split(\".\");\n                let crawl:any = eventParams[splitKey[0].replace(/'/g, \"\")];\n                for (let i = 1; i < splitKey.length; i++) {\n\n                    if (crawl != undefined) {\n                        crawl = crawl[splitKey[i]];\n\n                        if(crawl != undefined && i == splitKey.length - 1) {\n                            let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                            let re = new RegExp(find, 'g');\n                    \n                            let value: any = crawl;\n        \n                            line = line.replace(re, value);\n                        } if (crawl == undefined) {\n                            let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                            let re = new RegExp(find, 'g');\n\n                            let value: any = crawl;\n\n                            line = line.replace(re, \"undefined\");\n                        }\n                    } else {\n                        let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                        let re = new RegExp(find, 'g');\n\n                        line = line.replace(re, \"false\");\n\n                        allSlotsFilled = true;\n                    }\n                }\n            } else {\n                if(eventParams[key.replace(/'/g, \"\")] != undefined) {\n                    let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                    let re = new RegExp(find, 'g');\n            \n                    let value: any = eventParams[key.replace(/'/g, \"\")];\n                    if (isNaN(value) && isCondition) {\n                        value =  \"'\" + value.replace(/'/g, \"\\\\'\") + \"'\";\n                    }\n\n                    line = line.replace(re, value);\n\n                } else {\n                    let find = \"\\\\{\" + key + \"\\\\}\";\t\t\t\n\n                    let re = new RegExp(find, 'g');\n\n                    line = line.replace(re, \"false\");\n\n                    allSlotsFilled = true;\n                }\n            }\n        }\t\t\n\n        matches = line.match(regex);\n    }\n\n    return { value: line, allSlotsFilled : allSlotsFilled};\n}\n"]}
import { VoiceModel } from "./languageModel";
import { StoryMetadataHelper } from './../importPlugins/storyMetadataHelper';
import { Instruction, SceneVariation } from './../story/storyMetadata';
import { LanguageModelSlot, LanguageModelValue } from './languageModel';
export interface IntentCategory {
    id: string;
    type: CategoryType;
    utterances: string[];
}
export declare enum CategoryType {
    INTENT = 0,
    CUSTOM_SLOT = 1,
    AUTO_SLOT = 2,
    BUILT_IN_INTENT = 3
}
export interface ModelBuildParameter {
    story: StoryMetadataHelper;
    locale: string;
    invocationName: string;
    customSlots: {
        [key: string]: string[] | LanguageModelValue[];
    };
    builtInIntents: {
        [key: string]: string[];
    };
}
export interface ModelBuilder {
    build(param: ModelBuildParameter): VoiceModel;
}
export declare class AlexaVoiceModelBuilder implements ModelBuilder {
    /**
     * Given a imported story structure for SFB, automatically generate an Alexa Interaction Model.
     */
    build(param: ModelBuildParameter): VoiceModel;
}
export declare class ModelBuilderHelper {
    static autoSlotCount: number;
    static autoIntentCount: number;
    static buildBuiltInSampleToIntentMap(intentToSamples: {
        [key: string]: string[];
    }): {
        [key: string]: string;
    };
    static isBuiltInIntent(intent: string): boolean;
    static isWildCardUtterance(utterance: string): boolean;
    /**
     * Given a SFB story metadata divide utterances based on the intent of the utterance.
     */
    static categorizeByIntent(story: StoryMetadataHelper, builtInIntents: {
        [key: string]: string;
    }): IntentCategory[];
    /**
     * Given the category list, construct a voice model object.
     */
    static buildVoiceModelFromCategory(categories: IntentCategory[], invocationName: string, customSlots: {
        [key: string]: (string | LanguageModelValue)[];
    }, builtInIntents: {
        [key: string]: string[];
    }): VoiceModel;
    static getCategoriesFromScene(utteranceToCategory: {
        [key: string]: IntentCategory;
    }, builtInIntents: {
        [key: string]: string;
    }, sceneContent: SceneVariation): IntentCategory[];
    static buildCategoriesForChoice(utterances: string[], usedIntent: {
        [key: string]: boolean;
    }, slotNameToType: {
        [key: string]: string;
    }, builtInIntentMap: {
        [key: string]: string;
    }, utteranceToCategory: {
        [key: string]: IntentCategory;
    }): IntentCategory[];
    static buildCategoriesFromUtteranceTyping(builtIns: string[], autoIntents: string[], autoSlots: string[], customSlots: string[], builtInIntentMap: {
        [key: string]: string;
    }, utteranceToCategory: {
        [key: string]: IntentCategory;
    }): IntentCategory[];
    /**
     * Split a list of utterances in by their utterance type.
     * Three utterances types are:
     * 1. Auto Intent
     * 2. Built In Intents
     * 3. Auto Slot
     * 4. Custom Slot
     */
    static splitUtteranceType(utterances: string[], builtInIntents: {
        [key: string]: string;
    }, registeredSlots: {
        [key: string]: string;
    }): {
        autoIntents: string[];
        builtInIntents: string[];
        autoSlots: string[];
        customSlots: string[];
    };
    /**
     * Build a map of { slot name : slot type } registered within the given list of scene instructions.
     */
    static buildSlotMap(instructions: Instruction[]): {
        [key: string]: string;
    };
    static standarizeSlottedUtterance(utterance: string, slotMap: {
        [key: string]: string;
    }): string;
    static hasUserDefinedSlots(utterance: string): boolean;
    static hasNumerics(utterance: string): boolean;
    static numberToAlphabetCounting(i: number): string;
    static getSlotsFromUtterances(utterances: string[]): LanguageModelSlot[];
    static convertSlotUtteranceForModel(utterances: string[]): string[];
    static registerCategoryToStory(story: StoryMetadataHelper, utteranceToCategory: {
        [key: string]: IntentCategory;
    }): void;
    static registerCategoryToInstruction(instruction: Instruction, utteranceToCategory: {
        [key: string]: IntentCategory;
    }): void;
    static registerCategoryToInstructions(instructions: Instruction[], utteranceToCategory: {
        [key: string]: IntentCategory;
    }): void;
}

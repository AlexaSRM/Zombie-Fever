{"version":3,"file":"languageModel.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/bakeUtilities/languageModel.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {LanguageModelBuilder, LanguageModelIntent, LanguageModelValue, LanguageModelSlot} from './../../../bakeUtilities/languageModel';\n\nimport { strict as assert } from 'assert';\n\nconst TEST_INVOCATION = \"test\";\n\ndescribe(\"Voice Model Builder Test\", function () {\n    it(\"Add Intent.\", async function () {\n        const builder = new LanguageModelBuilder(TEST_INVOCATION);\n        const addingIntent: LanguageModelIntent = {\n            name: \"TestIntent\",\n            samples: [\"utterance1\", \"utterance2\"]\n        }\n        builder.addIntent(addingIntent);\n        const result = builder.build();\n\n        assert.equal(result.languageModel.intents.length, 1, \"Number of intents in the model does not match the expected number.\");\n        assert.equal(result.languageModel.intents[0].name, addingIntent.name, \"Content of the intent added does not match the expected value.\");\n        assert.ok(addingIntent.samples);\n        if (addingIntent.samples && result.languageModel.intents[0].samples) {\n            assert.equal(result.languageModel.intents[0].samples.length, addingIntent.samples.length, \"Content of the intent added does not match the expected value.\");\n        }\n    });\n\n    it(\"Add Overlapping Intent.\", async function () {\n        const builder = new LanguageModelBuilder(TEST_INVOCATION);\n        const testIntent: LanguageModelIntent = {\n            name: \"TestIntent\",\n            samples: [\"utterance1\", \"utterance2\"]\n        }\n\n        const overlappingIntent: LanguageModelIntent = {\n            name: \"TestIntent\",\n            samples: [\"utterance2\", \"utterance3\"]\n        }\n\n        const otherIntent: LanguageModelIntent = {\n            name: \"TestIntent2\",\n            samples: [\"utterance1\", \"utterance2\"]\n        }\n        builder.addIntent(testIntent);\n        builder.addIntent(otherIntent);\n        builder.addIntent(overlappingIntent);\n\n        const result = builder.build();\n\n        assert.equal(result.languageModel.intents.length, 2, \"Number of intents in the model does not match the expected number.\");\n\n        let target: LanguageModelIntent | undefined = undefined;\n        for (let intent of result.languageModel.intents) {\n            if (intent.name === overlappingIntent.name) {\n                target = intent;\n                break;\n            }\n        }\n\n        if (target && target.samples) {\n            assert.equal(target.samples.length, 2);\n        } else {\n            assert.fail(\"Expected Intent was not found in the result.\");\n        }\n    });\n\n    it(\"Add Slot Type.\", async function () {\n        const testSlotType = \"TestSlot\";\n        const testSlotValues = [\"value1\", \"value2\"];\n\n        const builder = new LanguageModelBuilder(TEST_INVOCATION);\n\n        builder.addSlotValues(testSlotType, testSlotValues);\n        \n        const result = builder.build();\n\n        assert.ok(result.languageModel.types);\n        if (result.languageModel.types) {\n            assert.equal(result.languageModel.types[0].name, testSlotType);\n            assert.equal(result.languageModel.types[0].values.length, testSlotValues.length);\n        } else {\n            assert.fail(\"Expected slot types does not exist in the model.\");\n        }\n    });\n\n    it(\"Add Slot Values To Existing Slot Type.\", async function () {\n        const testSlotType = \"TestSlot\";\n        const testSlotValues = [\"value1\", \"value2\"];\n        \n        const builder = new LanguageModelBuilder(TEST_INVOCATION);\n        builder.addSlotType({\n            name: testSlotType,\n            values: []\n        });\n\n        builder.addSlotValues(testSlotType, testSlotValues);\n        \n        const result = builder.build();\n\n        assert.ok(result.languageModel.types);\n        if (result.languageModel.types) {\n            assert.equal(result.languageModel.types[0].name, testSlotType);\n            assert.equal(result.languageModel.types[0].values.length, testSlotValues.length);\n        } else {\n            assert.fail(\"Expected slot types does not exist in the model.\");\n        }\n    });\n\n    it(\"Replace Existing Slot Type.\", async function () {\n        const testSlotType = \"TestSlot\";\n        const testSlotValues: LanguageModelValue[] = [\n            {\n                name: {\n                    value: \"value1\"\n                }\n            },\n            {\n                name: {\n                    value: \"value2\"\n                }\n            }\n        ];\n        \n        const builder = new LanguageModelBuilder(TEST_INVOCATION);\n        builder.addSlotType({\n            name: testSlotType,\n            values: []\n        });\n\n        builder.addSlotType({\n            name: testSlotType,\n            values: testSlotValues\n        });\n        \n        const result = builder.build();\n\n        assert.ok(result.languageModel.types);\n        if (result.languageModel.types) {\n            assert.equal(result.languageModel.types[0].name, testSlotType);\n            assert.equal(result.languageModel.types[0].values.length, testSlotValues.length);\n        } else {\n            assert.fail(\"Expected slot types does not exist in the model.\");\n        }\n    });\n\n    it(\"Add Slot Sample to Intent As First Entry.\", async function () {\n        const testIntentName = \"TestIntent\";\n        const utterances = [\"value {one}\", \"value {two}\"];\n        const slots: LanguageModelSlot[] = [\n            {\n                name: \"one\",\n                type: \"SlotType1\"\n            },\n            {\n                name: \"two\",\n                type: \"SlotType2\"\n            }\n        ];\n        \n        const builder = new LanguageModelBuilder(TEST_INVOCATION);\n        builder.addSlotSamplesToIntent(testIntentName, utterances, slots);\n        const result = builder.build();\n\n\n        assert.equal(result.languageModel.intents.length, 1);\n        assert.equal(result.languageModel.intents[0].name, testIntentName);\n        if (result.languageModel.intents[0].slots) {\n            assert.equal(result.languageModel.intents[0].slots.length, slots.length);\n        } else {\n            assert.fail();\n        }\n\n        if (result.languageModel.intents[0].samples) {\n            assert.equal(result.languageModel.intents[0].samples.length, utterances.length);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"Add Slot Sample to Emmpty Intent.\", async function () {\n        const testIntentName = \"TestIntent\";\n        const utterances = [\"value {one}\", \"value {two}\"];\n        const slots: LanguageModelSlot[] = [\n            {\n                name: \"one\",\n                type: \"SlotType1\"\n            },\n            {\n                name: \"two\",\n                type: \"SlotType2\"\n            }\n        ];\n        \n        const builder = new LanguageModelBuilder(TEST_INVOCATION);\n        builder.addIntent({\n            name: testIntentName\n        });\n        \n        builder.addSlotSamplesToIntent(testIntentName, utterances, slots);\n        const result = builder.build();\n\n\n        assert.equal(result.languageModel.intents.length, 1);\n        assert.equal(result.languageModel.intents[0].name, testIntentName);\n        if (result.languageModel.intents[0].slots) {\n            assert.equal(result.languageModel.intents[0].slots.length, slots.length);\n        } else {\n            assert.fail();\n        }\n\n        if (result.languageModel.intents[0].samples) {\n            assert.equal(result.languageModel.intents[0].samples.length, utterances.length);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"isSlotValue() Test.\", async function () {\n        assert.ok(!LanguageModelBuilder.isSlotValue(\"some string\"), \"identified 'string' as LanguageModelValue.\");\n        assert.ok(!LanguageModelBuilder.isSlotValue({}), \"identified empty 'object' as LanguageModelValue.\");\n        assert.ok(!LanguageModelBuilder.isSlotValue([]), \"identified empty array as LanguageModelValue.\");\n        assert.ok(!LanguageModelBuilder.isSlotValue({\n            id: {},\n            name: {\n                value: \"value\"\n            }\n        }), \"property 'id' can't be an object.\");\n\n        assert.ok(!LanguageModelBuilder.isSlotValue({\n            id: \"string name\",\n            name: {\n            }\n        }), \"property 'name' cannot have empty object.\");\n\n        assert.ok(!LanguageModelBuilder.isSlotValue({\n            id: \"string name\",\n            name: \"test\"\n        }), \"property 'name' cannot be string.\");\n\n        assert.ok(LanguageModelBuilder.isSlotValue({\n            name: {\n                value: \"value\",\n                synonyms: [\"something\"]\n            }\n        }), \"property 'id' is optional\");\n\n        assert.ok(LanguageModelBuilder.isSlotValue({\n            id: \"string name\",\n            name: {\n                value: \"value\"\n            }\n        }), \"property 'synonyms' of 'name' is optional\");\n\n        assert.ok(LanguageModelBuilder.isSlotValue({\n            id: \"string name\",\n            name: {\n                value: \"value\",\n                synonyms: []\n            }\n        }), \"property 'synonyms' can be an empty array.\");\n\n        assert.ok(!LanguageModelBuilder.isSlotValue({\n            id: \"string name\",\n            name: {\n                value: \"value\",\n                synonyms: \"something\"\n            }\n        }), \"property 'synonyms' cannot be string.\");\n\n        assert.ok(!LanguageModelBuilder.isSlotValue({\n            id: \"string name\",\n            name: {\n                value: \"value\",\n                synonyms: [{}]\n            }\n        }), \"property 'synonyms' cannot have type 'object' as an item.\");\n\n        assert.ok(LanguageModelBuilder.isSlotValue({\n            id: \"string name\",\n            name: {\n                value: \"value\",\n                synonyms: [\"item\", \"item2\"]\n            }\n        }), \"property 'synonyms' should have type 'string' as an item.\");\n\n    });\n});"]}
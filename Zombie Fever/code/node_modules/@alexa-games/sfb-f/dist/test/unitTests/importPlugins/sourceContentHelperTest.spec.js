"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sourceContentHelper_1 = require("./../../../importPlugins/sourceContentHelper");
const assert_1 = require("assert");
describe("Source Content Helper Test", function () {
    it("add new content", async function () {
        const contentHelper = new sourceContentHelper_1.SourceContentHelper([
            {
                id: "test.abc",
                text: `@start
                *say
                hello`
            }
        ]);
        contentHelper.addSourceContent("newFile.abc", `some other content`);
        assert_1.strict.equal(contentHelper.getSourceContent("newFile.abc").text, `some other content`);
    });
    it("get all contents", async function () {
        const contentHelper = new sourceContentHelper_1.SourceContentHelper([
            {
                id: "test.abc",
                text: `@start
                *say
                hello`
            },
            {
                id: "more.abc",
                text: `@start
                *say
                hello`
            }
        ]);
        assert_1.strict.equal(contentHelper.getAllSourceContents().length, 2);
    });
    it("get one surce content item", async function () {
        const contentHelper = new sourceContentHelper_1.SourceContentHelper([
            {
                id: "test.abc",
                text: `@start
                *say
                hello`
            }
        ]);
        assert_1.strict.ok(contentHelper.getSourceContent("test.abc"));
        assert_1.strict.equal(contentHelper.getSourceContent("test.abc").id, "test.abc");
        assert_1.strict.ok(contentHelper.getSourceContent("test.abc").text);
    });
    it("replace source contents", async function () {
        const contentHelper = new sourceContentHelper_1.SourceContentHelper([
            {
                id: "test.abc",
                text: `@start
                *say
                hello`
            }
        ]);
        contentHelper.setAllSourceContents([{
                id: "new.abc",
                text: `new message`
            }]);
        try {
            contentHelper.getSourceContent("test.abc");
            assert_1.strict.fail();
        }
        catch (err) {
            assert_1.strict.ok(true);
        }
        try {
            contentHelper.getSourceContent("new.abc");
            assert_1.strict.ok(true);
        }
        catch (err) {
            assert_1.strict.fail();
        }
    });
    it("replace one source content item", async function () {
        const contentHelper = new sourceContentHelper_1.SourceContentHelper([
            {
                id: "test.abc",
                text: `@start
                *say
                hello`
            }
        ]);
        contentHelper.setSourceContent("test.abc", "new content");
        const newContent = contentHelper.getSourceContent("test.abc");
        assert_1.strict.equal(newContent.text, "new content");
    });
});
//# sourceMappingURL=sourceContentHelperTest.spec.js.map
{"version":3,"file":"driver.spec.js","sourceRoot":"","sources":["../../../test/unitTests/driver.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {ACEDriver} from '../../driver/driver';\nimport {SceneAudioItem, AlexaAudioType} from './../../driver/driverEntity';\nimport {AudioFileAccessor, PollyUtil, PollyRequestItem, PollyOutFormat} from '@alexa-games/sfb-polly';\nimport { strict as assert } from 'assert';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nconst ffmpeg = require('ffmpeg-static');\nconst testOutputDir = path.resolve(\".\", \".out\");\n\nif (!fs.existsSync(testOutputDir)) {\n    fs.mkdirSync(testOutputDir);\n}\n\ndescribe(\"Driver Unit Test\", function () {\n    it(\"buildAudioScenes(): modified polly item w/ SFB polly disabled.\", async function () {\n        const driver = getDefaultBaseDriver();\n\n        const testVoiceName = \"Brian\";\n        const testPitch = \"+10%\";\n        const testRate = \"120%\";\n        const testContent = \"this the text to be wrapped in polly tag.\"\n        // polly audio item with pitch and/or rate changed\n        const modifiedPollyAudio: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [],\n            foreground: [{\n                content: testContent,\n                delay: 0,\n                options: {\n                    voice: testVoiceName,\n                    pitch: testPitch, \n                    rate: testRate\n                },\n                type: AlexaAudioType.POLLY,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([modifiedPollyAudio]);\n\n        assert.equal(ssml, `<voice name='${testVoiceName}'><prosody pitch='${testPitch}' rate='${testRate}'>${testContent}</prosody></voice>`);\n        assert.equal(pretty, `<voice name='${testVoiceName}'><prosody pitch='${testPitch}' rate='${testRate}'>${testContent}</prosody></voice>`);\n    });\n\n    it(\"buildAudioScenes(): UN-modified polly item w/ SFB polly disabled.\", async function () {\n        const driver = getDefaultBaseDriver();\n\n        // polly audio item with pitch and/or rate UN-changed\n        const testVoiceName = \"Brian\";\n        const testPitch = \"+0%\";\n        const testRate = \"100%\";\n        const testContent = \"this the text to be wrapped in polly tag.\"\n        const unmodifiedPollyAudio: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [],\n            foreground: [{\n                content: testContent,\n                delay: 0,\n                options: {\n                    voice: testVoiceName,\n                    pitch: testPitch, \n                    rate: testRate\n                },\n                type: AlexaAudioType.POLLY,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([unmodifiedPollyAudio]);\n        assert.equal(ssml, `<voice name='${testVoiceName}'>${testContent}</voice>`);\n        assert.equal(pretty, `<voice name='${testVoiceName}'>${testContent}</voice>`);\n    });\n\n    /**\n     * Background audio items should be ignored when SFB polly is not used.\n     */\n    it(\"buildAudioScenes(): background exists w/ SFB polly disabled. \", async function () {\n        const driver = getDefaultBaseDriver();\n\n        const testContent = \"https://audio.url/file.mp3\";\n        const testBackgroundContent = \"https://background.url/file.mp3\";\n        const audioTagItem: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [{\n                content: testBackgroundContent,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            }],\n            foreground: [{\n                content: testContent,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([audioTagItem]);\n        assert.equal(ssml, `<audio src='${testContent}' />`);\n        assert.equal(pretty, `<audio src='${testContent}' />`);\n    });\n\n    it(\"buildAudioScenes(): modified polly item w/ SFB polly enabled.\", async function () {\n        this.timeout(10000);\n        const mockAudioAccessor = new HappyAudioAccessor();\n        const mockPollyUtil = new HappyPollyUtil(mockAudioAccessor);\n\n        const driver = getSFBPollyEnabledDriver(mockAudioAccessor, mockPollyUtil);\n        \n        const testVoiceName = \"Brian\";\n        const testPitch = \"+10%\";\n        const testRate = \"120%\";\n        const testContent = \"this the text to be wrapped in polly tag.\"\n        // polly audio item with pitch and/or rate changed\n        const modifiedPollyAudio: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [],\n            foreground: [{\n                content: testContent,\n                delay: 0,\n                options: {\n                    voice: testVoiceName,\n                    pitch: testPitch, \n                    rate: testRate\n                },\n                type: AlexaAudioType.POLLY,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([modifiedPollyAudio]);\n\n        assert.equal(ssml, `<audio src='fake.url/pollyb3bd98f337deb388f02cc9e180790018.mp3' />`);\n        assert.equal(pretty, `<voice name='${testVoiceName}'><prosody pitch='${testPitch}' rate='${testRate}'>${testContent}</prosody></voice>`);\n    });\n\n    it(\"buildAudioScenes(): UN-modified polly item w/ SFB polly enabled.\", async function () {\n        this.timeout(10000);\n        const mockAudioAccessor = new HappyAudioAccessor();\n        const mockPollyUtil = new HappyPollyUtil(mockAudioAccessor);\n\n        const driver = getSFBPollyEnabledDriver(mockAudioAccessor, mockPollyUtil);\n\n        // polly audio item with pitch and/or rate UN-changed\n        const testVoiceName = \"Brian\";\n        const testPitch = \"+0%\";\n        const testRate = \"100%\";\n        const testContent = \"this the text to be wrapped in polly tag.\"\n        const unmodifiedPollyAudio: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [],\n            foreground: [{\n                content: testContent,\n                delay: 0,\n                options: {\n                    voice: testVoiceName,\n                    pitch: testPitch, \n                    rate: testRate\n                },\n                type: AlexaAudioType.POLLY,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([unmodifiedPollyAudio]);\n        assert.equal(ssml, `<audio src='fake.url/polly1e53b9853a4800f917b7718b64b39321.mp3' />`);\n        assert.equal(pretty, `<voice name='${testVoiceName}'>${testContent}</voice>`);\n    });\n\n    it(\"buildAudioScenes(): Audio tag\", async function () {\n        const driver = getDefaultBaseDriver();\n\n        const testContent = \"https://audio.url/file.mp3\";\n\n        const audioTagItem: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [],\n            foreground: [{\n                content: testContent,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([audioTagItem]);\n        assert.equal(ssml, `<audio src='${testContent}' />`);\n        assert.equal(pretty, `<audio src='${testContent}' />`);\n    });\n\n    it(\"buildAudioScenes(): reduce 6 consecutive audio to 5 audio tags\", async function () {\n        const mockAudioAccessor = new HappyAudioAccessor();\n        const mockPollyUtil = new HappyPollyUtil(mockAudioAccessor);\n\n        const driver = getSFBPollyEnabledDriver(mockAudioAccessor, mockPollyUtil);\n\n        const testContent = \"https://audio.url/file\";\n\n        const audioTagItem: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [],\n            foreground: [{\n                content: `${testContent}1.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}2.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}3.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}4.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}5.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}6.mp3` ,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([audioTagItem]);\n\n        const tagMatch = ssml.match(/<audio src=\\'[\\S]+?\\' \\/>/g);\n\n        if (tagMatch !== null) {\n            assert.equal(tagMatch.length, 5);\n        } else {\n            assert.fail();\n        }\n\n        assert.equal(ssml, `<audio src='fake.url/a455dfecd690dcdfe1a5874e3228747b.mp3' /><audio src='${testContent}3.mp3' /><audio src='${testContent}4.mp3' /><audio src='${testContent}5.mp3' /><audio src='${testContent}6.mp3' />`);\n        assert.equal(pretty, `<audio src='${testContent}1.mp3' /><audio src='${testContent}2.mp3' /><audio src='${testContent}3.mp3' /><audio src='${testContent}4.mp3' /><audio src='${testContent}5.mp3' /><audio src='${testContent}6.mp3' />`);\n    });\n\n    it(\"buildAudioScenes(): reduce 6 audio items with text item in the middle to 5 audio tags\", async function () {\n        const mockAudioAccessor = new HappyAudioAccessor();\n        const mockPollyUtil = new HappyPollyUtil(mockAudioAccessor);\n\n        const driver = getSFBPollyEnabledDriver(mockAudioAccessor, mockPollyUtil);\n\n        const testContent = \"https://audio.url/file\";\n\n        const audioTagItem: SceneAudioItem = {\n            sceneID: \"modified polly audio scene\",\n            background: [],\n            foreground: [{\n                content: `${testContent}1.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}2.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}3.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `some text`,\n                delay: 0,\n                type: AlexaAudioType.TEXT,\n                volume: 1\n            },\n            {\n                content: `${testContent}4.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}5.mp3`,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            },\n            {\n                content: `${testContent}6.mp3` ,\n                delay: 0,\n                type: AlexaAudioType.AUDIO,\n                volume: 1\n            }]\n        }\n\n        const {ssml, pretty} = await driver.buildAudioScenes([audioTagItem]);\n\n        const tagMatch = ssml.match(/<audio src=\\'[\\S]+?\\' \\/>/g);\n\n        if (tagMatch !== null) {\n            assert.equal(tagMatch.length, 5);\n        } else {\n            assert.fail();\n        }\n\n        assert.equal(ssml, `<audio src='fake.url/a455dfecd690dcdfe1a5874e3228747b.mp3' /><audio src='${testContent}3.mp3' /> some text<audio src='${testContent}4.mp3' /><audio src='${testContent}5.mp3' /><audio src='${testContent}6.mp3' />`);\n        assert.equal(pretty, `<audio src='${testContent}1.mp3' /><audio src='${testContent}2.mp3' /><audio src='${testContent}3.mp3' /> some text<audio src='${testContent}4.mp3' /><audio src='${testContent}5.mp3' /><audio src='${testContent}6.mp3' />`);\n    });\n});\n\nfunction getDefaultBaseDriver(): ACEDriver {\n    const driver = new ACEDriver({\n        storyTitle: 'test story',\n        storyID: \"test-story\",\n        pluginName: 'default',\n        scenes: [{\n            id: \"start\",\n            contents: [\n                {\n                    narration: \"test narration\"\n                }\n            ]\n        }]\n    });\n\n    return driver;\n}\n\nfunction getSFBPollyEnabledDriver(audioAccessorMock: AudioFileAccessor, pollyUtilMock: PollyUtil): ACEDriver {\n    const driver = new ACEDriver({\n        storyTitle: 'test story',\n        storyID: \"test-story\",\n        pluginName: 'default',\n        scenes: [{\n            id: \"start\",\n            contents: [\n                {\n                    narration: \"test narration\"\n                }\n            ]\n        }]\n    }, undefined, undefined, {\n        \"enabled\": true,\n        \"combineAudioTags\": true,\n        \"dontUseCache\": false,\n        \"FFMPEGLocation\": ffmpeg.path,\n        \"workingDir\": testOutputDir,\n        \"bucketName\": \"test-bucket\",\n        \"s3DomainName\": \"s3.amazon.com\",\n        \"cognito\": {\n            identityPoolId: \"us-east-1:11cce95b-36e9-4d5e-8e95-db76d27d1ab0\",\n            loginWithAmazonAccessToken: \"\"\n        }\n    },undefined,audioAccessorMock,pollyUtilMock);\n\n    return driver;\n}\n\nclass HappyAudioAccessor implements AudioFileAccessor {\n    async exists(audioName: string): Promise<boolean> {\n        return true;\n    }\n\n    async downloadAudio(audioName: string, workingDirectoryPath: string): Promise<void> {\n        //do nothing\n    }   \n\n    async getAudioURL(audioName: string): Promise<string>{\n        return `fake.url/${audioName}`;\n    }\n\n    async uploadAudio(audioName: string, workingDirectoryPath: string): Promise<string> {\n        return await this.getAudioURL(audioName);\n    }\n}\n\nclass HappyPollyUtil extends PollyUtil {\n    async synthesize(request: PollyRequestItem, workingDir: string, filename: string, outputFormat?: PollyOutFormat): Promise<any> {\n        return;\n    }\n\n    async estimateSSMLDuration(ssml: string, workingDir: string): Promise<number> {\n        return 1000;\n    }\n}"]}
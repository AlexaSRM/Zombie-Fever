{"version":3,"file":"sourceContentHelperTest.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/importPlugins/sourceContentHelperTest.spec.ts"],"names":[],"mappings":";;AAAA,sFAAmF;AACnF,mCAA0C;AAE1C,QAAQ,CAAC,4BAA4B,EAAE;IACnC,EAAE,CAAC,iBAAiB,EAAE,KAAK;QACvB,MAAM,aAAa,GAAG,IAAI,yCAAmB,CAAC;YAC1C;gBACI,EAAE,EAAE,UAAU;gBACd,IAAI,EACJ;;sBAEM;aACT;SACJ,CAAC,CAAC;QAEH,aAAa,CAAC,gBAAgB,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QACpE,eAAM,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAC3F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK;QACxB,MAAM,aAAa,GAAG,IAAI,yCAAmB,CAAC;YAC1C;gBACI,EAAE,EAAE,UAAU;gBACd,IAAI,EACJ;;sBAEM;aACT;YACD;gBACI,EAAE,EAAE,UAAU;gBACd,IAAI,EACJ;;sBAEM;aACT;SACJ,CAAC,CAAC;QAEH,eAAM,CAAC,KAAK,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK;QAClC,MAAM,aAAa,GAAG,IAAI,yCAAmB,CAAC;YAC1C;gBACI,EAAE,EAAE,UAAU;gBACd,IAAI,EACJ;;sBAEM;aACT;SACJ,CAAC,CAAC;QAGH,eAAM,CAAC,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;QACtD,eAAM,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;QACxE,eAAM,CAAC,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK;QAC/B,MAAM,aAAa,GAAG,IAAI,yCAAmB,CAAC;YAC1C;gBACI,EAAE,EAAE,UAAU;gBACd,IAAI,EACJ;;sBAEM;aACT;SACJ,CAAC,CAAC;QAGH,aAAa,CAAC,oBAAoB,CAAC,CAAC;gBAChC,EAAE,EAAE,SAAS;gBACb,IAAI,EACJ,aAAa;aAChB,CAAC,CAAC,CAAC;QAEJ,IAAI;YACA,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAC3C,eAAM,CAAC,IAAI,EAAE,CAAC;SACjB;QAAC,OAAO,GAAG,EAAE;YACV,eAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;SACnB;QAED,IAAI;YACA,aAAa,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAC1C,eAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;SACnB;QAAC,OAAO,GAAG,EAAE;YACV,eAAM,CAAC,IAAI,EAAE,CAAC;SACjB;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK;QACvC,MAAM,aAAa,GAAG,IAAI,yCAAmB,CAAC;YAC1C;gBACI,EAAE,EAAE,UAAU;gBACd,IAAI,EACJ;;sBAEM;aACT;SACJ,CAAC,CAAC;QAGH,aAAa,CAAC,gBAAgB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAE1D,MAAM,UAAU,GAAG,aAAa,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC9D,eAAM,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { SourceContentHelper } from './../../../importPlugins/sourceContentHelper';\nimport { strict as assert } from 'assert';\n\ndescribe(\"Source Content Helper Test\", function () {\n    it(\"add new content\", async function () {\n        const contentHelper = new SourceContentHelper([\n            {\n                id: \"test.abc\",\n                text: \n                `@start\n                *say\n                hello`\n            }\n        ]);\n\n        contentHelper.addSourceContent(\"newFile.abc\", `some other content`);\n        assert.equal(contentHelper.getSourceContent(\"newFile.abc\").text, `some other content`);\n    });\n\n    it(\"get all contents\", async function () {\n        const contentHelper = new SourceContentHelper([\n            {\n                id: \"test.abc\",\n                text: \n                `@start\n                *say\n                hello`\n            },\n            {\n                id: \"more.abc\",\n                text: \n                `@start\n                *say\n                hello`\n            }\n        ]);\n\n        assert.equal(contentHelper.getAllSourceContents().length, 2);\n    });\n\n    it(\"get one surce content item\", async function () {\n        const contentHelper = new SourceContentHelper([\n            {\n                id: \"test.abc\",\n                text: \n                `@start\n                *say\n                hello`\n            }\n        ]);\n\n\n        assert.ok(contentHelper.getSourceContent(\"test.abc\"));\n        assert.equal(contentHelper.getSourceContent(\"test.abc\").id, \"test.abc\");\n        assert.ok(contentHelper.getSourceContent(\"test.abc\").text);\n    });\n\n    it(\"replace source contents\", async function () {\n        const contentHelper = new SourceContentHelper([\n            {\n                id: \"test.abc\",\n                text: \n                `@start\n                *say\n                hello`\n            }\n        ]);\n\n\n        contentHelper.setAllSourceContents([{\n            id: \"new.abc\",\n            text: \n            `new message`\n        }]);\n\n        try {\n            contentHelper.getSourceContent(\"test.abc\");\n            assert.fail();\n        } catch (err) {\n            assert.ok(true);\n        }\n\n        try {\n            contentHelper.getSourceContent(\"new.abc\");\n            assert.ok(true);\n        } catch (err) {\n            assert.fail();\n        }\n    });\n\n    it(\"replace one source content item\", async function () {\n        const contentHelper = new SourceContentHelper([\n            {\n                id: \"test.abc\",\n                text: \n                `@start\n                *say\n                hello`\n            }\n        ]);\n\n\n        contentHelper.setSourceContent(\"test.abc\", \"new content\");\n\n        const newContent = contentHelper.getSourceContent(\"test.abc\");\n        assert.equal(newContent.text, \"new content\");\n    });\n});\n"]}
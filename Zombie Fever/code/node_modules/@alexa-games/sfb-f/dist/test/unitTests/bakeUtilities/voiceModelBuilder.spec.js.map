{"version":3,"file":"voiceModelBuilder.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/bakeUtilities/voiceModelBuilder.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ModelBuilderHelper, CategoryType, IntentCategory } from './../../../bakeUtilities/VoiceModelBuilder';\nimport { strict as assert } from 'assert';\n\nconst numberToAlphabetCounting = ModelBuilderHelper.numberToAlphabetCounting;\n\ndescribe(\"auto voice model generating utility test\", function () {\n    before(async function() {\n        ModelBuilderHelper.autoSlotCount = 0;\n        ModelBuilderHelper.autoIntentCount = 0;\n    });\n    \n    it(\"Slot Number to Alphabet Conversion\", async function () {\n        assert.equal(numberToAlphabetCounting(0), 'a');\n        assert.equal(numberToAlphabetCounting(1), 'b');\n        assert.equal(numberToAlphabetCounting(2), 'c');\n        assert.equal(numberToAlphabetCounting(3), 'd');\n        assert.equal(numberToAlphabetCounting(4), 'e');\n        assert.equal(numberToAlphabetCounting(5), 'f');\n        assert.equal(numberToAlphabetCounting(6), 'g');\n        assert.equal(numberToAlphabetCounting(7), 'h');\n        assert.equal(numberToAlphabetCounting(8), 'i');\n        assert.equal(numberToAlphabetCounting(9), 'j');\n        assert.equal(numberToAlphabetCounting(10), 'k');\n        assert.equal(numberToAlphabetCounting(11), 'l');\n        assert.equal(numberToAlphabetCounting(12), 'm');\n        assert.equal(numberToAlphabetCounting(13), 'n');\n        assert.equal(numberToAlphabetCounting(14), 'o');\n        assert.equal(numberToAlphabetCounting(15), 'p');\n        assert.equal(numberToAlphabetCounting(16), 'q');\n        assert.equal(numberToAlphabetCounting(17), 'r');\n        assert.equal(numberToAlphabetCounting(18), 's');\n        assert.equal(numberToAlphabetCounting(19), 't');\n        assert.equal(numberToAlphabetCounting(20), 'u');\n        assert.equal(numberToAlphabetCounting(21), 'v');\n        assert.equal(numberToAlphabetCounting(22), 'w');\n        assert.equal(numberToAlphabetCounting(23), 'x');\n        assert.equal(numberToAlphabetCounting(24), 'y');\n        assert.equal(numberToAlphabetCounting(25), 'z');\n        assert.equal(numberToAlphabetCounting(26), 'ba');\n        assert.equal(numberToAlphabetCounting(27), 'bb');\n        assert.equal(numberToAlphabetCounting(100), 'dw');\n    });\n\n    it(\"buildCategoriesFromUtteranceTyping() - empty utterance lists\", async function () {\n        const result = ModelBuilderHelper.buildCategoriesFromUtteranceTyping([], [], [], [], {}, {});\n        assert.equal(result.length, 0);\n    });\n\n    it(\"buildCategoriesFromUtteranceTyping() - generate new intent category\", async function () {\n        const result = ModelBuilderHelper.buildCategoriesFromUtteranceTyping([], [\"test one\", \"test two\", \"test three\"], [], [], {}, {});\n        assert.equal(result.length, 1);\n        assert.equal(result[0].id, \"flexaIntent\");\n    });\n\n    it(\"buildCategoriesFromUtteranceTyping() - intent utterances already used in existing categories\", async function () {\n        const testingCategoryName = \"already used intent\";\n        const testingCategoryName2 = \"already used intent2\";\n\n        const existingCategoryMap = {\n            \"test one\": {\n                id: testingCategoryName,\n                type: CategoryType.INTENT,\n                utterances: [\"test one\"]\n            },\n            \"test four\": {\n                id: testingCategoryName2,\n                type: CategoryType.INTENT,\n                utterances: [\"test four\"]\n            }\n        }\n\n        const oneOverlapResult = ModelBuilderHelper.buildCategoriesFromUtteranceTyping([], [\"test one\", \"test two\", \"test three\"], [], [], {}, existingCategoryMap);\n\n        assert.equal(oneOverlapResult.length, 1);\n        assert.equal(oneOverlapResult[0].utterances.length, 3);\n        assert.ok(oneOverlapResult[0].utterances.includes(\"test one\"));\n        assert.ok(oneOverlapResult[0].utterances.includes(\"test two\"));\n        assert.ok(oneOverlapResult[0].utterances.includes(\"test three\"));\n\n        const twoOverlapResult = ModelBuilderHelper.buildCategoriesFromUtteranceTyping([], [\"test one\", \"test two\", \"test three\", \"test four\", \"test five\"], [], [], {}, existingCategoryMap);\n\n        assert.equal(twoOverlapResult.length, 2);\n        assert.equal(twoOverlapResult[0].utterances.length, 3);\n        assert.ok(twoOverlapResult[0].utterances.includes(\"test one\"));\n        assert.ok(twoOverlapResult[0].utterances.includes(\"test two\"));\n        assert.ok(twoOverlapResult[0].utterances.includes(\"test three\"));\n        assert.equal(twoOverlapResult[1].utterances.length, 2);\n        assert.ok(twoOverlapResult[1].utterances.includes(\"test four\"));\n        assert.ok(twoOverlapResult[1].utterances.includes(\"test five\"));\n    });\n\n    it(\"buildVoiceModelFromCategory() - intents with empty utterances\", async function() {\n        const testCategories: IntentCategory[] = [\n            {\n                id: \"intentOne\",\n                type: CategoryType.INTENT,\n                utterances: [\n                    \"sample one\",\n                    \"sample two\",\n                    \"sample three\"\n                ]\n            },\n            {\n                id: \"intentTwo\",\n                type: CategoryType.INTENT,\n                utterances: [\n                ]\n            },\n        ];\n\n        const result = ModelBuilderHelper.buildVoiceModelFromCategory(testCategories, \"testInvocation\", {}, {});\n\n        assert.equal(result.languageModel.intents.length, 1, \"Unexpected number of resulting intents.\");\n        for (let i = 0; i < result.languageModel.intents.length; i ++) {\n            const intent = result.languageModel.intents[i];\n            if (intent.samples) {\n                assert.notEqual(intent.samples.length, 0, \"Detected intents with 0 samples\");\n            } else {\n                assert.fail(`Unexpected intent without samples: ${intent.name}`);\n            }\n        }\n    });\n\n    it(\"buildVoiceModelFromCategory() - build model from [[CategoryType.AUTO_SLOT]] category items\", async function() {\n        const testCategories: IntentCategory[] = [\n            {\n                id: \"intentOne\",\n                type: CategoryType.AUTO_SLOT,\n                utterances: [\n                    \"sample one\",\n                    \"sample two\",\n                    \"sample three\"\n                ]\n            },\n            {\n                id: \"intenTwo\",\n                type: CategoryType.AUTO_SLOT,\n                utterances: [\n                    \"sample four\",\n                    \"sample five\"\n                ]\n            },\n        ];\n\n        const result = ModelBuilderHelper.buildVoiceModelFromCategory(testCategories, \"testInvocation\", {}, {});\n\n        assert.equal(result.languageModel.intents.length, 1, \"Unexpected number of resulting intents.\");\n        if (result.languageModel.intents[0].samples) {\n            assert.equal(result.languageModel.intents[0].samples.length, 2);\n        } else {\n            assert.fail(`Samples for ${result.languageModel.intents[0].name} is unexptectedly empty.`);\n        }\n\n        if (result.languageModel.types) {\n            assert.equal(result.languageModel.types.length, 2);\n            assert.equal(result.languageModel.types[0].name, testCategories[0].id + \"Type\");\n            assert.equal(result.languageModel.types[1].name, testCategories[1].id + \"Type\");\n        } else {\n            assert.fail(`SlotType is expected, but was not present.`);\n        }\n    });\n\n    it(\"buildBuiltInSampleToIntentMap() - generate utterance to intent name map for built-in intent\", async function() {\n        const resultMap = ModelBuilderHelper.buildBuiltInSampleToIntentMap({\n            \"TestBuiltInIntent1\": [\n                \"utterance 1 for TestBuiltInIntent1\",\n                \"utterance 2 for TestBuiltInIntent1\",\n                \"utterance 3 for TestBuiltInIntent1\"\n            ],\n            \"TestBuiltInIntent2\": [\n                \"utterance 1 for TestBuiltInIntent2\",\n                \"utterance 2 for TestBuiltInIntent2\",\n                \"utterance 3 for TestBuiltInIntent2\"\n            ]\n        });\n\n        assert.equal(resultMap[\"utterance 1 for TestBuiltInIntent1\"], undefined, \"The utterance for intent was not LowerCased\");\n        assert.equal(resultMap[\"utterance 1 for testbuiltinintent1\"], \"TestBuiltInIntent1\", \"utterance does not map correctly to the test intent: TestBuiltInIntent1\");\n        assert.equal(resultMap[\"utterance 2 for testbuiltinintent1\"], \"TestBuiltInIntent1\", \"utterance does not map correctly to the test intent: TestBuiltInIntent1\");\n        assert.equal(resultMap[\"utterance 3 for testbuiltinintent1\"], \"TestBuiltInIntent1\", \"utterance does not map correctly to the test intent: TestBuiltInIntent1\");\n        assert.equal(resultMap[\"utterance 1 for testbuiltinintent2\"], \"TestBuiltInIntent2\", \"utterance does not map correctly to the test intent: TestBuiltInIntent2\");\n        assert.equal(resultMap[\"utterance 2 for testbuiltinintent2\"], \"TestBuiltInIntent2\", \"utterance does not map correctly to the test intent: TestBuiltInIntent2\");\n        assert.equal(resultMap[\"utterance 3 for testbuiltinintent2\"], \"TestBuiltInIntent2\", \"utterance does not map correctly to the test intent: TestBuiltInIntent2\");\n    });\n\n    it(\"buildBuiltInSampleToIntentMap() - non EN lower casing test\", async function() {\n        const resultMap = ModelBuilderHelper.buildBuiltInSampleToIntentMap({\n            \"TestBuiltInIntent1\": [\n                \"TestBuiltInIntent1の発話1\",\n                \"TestBuiltInIntent1の発話2\",\n                \"TestBuiltInIntent1の発話3\"\n            ],\n            \"TestBuiltInIntent2\": [\n                \"TestBuiltInIntent2の発話1\",\n                \"TestBuiltInIntent2の発話2\",\n                \"TestBuiltInIntent2の発話3\"\n            ]\n        });\n\n        assert.equal(resultMap[\"TestBuiltInIntent1の発話1\"], undefined, \"The utterance for intent was not LowerCased\");\n        assert.equal(resultMap[\"testbuiltinintent1の発話1\"], \"TestBuiltInIntent1\", \"utterance 'testbuiltinintent1の発話1' does not map correctly to the test intent: TestBuiltInIntent1\");\n        assert.equal(resultMap[\"testbuiltinintent1の発話2\"], \"TestBuiltInIntent1\", \"utterance 'testbuiltinintent1の発話2' does not map correctly to the test intent: TestBuiltInIntent1\");\n        assert.equal(resultMap[\"testbuiltinintent1の発話3\"], \"TestBuiltInIntent1\", \"utterance 'testbuiltinintent1の発話3' does not map correctly to the test intent: TestBuiltInIntent1\");\n        assert.equal(resultMap[\"testbuiltinintent2の発話1\"], \"TestBuiltInIntent2\", \"utterance 'testbuiltinintent2の発話1' does not map correctly to the test intent: TestBuiltInIntent2\");\n        assert.equal(resultMap[\"testbuiltinintent2の発話2\"], \"TestBuiltInIntent2\", \"utterance 'testbuiltinintent2の発話2' does not map correctly to the test intent: TestBuiltInIntent2\");\n        assert.equal(resultMap[\"testbuiltinintent2の発話3\"], \"TestBuiltInIntent2\", \"utterance 'testbuiltinintent3の発話3' does not map correctly to the test intent: TestBuiltInIntent2\");\n    });\n\n    it (\"splitUtteranceType() - splits to types appropriately\", async function() {\n        const autoIntentTarget = \"utterance one\";\n        const autoSlotNumericTarget = \"utterance 2\";\n        const customSlotTarget = \"{slotName} woo hoo\";\n        const builtInTarget = \"built in utterance\";\n\n        const result = ModelBuilderHelper.splitUtteranceType([autoIntentTarget, autoSlotNumericTarget, customSlotTarget, builtInTarget],\n            {\n                [builtInTarget]: 'BuiltInIntent' \n            },\n            {\n                \"slotName\": 'CustomSlotType'\n            });\n\n        assert.equal(result.autoIntents[0], autoIntentTarget);\n        assert.equal(result.autoSlots[0], autoSlotNumericTarget);\n        assert.equal(result.builtInIntents[0], builtInTarget);\n        assert.equal(result.customSlots[0], customSlotTarget.replace(\"{slotName}\", \"{slotName as CustomSlotType}\"));\n    });\n\n    it (\"buildCategoriesForChoice() - test for proper categorization and de-duping of category.\", async function() {\n        const autoIntentTarget = \"utterance one\";\n        const autoSlotNumericTarget = \"utterance 2\";\n        const customSlotTarget = \"{slotName} woo hoo\";\n        const builtInTarget = \"built in utterance\";\n        const usedUtterance = \"Already Used Within Scene Utterance\";\n        const lowerCaseUsedUtterance = usedUtterance.toLowerCase();\n\n        const testUtterances = [\n            autoIntentTarget,\n            autoSlotNumericTarget,\n            customSlotTarget,\n            builtInTarget,\n            usedUtterance\n        ];\n\n        const existingCategory: IntentCategory = {\n            id: \"AlreadyUsedIntent\",\n            type: CategoryType.INTENT,\n            utterances: [\n                lowerCaseUsedUtterance\n            ]\n        }\n\n        const result = ModelBuilderHelper.buildCategoriesForChoice(testUtterances, {\n            [existingCategory.id]: true\n        },\n        {\n            \"slotName\": 'CustomSlotType'\n        },\n        {\n            [builtInTarget]: 'BuiltInIntent' \n        },\n        {\n            [lowerCaseUsedUtterance]: existingCategory\n        });\n\n        assert.equal(existingCategory.utterances.length, 0, \"duplicating utterance is not removed from the existing category.\");\n\n        let hasBuiltIn = false;\n        let hasAutoSlot = false;\n        let hasCustomSlot = false;\n        let hasIntent = false;\n        for (let category of result) {\n            if (category.type === CategoryType.BUILT_IN_INTENT) {\n                hasBuiltIn = true;\n                assert.equal(category.utterances.length, 0, \"BuiltInIntent utterances should always be empty.\");\n            } else if (category.type === CategoryType.AUTO_SLOT) {\n                hasAutoSlot = true;\n                assert.equal(category.utterances.length, 1);\n                assert.ok(category.utterances.includes(autoSlotNumericTarget), `Expected utterance for auto slot '${autoSlotNumericTarget}' is not found.`);\n            } else if (category.type === CategoryType.CUSTOM_SLOT) {\n                hasCustomSlot = true;\n                assert.equal(category.utterances.length, 1);\n                assert.equal(category.utterances[0], customSlotTarget.replace(\"{slotName}\", \"{slotName as CustomSlotType}\"));\n            } else if (category.type === CategoryType.INTENT) {\n                hasIntent = true;\n                assert.equal(category.utterances.length, 2);\n                assert.ok(category.utterances.includes(lowerCaseUsedUtterance));\n                assert.ok(category.utterances.includes(autoIntentTarget));\n            }\n        }\n\n        assert.ok(hasBuiltIn, \"Expected intent 'BuiltInIntent' does not exist in the reuslt\");\n        assert.ok(hasAutoSlot, \"Expected category type 'Auto Slot' does not exist in the reuslt\");\n        assert.ok(hasCustomSlot, \"Expected category type 'Custom Slot' does not exist in the reuslt\");\n        assert.ok(hasIntent, \"Expected category type 'Intent' does not exist in the reuslt\");\n    });\n});"]}
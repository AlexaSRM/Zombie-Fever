import { StoryBlockRange } from './storyBlockRange';
import { StoryBlock } from './storyBlock';
export declare class BlockStartExpressions {
    static readonly SceneMatch: RegExp;
    static readonly ScenePropMatch: RegExp;
    static readonly HearMatch: RegExp;
}
export declare enum EndType {
    /**
     * Current block ends when next block is found, or end of the range is found.
     */
    NextBlock = 0,
    /**
     * Current block ends when a final closing brace is found.
     */
    BraceMatch = 1,
    /**
     * Block is always one line long
     */
    OneLine = 2
}
export interface StoryBlockFinderParameters {
    /**
     * Array of strings that represent the story to be searched
     */
    lines: string[];
    /**
     * Range within the provided lines to be searched.
     */
    range?: StoryBlockRange;
    /**
     * Regular expression that will match when a line is the start of a block
     */
    blockStartMatch: RegExp;
    /**
     * Indicates what marks the end of a block.
     */
    blockEndType: EndType;
    /**
     * If this property is specified, then block is considered a
     * match if group 1 of the blockStartMatch expression matches this string.
     */
    blockName?: string;
}
/**
 * Class that finds a block of code that starts with the supplied regex and ends with a specified method.
 */
export declare class StoryBlockFinder {
    private currentRow;
    private readonly lines;
    private readonly range;
    private readonly blockStartMatch;
    private readonly blockEndType;
    private readonly blockName?;
    constructor(props: StoryBlockFinderParameters);
    getNextBlock(): StoryBlock | undefined;
    private positiveMatch;
    private countBraces;
    /**
     * Returns a range that includes the whole block ending on column 0 of the next line.
     * If the last row is the same as the last line, then the range ends on the last column
     * of the last line.
     * @param startRow First row of the block
     * @param endRow Last row of the block
     */
    private makeWholeLineRange;
}

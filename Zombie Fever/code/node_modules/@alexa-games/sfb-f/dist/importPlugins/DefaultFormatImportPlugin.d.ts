import { ImportResult } from '../importer/importerEntity';
import { ABCImportPlugin } from '../importPlugins/importerPlugin';
import { ContentItem } from '../importer/importer';
export declare class DefaultFormatImportPlugin implements ABCImportPlugin {
    parameters: any;
    pluginName: string;
    defaultRenderTemplate: string;
    static languageVersion: number;
    getVersion(): number;
    importData(contents: ContentItem[], param?: any): Promise<ImportResult>;
    applyCommands(originalContents: string, updateCommandList: UpdateCommand[]): {
        content: string;
        returnValues: {};
    };
}
interface HearActionMetadata {
    hear: string;
    goto: string;
    action: string;
}
export declare class UpdateCommand {
    sceneId: string;
    constructor(params: any);
    setSceneId(sceneId: string): void;
    apply(originalContent: string, returnValues: any): string;
}
export declare class NewNodeCommand extends UpdateCommand {
    parentSceneId: string;
    say: string;
    reprompt: string;
    then: string;
    show: string;
    constructor(params: any);
    setParentSceneId(parentSceneId: string): void;
    setSay(say: string): void;
    setReprompt(reprompt: string): void;
    setThen(then: string): void;
    setShow(show: string): void;
    apply(originalContent: string, returnValues: any): string;
}
export declare class DeleteNodeCommand extends UpdateCommand {
    constructor(params: any);
    apply(originalContent: string, returnValues: any): string;
}
export declare class RemoveReferencesToNodeCommand extends UpdateCommand {
    constructor(params: any);
    applyFunc(originalContents: string, sceneId: string): string;
    apply(originalContent: string, returnValues: any): string;
}
export declare class UpdateSayCommand extends UpdateCommand {
    sayList: string[];
    constructor(params: any);
    setSay(say: string): void;
    setSayList(sayList: string[]): void;
    apply(originalContent: string, returnValues: any): string;
}
export declare class UpdateRecapCommand extends UpdateCommand {
    recapList: string[];
    constructor(params: any);
    setRecap(recap: string): void;
    setRecapList(recapList: string[]): void;
    apply(originalContent: string, returnValues: any): string;
}
export declare class UpdateRepromptCommand extends UpdateCommand {
    repromptList: string[];
    constructor(params: any);
    setReprompt(reprompt: string): void;
    setRepromptList(repromptList: string[]): void;
    apply(originalContent: string, returnValues: any): string;
}
export declare class RenameNodeCommand extends UpdateCommand {
    originalSceneId: string;
    constructor(params: any);
    apply(originalContent: string, returnValues: any): string;
}
export declare class UpdateReferencesToNodeCommand extends UpdateCommand {
    originalSceneId: string;
    constructor(params: any);
    setOriginalSceneId(originalSceneId: string): void;
    applyFunc(originalContents: string, sceneId: string): string;
    apply(originalContent: string, returnValues: any): string;
}
export declare class UpdateHearCommand extends UpdateCommand {
    original: HearActionMetadata;
    hear: string;
    goto: string;
    action: string;
    constructor(params: any);
    applyFunc(originalContents: string, sceneId: string): string;
    apply(originalContent: string, returnValues: any): string;
}
export declare class UpdateGotoCommand extends UpdateCommand {
    originalGoto: string;
    goto: string;
    action: string;
    constructor(params: any);
    applyFunc(originalContents: string, sceneId: string): string;
    apply(originalContent: string, returnValues: any): string;
}
export {};

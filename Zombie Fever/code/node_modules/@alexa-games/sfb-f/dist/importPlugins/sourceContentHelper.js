"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Helper class to access and modify the raw source content.
 */
class SourceContentHelper {
    constructor(source) {
        this.source = source;
    }
    /**
     * Get the raw text from the source content matching the ID given.
     * @param contentID Often a file path/ file name of the source file, uniquely identifies a group of content.
     */
    getSourceContent(contentID) {
        const selectedContent = this.source.filter((contentItem) => {
            return contentItem.id == contentID;
        });
        if (selectedContent.length > 0) {
            const result = selectedContent[0];
            return result;
        }
        else {
            throw new Error(`Content for ID='${contentID}' could not be found.`);
        }
    }
    /**
     * Set and replaces the raw text content for the given content ID.
     *
     * @param contentID Often a file path/ file name of the source file, uniquely identifies a group of content.
     * @param content New raw source content
     */
    setSourceContent(contentID, content) {
        let foundIndex = -1;
        for (let i = 0; i < this.source.length; i++) {
            if (this.source[i].id === contentID) {
                foundIndex = i;
            }
        }
        if (foundIndex >= 0) {
            this.source[foundIndex].text = content;
        }
        else {
            throw new Error(`Content for ID='${contentID}' could not be found.`);
        }
    }
    /**
     * Add a new content group with a given contentID and a content text.
     * @param contentID identifier for this group of content
     * @param content raw content text
     */
    addSourceContent(contentID, content) {
        const selectedContent = this.source.filter((contentItem) => {
            return contentItem.id == contentID;
        });
        if (selectedContent.length > 0) {
            throw new Error(`Content for ID='${contentID}' already exists.`);
        }
        this.source.push({
            id: contentID,
            text: content
        });
    }
    /**
     * Get all the source contents being processed for this importation run.
     */
    getAllSourceContents() {
        return this.source;
    }
    /**
     * Set and replace all the source contents for this importation run.
     */
    setAllSourceContents(contentItems) {
        this.source = contentItems;
    }
}
exports.SourceContentHelper = SourceContentHelper;
//# sourceMappingURL=sourceContentHelper.js.map
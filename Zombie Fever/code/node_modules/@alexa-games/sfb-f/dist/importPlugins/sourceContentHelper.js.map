{"version":3,"file":"sourceContentHelper.js","sourceRoot":"","sources":["../../importPlugins/sourceContentHelper.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH,MAAa,mBAAmB;IAE5B,YAAqB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;IAC1C,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,SAAiB;QAC9B,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE;YACvD,OAAO,WAAW,CAAC,EAAE,IAAI,SAAS,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,MAAM,MAAM,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;YAClC,OAAO,MAAM,CAAC;SACjB;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,mBAAmB,SAAS,uBAAuB,CAAC,CAAC;SACxE;IACL,CAAC;IAED;;;;;OAKG;IACH,gBAAgB,CAAC,SAAiB,EAAE,OAAe;QAC/C,IAAI,UAAU,GAAW,CAAC,CAAC,CAAC;QAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;YAC1C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,EAAE;gBACjC,UAAU,GAAG,CAAC,CAAC;aAClB;SACJ;QAED,IAAI,UAAU,IAAI,CAAC,EAAE;YACjB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC;SAC1C;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,mBAAmB,SAAS,uBAAuB,CAAC,CAAC;SACxE;IACL,CAAC;IAED;;;;OAIG;IACH,gBAAgB,CAAC,SAAiB,EAAE,OAAe;QAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE;YACvD,OAAO,WAAW,CAAC,EAAE,IAAI,SAAS,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,mBAAmB,SAAS,mBAAmB,CAAC,CAAC;SACpE;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACb,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,OAAO;SAChB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,oBAAoB;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,YAA2B;QAC5C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;IAC/B,CAAC;CACJ;AA7ED,kDA6EC","sourcesContent":["import { ContentItem } from '../importer/importer';\n\n/**\n * Helper class to access and modify the raw source content.\n */\nexport class SourceContentHelper {\n\n    constructor (private source: ContentItem[]) {\n    }\n\n    /**\n     * Get the raw text from the source content matching the ID given.\n     * @param contentID Often a file path/ file name of the source file, uniquely identifies a group of content.\n     */\n    getSourceContent(contentID: string): ContentItem {\n        const selectedContent = this.source.filter((contentItem) => {\n            return contentItem.id == contentID;\n        });\n\n        if (selectedContent.length > 0) {\n            const result = selectedContent[0];\n            return result;\n        } else {\n            throw new Error(`Content for ID='${contentID}' could not be found.`);\n        }\n    }\n\n    /**\n     * Set and replaces the raw text content for the given content ID.\n     * \n     * @param contentID Often a file path/ file name of the source file, uniquely identifies a group of content.\n     * @param content New raw source content\n     */\n    setSourceContent(contentID: string, content: string): void {\n        let foundIndex: number = -1;\n\n        for (let i = 0; i < this.source.length; i ++) {\n            if (this.source[i].id === contentID) {\n                foundIndex = i;\n            }\n        }\n\n        if (foundIndex >= 0) {\n            this.source[foundIndex].text = content;\n        } else {\n            throw new Error(`Content for ID='${contentID}' could not be found.`);\n        }\n    }\n\n    /**\n     * Add a new content group with a given contentID and a content text.\n     * @param contentID identifier for this group of content\n     * @param content raw content text\n     */\n    addSourceContent(contentID: string, content: string): void {\n        const selectedContent = this.source.filter((contentItem) => {\n            return contentItem.id == contentID;\n        });\n\n        if (selectedContent.length > 0) {\n            throw new Error(`Content for ID='${contentID}' already exists.`);\n        }\n\n        this.source.push({\n            id: contentID,\n            text: content\n        });\n    }\n\n    /**\n     * Get all the source contents being processed for this importation run.\n     */\n    getAllSourceContents(): ContentItem[] {\n        return this.source;\n    }\n\n    /**\n     * Set and replace all the source contents for this importation run.\n     */\n    setAllSourceContents(contentItems: ContentItem[]): void {\n        this.source = contentItems;\n    }\n}"]}
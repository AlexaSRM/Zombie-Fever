"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const storyBlockRange_1 = require("./storyBlockRange");
const storyBlock_1 = require("./storyBlock");
class BlockStartExpressions {
}
exports.BlockStartExpressions = BlockStartExpressions;
// Matches lines whose first non-whitespace character is a @
BlockStartExpressions.SceneMatch = /^\s*@\s*(.*)$/;
// Match lines whose first non-whitespace character is a *
BlockStartExpressions.ScenePropMatch = /^\s*\*\s*(.*)$/;
// Match lines that start with a 'hear' statement.
BlockStartExpressions.HearMatch = /^\s*hear\s+(.*)\s*$/i;
var EndType;
(function (EndType) {
    /**
     * Current block ends when next block is found, or end of the range is found.
     */
    EndType[EndType["NextBlock"] = 0] = "NextBlock";
    /**
     * Current block ends when a final closing brace is found.
     */
    EndType[EndType["BraceMatch"] = 1] = "BraceMatch";
    /**
     * Block is always one line long
     */
    EndType[EndType["OneLine"] = 2] = "OneLine";
})(EndType = exports.EndType || (exports.EndType = {}));
/**
 * Class that finds a block of code that starts with the supplied regex and ends with a specified method.
 */
class StoryBlockFinder {
    constructor(props) {
        this.currentRow = -1;
        this.lines = props.lines;
        this.blockEndType = props.blockEndType;
        this.blockStartMatch = props.blockStartMatch;
        this.blockName = props.blockName;
        if (!props.range) {
            const endColumn = this.lines.length === 0 ? 0 : this.lines[this.lines.length - 1].length;
            this.range = new storyBlockRange_1.StoryBlockRange(0, 0, this.lines.length - 1, endColumn);
        }
        else {
            this.range = props.range;
        }
        if (this.range.start.row < 0 || this.range.end.row >= this.lines.length) {
            throw new Error('range property outside of provided line array.');
        }
    }
    getNextBlock() {
        if (this.currentRow >= this.lines.length) {
            return undefined;
        }
        if (this.currentRow < 0) {
            this.currentRow = this.range.start.row;
        }
        let result = undefined;
        let braces = { balance: 0, count: 0 };
        let startRow = -1;
        let blockName = '';
        while (!result && this.currentRow <= this.range.end.row) {
            const line = this.range.cropToRange(this.lines[this.currentRow], this.currentRow);
            if (startRow < 0) {
                const match = line.match(this.blockStartMatch);
                if (this.positiveMatch(match)) {
                    startRow = this.currentRow;
                    if (match.length > 1) {
                        blockName = match[1].trim();
                    }
                    if (this.blockEndType === EndType.BraceMatch) {
                        braces = { balance: 0, count: 0 };
                        this.countBraces(line, braces);
                    }
                    else if (this.blockEndType === EndType.OneLine) {
                        result = this.makeWholeLineRange(startRow, startRow);
                    }
                }
            }
            else {
                switch (this.blockEndType) {
                    case EndType.BraceMatch:
                        this.countBraces(line, braces);
                        if (braces.count > 0 && braces.balance === 0) {
                            result = this.makeWholeLineRange(startRow, this.currentRow);
                        }
                        break;
                    case EndType.NextBlock:
                        const match = line.match(this.blockStartMatch);
                        if (match) {
                            this.currentRow--;
                            result = this.makeWholeLineRange(startRow, this.currentRow);
                        }
                        break;
                }
            }
            this.currentRow++;
        }
        if (!result && startRow >= 0 && this.blockEndType === EndType.NextBlock) {
            // End of range marks the end of current block when using NextBlock end type.
            result = this.makeWholeLineRange(startRow, this.currentRow - 1);
        }
        if (result) {
            return new storyBlock_1.StoryBlock(this.lines, blockName, result);
        }
        return undefined;
    }
    positiveMatch(match) {
        if (!match) {
            return false;
        }
        if (match.length > 1 && !!this.blockName) {
            return this.blockName === match[1].trim();
        }
        return true;
    }
    countBraces(line, value) {
        let prev = ' ';
        for (let i = 0; i < line.length; i++) {
            const ch = line[i];
            if (ch === '/' && prev === '/') {
                // break on comment
                break;
            }
            else if (ch === '{') {
                value.balance++;
                value.count++;
            }
            else if (ch === '}') {
                value.balance--;
                value.count++;
            }
            prev = line[i];
        }
    }
    /**
     * Returns a range that includes the whole block ending on column 0 of the next line.
     * If the last row is the same as the last line, then the range ends on the last column
     * of the last line.
     * @param startRow First row of the block
     * @param endRow Last row of the block
     */
    makeWholeLineRange(startRow, endRow) {
        let endColumn = 0;
        if (endRow >= 0) {
            if (endRow + 1 <= this.range.end.row) {
                endRow++;
            }
            else {
                endRow = this.range.end.row;
                endColumn = this.range.end.column;
            }
        }
        return new storyBlockRange_1.StoryBlockRange(startRow, 0, endRow, endColumn);
    }
}
exports.StoryBlockFinder = StoryBlockFinder;
//# sourceMappingURL=storyBlockFinder.js.map
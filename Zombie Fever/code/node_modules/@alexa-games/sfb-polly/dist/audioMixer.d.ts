import { AudioFileAccessor } from './audioAccessor/audioFileAccessor';
import { PollyRequestItem } from './pollyUtil';
export interface AudioSequence {
    sequenceType: SequenceType;
    filename: string;
    url: string;
    delayMs: number;
    volume: number;
    fadeOutTime: number;
    fadeOutDuration: number;
    fadeInDuration: number;
}
export interface AudioMixSetting {
    trim: TrimOption;
    mode: MixMode;
}
export declare enum SequenceType {
    MUSIC = "MUSIC",
    SFX = "SFX"
}
/**
 * Trim option for mixing down the sequence of audio
 */
export declare enum TrimOption {
    /**
     * mix down the audio to the longest audio in the sequence
     */
    LONGEST = "longest",
    /**
     * mix down the audio to the length of the first audio in the sequence
     */
    FIRST = "first"
}
export declare enum MixMode {
    CONCATENATE = "concat",
    LAYER = "layer"
}
/**
 * Builder for mixing multiple audio files using the FFMPEG binary
 */
export declare class AudioMixer {
    private ffmpegPath;
    private audioWorkingDir;
    private audioAccessor;
    private audioSequence;
    constructor(ffmpegPath: string, audioWorkingDir: string, audioAccessor: AudioFileAccessor);
    /**
     * add audio item to the sequence to mix
     * @param audio
     */
    addAudio(audio: AudioSequence): void;
    /**
     * add polly item in the audio sequence
     * @param polly
     * @returns resulting audio file path in disc.
     */
    addPollyItem(request: PollyRequestItem): Promise<string>;
    /**
     * Mix down the audio using FFMPEG binary with the generated file name, and return the URL of the resulting audio.
     * @param setting audio mix setting
     * @returns resulting audio file path in disc
     */
    mix(setting: AudioMixSetting): Promise<string>;
    private isAudioModified;
    /**
     * Check if the audio files in the sequence are available locally, then download the ones that are not available.
     */
    private downloadSequenceItems;
    /**
     * Check if the given audio file exists locally, if not download that file.
     */
    private checkAndDownloadAudio;
    /**
     * Generate a FFMPEG command string with option flags and values given the audio sequence and setting
     */
    private getFFMPEGCommand;
}

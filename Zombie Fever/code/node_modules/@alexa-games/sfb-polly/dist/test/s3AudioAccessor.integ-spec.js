"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const s3AudioAccessor_1 = require("./../audioAccessor/s3AudioAccessor");
const aws_sdk_1 = require("aws-sdk");
const assert_1 = require("assert");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
describe("S3 Audio Accessor integration test", function () {
    before(async () => {
        const workingDir = path.resolve(".", ".out");
        if (!fs.existsSync(workingDir)) {
            fs.mkdirSync(workingDir);
        }
    });
    it("test custom s3 client.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "alexa-ml/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir,
            s3Client: new aws_sdk_1.S3()
        });
        assert_1.strict.ok(audioFileAccessor);
    });
    it("test upload audio.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "alexa-ml/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const output = await audioFileAccessor.uploadAudio(testFileName, outDir);
        assert_1.strict.equal(output, "https://s3.amazonaws.com/alexa-ml/tempPolly/pollyCache/" + testFileName);
        // Make sure it is in the s3 file status cache
        assert_1.strict(s3AudioAccessor_1.s3FileStatusStaticCache[`alexa-ml/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === s3AudioAccessor_1.S3FileStatus.Exists);
    });
    it("test upload audio invalid filename.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test_invalid.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "alexa-ml/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        try {
            const output = await audioFileAccessor.uploadAudio(testFileName, outDir);
        }
        catch (err) {
            assertIncludes(err, "");
            // Make sure not in the S3 file status cache on error
            assert_1.strict(!s3AudioAccessor_1.s3FileStatusStaticCache[`alexa-ml/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`]);
        }
    });
    it("test download audio.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "alexa-ml/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        await audioFileAccessor.downloadAudio('https://s3.amazonaws.com/alexa-ml/sounds/sound-library-loud/Instruments/Trumpet_1.mp3', outDir);
        const resultPath = path.resolve(outDir, "Trumpet_1.mp3");
        assert_1.strict.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);
    });
    it("test download audio invalid url.", async function () {
        const outDir = path.resolve('.', '.out');
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "alexa-ml/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        try {
            await audioFileAccessor.downloadAudio('htinvalidtps://s3.amazonaws.com/alexa-ml/sounds/sound-library-loud/Instruments/Trumpet_1_invalid_url.mp3', outDir);
        }
        catch (err) {
            assertIncludes(err, "invalid");
            // Make sure not in the S3 file status cache on error
            assert_1.strict(!s3AudioAccessor_1.s3FileStatusStaticCache[`alexa-ml/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/Trumpet_1_invalid_url.mp3`]);
        }
    });
    it("test audio exists.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "alexa-ml/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const exists = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(exists);
        // Make sure it exists if the file status cache
        assert_1.strict(s3AudioAccessor_1.s3FileStatusStaticCache[`alexa-ml/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === s3AudioAccessor_1.S3FileStatus.Exists);
        // Make sure cached calls return same status
        const exists2 = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(exists2);
    });
    it("test audio file that does not exist.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'file_that_does_not_exist.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "alexa-ml/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const exists = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(!exists);
        // Make sure it does not exists if the file status cache
        assert_1.strict(s3AudioAccessor_1.s3FileStatusStaticCache[`alexa-ml/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === s3AudioAccessor_1.S3FileStatus.NotExists);
        // Make sure cached calls return same status
        const exists2 = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(!exists2);
    });
    function assertIncludes(line, includes) {
        assert_1.strict.ok(line.includes(includes), "Line: " + line + " must include " + includes);
    }
});
//# sourceMappingURL=s3AudioAccessor.integ-spec.js.map
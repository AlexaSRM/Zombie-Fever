"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manifestUtils_1 = require("../lib/manifestUtils");
const consoleStdOutput_1 = require("../lib/consoleStdOutput");
const sinon_1 = require("sinon");
const assert_1 = require("assert");
const consoleLogger_1 = require("../lib/consoleLogger");
const TestManifest = {
    dependencies: {
        '@alexa-games/sfb-f': 'file:../sfb-f',
        '@alexa-games/sfb-skill': 'file:../sfb-skill',
        'norm': '^1.0.0'
    }
};
describe('ManifestUtils', () => {
    let getPackageVersionFromNpmStub;
    let readRawPackageVersionStub;
    beforeEach(() => {
        readRawPackageVersionStub = sinon_1.stub(manifestUtils_1.ManifestUtils, 'readRawPackageVersion').callsFake(() => {
            return '0.5.0-alpha.3';
        });
    });
    afterEach(() => {
        if (getPackageVersionFromNpmStub) {
            getPackageVersionFromNpmStub.restore();
            getPackageVersionFromNpmStub = undefined;
        }
        readRawPackageVersionStub.restore();
    });
    it('repairPackageManifest', async () => {
        const testManifest = JSON.parse(JSON.stringify(TestManifest));
        await manifestUtils_1.ManifestUtils.repairPackageManifest(testManifest);
        assert_1.strict.equal(testManifest.dependencies['@alexa-games/sfb-f'], '^0.0.0', 'Should match last version.');
        assert_1.strict.equal(testManifest.dependencies['@alexa-games/sfb-skill'], '^0.0.0', 'Should match last version.');
        assert_1.strict.equal(testManifest.dependencies['norm'], '^1.0.0', 'Should be unchanged.');
    });
    it('repairPackageManifest ver 1', async () => {
        readRawPackageVersionStub.restore();
        readRawPackageVersionStub = sinon_1.stub(manifestUtils_1.ManifestUtils, 'readRawPackageVersion').callsFake(() => {
            return '1.1.4';
        });
        const testManifest = JSON.parse(JSON.stringify(TestManifest));
        await manifestUtils_1.ManifestUtils.repairPackageManifest(testManifest);
        assert_1.strict.equal(testManifest.dependencies['@alexa-games/sfb-f'], '^1.0.0', 'Should match last version.');
        assert_1.strict.equal(testManifest.dependencies['@alexa-games/sfb-skill'], '^1.0.0', 'Should match last version.');
        assert_1.strict.equal(testManifest.dependencies['norm'], '^1.0.0', 'Should be unchanged.');
    });
    it('Multiple package versions', async () => {
        getPackageVersionFromNpmStub = sinon_1.stub(manifestUtils_1.ManifestUtils, 'getPackageVersionsFromNpm').callsFake(async (packageName, stdOutput) => {
            return "sfb-f@0.1.0 '0.1.0'\nsfb-f@0.1.1 '0.1.1'\nsfb-f@0.2.0 '0.2.0'\nsfb-f@0.2.1 '0.2.1'\n" +
                "sfb-f@0.3.0 '0.3.0'\nsfb-f@0.4.0 '0.4.0'\nsfb-f@0.5.0 '0.5.0'\nsfb-f@0.5.1 '0.5.1'";
        });
        const version = await manifestUtils_1.ManifestUtils.getLatestsMajorVersionFromNpm({
            name: '@alexa-games/any-thing',
            version: '0.1.0'
        }, new consoleStdOutput_1.ConsoleStdOutput());
        assert_1.strict.equal(version, '0.5.1', 'Should match last version.');
    });
    it('Single package version', async () => {
        getPackageVersionFromNpmStub = sinon_1.stub(manifestUtils_1.ManifestUtils, 'getPackageVersionsFromNpm').callsFake(async (packageName, stdOutput) => {
            return "0.5.0-test.3";
        });
        const version = await manifestUtils_1.ManifestUtils.getLatestsMajorVersionFromNpm({
            name: '@alexa-games/any-thing',
            version: '0.1.0'
        }, new consoleStdOutput_1.ConsoleStdOutput());
        assert_1.strict.equal(version, '0.5.0-test.3', 'Should match only version.');
    });
    it('Story package compatible', async () => {
        manifestUtils_1.ManifestUtils.checkDeploymentPackageVersionWithTooling({
            dependencies: {
                '@alexa-games/sfb-f': '^1.1.0'
            }
        }, {
            name: '@alexa-games/sfb-cli',
            version: '1.2.3'
        }, new consoleLogger_1.ConsoleLogger());
    });
    it('Story package newer', async () => {
        try {
            manifestUtils_1.ManifestUtils.checkDeploymentPackageVersionWithTooling({
                dependencies: {
                    '@alexa-games/sfb-f': '^1.3.0'
                }
            }, {
                name: '@alexa-games/sfb-cli',
                version: '1.2.3'
            }, new consoleLogger_1.ConsoleLogger());
            assert_1.strict(false, 'Should have thrown by now.');
        }
        catch (e) {
            assert_1.strict(e.message && e.message.indexOf('is not compatible') > 0, 'Should report not compatible.');
        }
    });
    it('Story wrong major version', async () => {
        try {
            manifestUtils_1.ManifestUtils.checkDeploymentPackageVersionWithTooling({
                dependencies: {
                    '@alexa-games/sfb-f': '^2.0.0'
                }
            }, {
                name: '@alexa-games/sfb-cli',
                version: '1.2.3'
            }, new consoleLogger_1.ConsoleLogger());
            assert_1.strict(false, 'Should have thrown by now.');
        }
        catch (e) {
            assert_1.strict(e.message && e.message.indexOf('is not compatible') > 0, 'Should report not compatible.');
        }
    });
});
//# sourceMappingURL=ManifestUtils.spec.js.map
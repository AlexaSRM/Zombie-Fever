{"version":3,"file":"pseudo.js","sourceRoot":"","sources":["../../../test/tools/pseudo.ts"],"names":[],"mappings":"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","sourcesContent":["import cmd from 'commander';\nimport path from 'path';\nimport fs from 'fs';\nimport { SpecialPaths } from '../../lib/specialPaths';\nimport { ConfigAccessor, ResourceStringsLoaders } from '@alexa-games/sfb-skill';\nimport { localize } from 'pseudo-localization';\nimport { SegmentType, SegmenterBuilder } from '@alexa-games/sfb-f';\nimport { FileUtils } from '../../lib/fileUtils';\n\nimport { crashOnUnhandledRejections, readUtf8FileExcludingBom } from '@alexa-games/sfb-util';\n\ncrashOnUnhandledRejections();\n\n\ncmd\n    .usage('[options] <story path>')\n    .option('-t, --target-locale <locale>', \"Locale to receive pseudo localized strings.\")\n    .option('-s, --source-locale <locale>', \"Locale to provide original strings. Default en-US.\", 'en-US');\ncmd\n    .parse(process.argv);\n\n\nif (process.argv.length === 2 || cmd.args.length < 1) {\n    cmd.help();\n    process.exitCode = 1;\n} else {\n    run(cmd.args[0], cmd)\n    .then(() => {})\n    .catch((e) => {\n        console.error(e);\n        process.exitCode = 1;\n    });\n}\n\nasync function run(story: string, options: any) {\n    if (!options.targetLocale) {\n        console.error('Please specify a target local using the -t option.');\n        process.exitCode = 1;\n        return;\n    }\n\n    await translateLanguageStringsToPseudo(story, options.sourceLocale, options.targetLocale);\n    await createPseudoResources(story, options.sourceLocale, options.targetLocale);\n    await updateProjectConfig(story, options.sourceLocale, options.targetLocale);\n}\n\nasync function translateLanguageStringsToPseudo(story: string, locale: string, targetLocale: string) {\n    console.log(`story=${story}`);\n    console.log(`targetLocale=${targetLocale}`);\n    console.log(`locale=${locale}`);\n\n    const dirs = new SpecialPaths(story);\n\n    const languageString = ResourceStringsLoaders.loadLanguageStrings(dirs.contentPath);\n\n    if (!languageString) {\n        throw new Error('No language strings found ');\n    }\n\n    const sourceStrings = languageString[locale];\n    const pseudoStrings = pseudoTranslate(sourceStrings.translation);\n\n    languageString[targetLocale] = { translation: pseudoStrings };\n\n    const languageStringsFile = path.join(dirs.contentPath, 'languageStrings.json');\n    fs.writeFileSync(languageStringsFile, JSON.stringify(languageString, null, 4));\n\n    console.log(`Updated ${languageStringsFile}`);\n}\n\nasync function createPseudoResources(story: string, locale: string, targetLocale: string) {\n    const dirs = new SpecialPaths(story);\n\n    await FileUtils.recursiveCopy(\n        path.join(dirs.getResourcePath(locale),'*'),\n        dirs.getResourcePath(targetLocale));\n\n    const config = await ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.contentPath);\n\n    const snippets = ResourceStringsLoaders.loadSnippets(config, locale);\n    if (!snippets) {\n        throw new Error('No snippets found.');\n    }\n\n    const pseudoSnippets = pseudoTranslate(snippets);\n\n    const snippetMapFilePath = config.getSnippetMapFilePath(targetLocale);\n    fs.writeFileSync(snippetMapFilePath, JSON.stringify(pseudoSnippets, null, 4));\n\n    console.log(`Created ${targetLocale} resources.`);\n}\n\nasync function updateProjectConfig(story: string, locale: string, targetLocale: string) {\n    const dirs = new SpecialPaths(story);\n\n    const configData = FileUtils.loadJson(dirs.abcConfig);\n    const config = new ConfigAccessor(configData, dirs.contentPath);\n\n    let configChanged = false;\n\n    if (!config.publishLocales) {\n\n    }\n    const index = config.publishLocales.findIndex((item) => { return item.toLowerCase() === targetLocale.toLowerCase(); });\n    if (index < 0) {\n        // Didn't find \n        config.publishLocales.push(targetLocale);\n        //config.setValue('publish-locales', config.publishLocales);\n\n        configChanged = true;\n    }\n\n    const InvocationNameKey = 'skill-invocation-name';\n    const localizedInvocationName = config.getValue(InvocationNameKey, undefined, targetLocale);\n    const sourceInvocationName = config.getValue(InvocationNameKey, undefined, locale);\n    \n    if (!localizedInvocationName || localizedInvocationName === sourceInvocationName) { \n        \n        config.setValue(InvocationNameKey, localize(sourceInvocationName), undefined, targetLocale);\n        configChanged = true;\n    }\n\n    if (configChanged) {\n        fs.writeFileSync(dirs.abcConfig, JSON.stringify(configData, null, 4), { encoding: 'utf8' });\n    }\n}\n\nfunction pseudoTranslate(source: {[key: string]: string }) {\n    const result: {[key: string]: string } = {};\n\n    // console.log(JSON.stringify(source));\n\n    for (let key in source) {\n        let value = source[key];\n\n        value = value ? localizeOutputString(value) : value;\n\n        result[key] = value;\n    }\n\n    return result;\n}\n\n/**\n * Localizes a string, but leaves things in {braces} alone.\n * @param value String to pseudo localize\n */\nfunction localizeOutputString(value: string) {\n    let result = '';\n    const segmenter = SegmenterBuilder.getAllSegmenter();\n\n    for (let token of segmenter.parse(value)) {\n        if (token.type === SegmentType.PlainText) {\n            result += localize(token.original);\n        } else {\n            result += token.original;\n        }\n    }\n    return result;\n}\n"]}
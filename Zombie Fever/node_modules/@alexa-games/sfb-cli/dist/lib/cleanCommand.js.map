{"version":3,"file":"cleanCommand.js","sourceRoot":"","sources":["../../lib/cleanCommand.ts"],"names":[],"mappings":";;;;;;;;;AAAA,uCAAyB;AACzB,iDAAmC;AAEnC,iDAGwB;AAGxB,2CAAwC;AACxC,sDAAwD;AAExD,2CAAwC;AAOxC,MAAa,YAAY;IAErB,YACqB,SAAiB,EACjB,MAAc,EACd,SAAoB;QAFpB,cAAS,GAAT,SAAS,CAAQ;QACjB,WAAM,GAAN,MAAM,CAAQ;QACd,cAAS,GAAT,SAAS,CAAW;IACzC,CAAC;IAEM,KAAK,CAAC,GAAG;QACZ,MAAM,kBAAkB,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAG,MAAM,0BAAc,CAAC,cAAc,CAAC,kBAAkB,CAAC,SAAS,EAAE,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QAExH,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,kBAAkB,CAAC,UAAU,EAAE,CAAC,CAAC;QACpE,IAAI,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,UAAU,CAAC,EAAE;YAC9C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,kBAAkB,CAAC,UAAU,EAAE,CAAC,CAAC;YAChE,MAAM,qBAAS,CAAC,SAAS,CAAC,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5E;QAED,MAAM,oBAAoB,GAAG,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,qCAAsB,CAAC,CAAC;QACnG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,oBAAoB,EAAE,CAAC,CAAC;QAC3D,IAAI,EAAE,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE;YACrC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,oBAAoB,EAAE,CAAC,CAAC;YACvD,MAAM,qBAAS,CAAC,SAAS,CAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SACnE;QAED,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACjF,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,IAAkB,EAAE,WAAoB;QAC5D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;QAElD,IAAI,WAAW,EAAE;YACb,MAAM,qBAAS,CAAC,0BAA0B,CACtC,qBAAS,CAAC,MAAM,EAChB,CAAC,qBAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EAC5B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,EACd,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;SACtB;aAAM;YACH,MAAM,qBAAS,CAAC,0BAA0B,CACtC,qBAAS,CAAC,MAAM,EAChB,CAAE,KAAK,EAAE,OAAO,CAAC,EACjB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,EACd,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;SACtB;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;IACjD,CAAC;CACJ;AAjDD,oCAiDC","sourcesContent":["import * as fs from 'fs';\nimport * as pathModule from 'path';\n\nimport { \n    SpecialPaths, \n    NODE_MODULES_DIRECTORY\n} from './specialPaths';\nimport { Logger } from './logger';\nimport { StdOutput } from './stdOutput';\nimport { FileUtils } from './fileUtils';\nimport { ConfigAccessor } from '@alexa-games/sfb-skill';\nimport { Command } from './command';\nimport { Utilities } from './utilities';\n\n\n/**\n * Does a clean of the story's .deploy, node_modules, and calls clean on the code directory\n */\n\nexport class CleanCommand implements Command {\n\n    constructor(\n        private readonly storyPath: string,\n        private readonly logger: Logger,\n        private readonly stdOutput: StdOutput) {\n    }\n\n    public async run() {\n        const specialDirectories = new SpecialPaths(this.storyPath);\n        const config = await ConfigAccessor.loadConfigFile(specialDirectories.abcConfig, specialDirectories.builtResourcesPath);\n\n        this.logger.status(`Checking for ${specialDirectories.deployPath}`);\n        if (fs.existsSync(specialDirectories.deployPath)) {\n            this.logger.status(`Deleting ${specialDirectories.deployPath}`);\n            await FileUtils.deleteDir(specialDirectories.deployPath, this.stdOutput);\n        }\n\n        const storyPathNodeModules = pathModule.join(specialDirectories.storyPath, NODE_MODULES_DIRECTORY);\n        this.logger.status(`Checking for ${storyPathNodeModules}`);\n        if (fs.existsSync(storyPathNodeModules)) {\n            this.logger.status(`Deleting ${storyPathNodeModules}`);\n            await FileUtils.deleteDir(storyPathNodeModules, this.stdOutput);\n        }\n\n        await this.cleanCode(specialDirectories, config.getValue(\"sfbLocalTesting\"));\n    }\n\n    private async cleanCode(dirs: SpecialPaths, isLocalTest: boolean) {\n        this.logger.status('Cleaning TypeScript code...');\n\n        if (isLocalTest) {\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.npxBin,\n                [Utilities.yarnBin, 'clean'],\n                dirs.codePath,\n                this.stdOutput,\n                {shell: true});\n        } else {\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.npmBin,\n                [ 'run', 'clean'],\n                dirs.codePath,\n                this.stdOutput,\n                {shell: true}); \n        }\n        \n        this.logger.success('Clean step completed.');\n    }\n}\n"]}
{"version":3,"file":"fileUtils.js","sourceRoot":"","sources":["../../lib/fileUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Utilities } from './utilities';\nimport { FilePath } from './filePath';\nimport { StdOutput } from './stdOutput';\nimport { promisify } from 'util';\nimport fs from 'fs';\nimport { readUtf8FileExcludingBom, readUtf8FileExcludingBomSync } from '@alexa-games/sfb-util';\n\nconst pathModule = require('path');\n\nconst chmodAsync = promisify(fs.chmod);\nconst readFileAsync = promisify(fs.readFile);\nconst writeFileAsync = promisify(fs.writeFile);\nconst copyFileAsync = promisify(fs.copyFile);\nconst statAsync = promisify(fs.stat);\nconst renameAsync = promisify(fs.rename);\n\nexport interface CopyOptions {\n    /**\n     * Sets the +w bit for the current user on the destination file. On Windows, this turns off the\n     * Read-Only flag.\n     */\n    makeDestinationWritable?: boolean;\n}\n\nexport class FileUtils {\n\n    public static async replaceInFile(file: string, searchFor: string | RegExp, replaceWith: string) {   \n        const data = await readFileAsync(file, 'utf8');\n\n        const result = data.replace(searchFor, replaceWith);\n\n        await writeFileAsync(file, result, 'utf8');\n    }\n\n    public static async deleteDir(dirPath: string, stdOutput: StdOutput) {\n        dirPath = FileUtils.fixpath(dirPath);\n        \n        if (fs.existsSync(dirPath)) {\n            if (Utilities.isWin32) {\n                await Utilities.runCommandAsync(\n                    'rmdir',\n                    [ '/s', '/q', `\"${dirPath}\"` ],\n                    stdOutput,\n                    {shell: true});\n            } else {\n                await Utilities.runCommandAsync(\n                    'rm',\n                    [ '-rf', `\"${dirPath}\"` ],\n                    stdOutput,\n                    {shell: true});\n            }\n        }\n    }\n\n    public static deleteFile(filePath: string) {\n        filePath = FileUtils.fixpath(filePath);\n        \n        if (fs.existsSync(filePath)) {\n            fs.unlinkSync(filePath);\n        }\n    }\n\n    public static async renameFileIfExists(oldPath: string, newPath: string) {\n        if (fs.existsSync(oldPath)) {\n            await renameAsync(oldPath, newPath);\n        }\n    }\n\n    public static makeDir(dirPath: string) { \n        dirPath = FileUtils.fixpath(dirPath);\n        const path = new FilePath(dirPath);\n\n        let started = false;\n\n        for (let i = 1; i <= path.length; i++) {\n            const partialPath = path.getPartialPath(i);\n            if (started || !fs.existsSync(partialPath)) {\n                started = true;\n                fs.mkdirSync(partialPath);\n            }\n        }\n    }\n    \n    public static fixpath(path: string): string {\n        // Ensure the path is a resolved and valid path.\n        return pathModule.resolve(path);\n    }\n\n    public static isValidFileName(name: string) {\n        return name === pathModule.basename(name);\n    }\n\n    /**\n     * Converts a given fullPath to a path relative to basePath if possible, otherwise\n     * fullPath is returned.\n     * @param basePath Base path to use when converting fullPath relative path\n     * @param fullPath Path to convert to a path relative to base path\n     */\n    public static getRelativePath(basePath: string, fullPath: string): string {\n\n        const basePathr = FileUtils.fixpath(basePath);\n        const fullPathr = FileUtils.fixpath(fullPath);\n        \n        let relativePath = fullPathr;\n\n        if (basePathr.length + 1 < fullPathr.length) {\n            const targetBasePath = fullPathr.substring(0, basePathr.length);\n            if (targetBasePath === basePathr) {\n                relativePath = fullPathr.substring(basePathr.length + 1);\n            }\n        }\n        \n        return relativePath;\n    }\n\n    /**\n     * Copies all files from source to destination.  Use when copy() won't work.\n     * @param src Source path\n     * @param dst Destination\n     * @param options Options that impact the copy operation\n     */\n    public static async recursiveCopy(src: string, dst: string, options?: CopyOptions) {\n        // Convert \\\\ to / so we can handle windows paths.\n        const srcPath = src.replace(/\\\\/g,'/').split('/');\n\n        let sourceTargetName = srcPath[srcPath.length - 1];\n        \n        if (sourceTargetName.length == 0) {\n            sourceTargetName = '*';\n        }\n        \n        const sourceTargetRegex = new RegExp(`^${sourceTargetName.replace(\"*\", \"[\\\\s\\\\S]*\")}$`, 'g');\n        \n        let parentPath = '';\n\n        if (srcPath && srcPath.length > 0 && srcPath[0].trim().length === 0) {\n            parentPath = \"/\";\n        }\n\n        if (srcPath.length > 1) {\n            parentPath += srcPath.slice(0, srcPath.length - 1).reduce((prev, current, index) => {\n                if (prev) {\n                    return prev + \"/\" + current;\n                } else {\n                    if (!Utilities.isWin32 && current.trim().length == 0) {\n                        return \"/\";\n                    } else {\n                        return current;\n                    }\n                }\n            });\n        }\n        \n        const files = fs.readdirSync(parentPath);\n        if (!files) {\n            return;\n        }\n\n        FileUtils.makeDir(dst);\n\n        const copyPromises: Promise<void>[] = [];\n        \n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            if (file.match(sourceTargetRegex)){\n                const sourceFilePath = pathModule.join(parentPath, file);\n                const destFilePath = pathModule.join(dst, file);\n\n                const sourceStat = fs.statSync(sourceFilePath);\n\n                if (sourceStat.isDirectory()) {\n                    copyPromises.push(FileUtils.recursiveCopy(pathModule.join(sourceFilePath, '*'), destFilePath, options));\n                } else if (!fs.existsSync(destFilePath) || \n                            sourceStat.mtimeMs > fs.statSync(destFilePath).mtimeMs) {\n                    copyPromises.push(FileUtils.copyFile(sourceFilePath, destFilePath, options));\n                    \n                }\n            }\n        }\n        \n        await Promise.all(copyPromises);\n    }\n\n    public static async copyFile(src: string, dst: string, options?: CopyOptions): Promise<void> {\n        \n        await copyFileAsync(src, dst);\n\n        if (options && options.makeDestinationWritable) {\n            const stat = await statAsync(dst);\n            await chmodAsync(dst, stat.mode | 0o600);\n        }\n    }\n\n    public static writeGitIgnore(path: string) {\n        fs.writeFileSync(pathModule.join(path, '.gitignore'),\n`dist\n.deploy\nnode_modules\n`\n        )\n    }\n\n    public static async filterFile(fileName: string, eliminate: RegExp): Promise<void> {\n        const data = await readUtf8FileExcludingBom(fileName);\n\n        let result = '';\n\n        for (let line of data.split('\\n')) {\n            if (!line.match(eliminate)) {\n                result += line + '\\n';\n            }\n        }\n        \n        await writeFileAsync(fileName, result, 'utf8');\n    }\n\n    /**\n     * Reads and parses a JSON file. Use this instead of require for JSON files.\n     * @param filePath Path to JSON file to read.\n     */\n    public static loadJson(filePath: string): any {\n        const data = readUtf8FileExcludingBomSync(filePath);\n\n        return JSON.parse(data);\n    }\n\n}\n"]}
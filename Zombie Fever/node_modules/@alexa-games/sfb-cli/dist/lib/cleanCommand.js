"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const pathModule = __importStar(require("path"));
const specialPaths_1 = require("./specialPaths");
const fileUtils_1 = require("./fileUtils");
const sfb_skill_1 = require("@alexa-games/sfb-skill");
const utilities_1 = require("./utilities");
class CleanCommand {
    constructor(storyPath, logger, stdOutput) {
        this.storyPath = storyPath;
        this.logger = logger;
        this.stdOutput = stdOutput;
    }
    async run() {
        const specialDirectories = new specialPaths_1.SpecialPaths(this.storyPath);
        const config = await sfb_skill_1.ConfigAccessor.loadConfigFile(specialDirectories.abcConfig, specialDirectories.builtResourcesPath);
        this.logger.status(`Checking for ${specialDirectories.deployPath}`);
        if (fs.existsSync(specialDirectories.deployPath)) {
            this.logger.status(`Deleting ${specialDirectories.deployPath}`);
            await fileUtils_1.FileUtils.deleteDir(specialDirectories.deployPath, this.stdOutput);
        }
        const storyPathNodeModules = pathModule.join(specialDirectories.storyPath, specialPaths_1.NODE_MODULES_DIRECTORY);
        this.logger.status(`Checking for ${storyPathNodeModules}`);
        if (fs.existsSync(storyPathNodeModules)) {
            this.logger.status(`Deleting ${storyPathNodeModules}`);
            await fileUtils_1.FileUtils.deleteDir(storyPathNodeModules, this.stdOutput);
        }
        await this.cleanCode(specialDirectories, config.getValue("sfbLocalTesting"));
    }
    async cleanCode(dirs, isLocalTest) {
        this.logger.status('Cleaning TypeScript code...');
        if (isLocalTest) {
            await utilities_1.Utilities.runCommandInDirectoryAsync(utilities_1.Utilities.npxBin, [utilities_1.Utilities.yarnBin, 'clean'], dirs.codePath, this.stdOutput, { shell: true });
        }
        else {
            await utilities_1.Utilities.runCommandInDirectoryAsync(utilities_1.Utilities.npmBin, ['run', 'clean'], dirs.codePath, this.stdOutput, { shell: true });
        }
        this.logger.success('Clean step completed.');
    }
}
exports.CleanCommand = CleanCommand;
//# sourceMappingURL=cleanCommand.js.map
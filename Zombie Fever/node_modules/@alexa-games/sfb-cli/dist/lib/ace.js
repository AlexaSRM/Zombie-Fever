"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cmd = require('commander');
const commandFactory_1 = require("./commandFactory");
const consoleLogger_1 = require("./consoleLogger");
const consoleStdOutput_1 = require("./consoleStdOutput");
const utilities_1 = require("./utilities");
const sfb_util_1 = require("@alexa-games/sfb-util");
const manifestUtils_1 = require("./manifestUtils");
sfb_util_1.crashOnUnhandledRejections();
const consoleLogger = new consoleLogger_1.ConsoleLogger();
const consoleStdOutput = new consoleStdOutput_1.ConsoleStdOutput();
const commandFactory = new commandFactory_1.CommandFactory(consoleLogger, consoleStdOutput);
cmd
    .version(manifestUtils_1.ManifestUtils.readPackageVersion(consoleLogger));
cmd
    .option('-v, --verbose', 'Increase verbose output.');
cmd
    .command('new <story>')
    .option('-t, --template [templateName]', "Template name to use for new skill. Options are 'example_story', 'tutorial', 'adventure', and 'quiz'.")
    .description('story - Path to new story. Create a new story project from a template.')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, () => {
        const template = options.template || "example_story";
        return commandFactory.buildNewProjectCommand(name, { template }).run();
    }, consoleLogger);
});
cmd
    .command('deploy <story>')
    .description('story - Path to story. Build and deploy a story to developer portal and AWS lambda.')
    .option('-o, --override', 'Override version check.')
    .option('-s, --stage [stageName]', 'Stage to deploy (i.e. dev, test, beta, prod)')
    .option('-l, --locale [localeName]', 'Locale to deploy (i.e. en-us, en-gb, fr-fr, etc.) when using different lambdas for each locale')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        const enforceLatest = !options.override;
        if (options.stage) {
            process.env["stage"] = options.stage;
        }
        if (options.locale) {
            process.env["locale"] = options.locale;
        }
        await commandFactory.buildImportCommand(name, { enforceLatest }).run();
        await commandFactory.buildBakeCommand(name).run();
        await commandFactory.buildStageCommand(name).run();
        await commandFactory.buildDeployCommand(name).run();
    }, consoleLogger);
});
cmd
    .command('deploy-metadata <story>')
    .description('story - Path to story. Build and deploy updated metadata (skill manifest and voice model) but do not deploy lambda. Useful when lambda code is large or when uploading lambda through an S3 linked zip file.')
    .option('-o, --override', 'Override version check.')
    .option('-s, --stage [stageName]', 'Stage to deploy (i.e. dev, test, beta, prod)')
    .option('-l, --locale [localeName]', 'Locale to deploy (i.e. en-us, en-gb, fr-fr, etc.) when using different lambdas for each locale')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        const enforceLatest = !options.override;
        if (options.stage) {
            process.env["stage"] = options.stage;
        }
        if (options.locale) {
            process.env["locale"] = options.locale;
        }
        await commandFactory.buildImportCommand(name, { enforceLatest }).run();
        await commandFactory.buildBakeCommand(name).run();
        await commandFactory.buildStageCommand(name).run();
        await commandFactory.buildDeployMetadataCommand(name).run();
    }, consoleLogger);
});
cmd
    .command('deploy-via-zip <story>')
    .description('story - Path to story. Build and deploy skill using a zip file transfer to S3/Lambda. Needed when on slow remote connections (because uploading to s3 is faster than aws update-function command) or when exceeding the command line 69905067 byte limit.')
    .option('-o, --override', 'Override version check.')
    .option('-s, --stage [stageName]', 'Stage to deploy (i.e. dev, test, beta, prod)')
    .option('-l, --locale [localeName]', 'Locale to deploy (i.e. en-us, en-gb, fr-fr, etc.) when using different lambdas for each locale')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        const enforceLatest = !options.override;
        if (options.stage) {
            process.env["stage"] = options.stage;
        }
        if (options.locale) {
            process.env["locale"] = options.locale;
        }
        await commandFactory.buildImportCommand(name, { enforceLatest }).run();
        await commandFactory.buildBakeCommand(name).run();
        await commandFactory.buildStageCommand(name).run();
        await commandFactory.buildDeployMetadataCommand(name).run();
        await commandFactory.buildUploadZipLambda(name, options.locale).run();
    }, consoleLogger);
});
cmd
    .command('build <story>')
    .description('story - Path to story. Build a story without deploying.')
    .option('-o, --override', 'Override version check.')
    .option('-s, --stage [stageName]', 'Stage to deploy (i.e. dev, test, beta, prod)')
    .option('-l, --locale [localeName]', 'Locale to deploy (i.e. en-us, en-gb, fr-fr, etc.) when using different lambdas for each locale')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        const enforceLatest = !options.override;
        if (options.stage) {
            process.env["stage"] = options.stage;
        }
        if (options.locale) {
            process.env["locale"] = options.locale;
        }
        await commandFactory.buildImportCommand(name, { enforceLatest }).run();
        await commandFactory.buildBakeCommand(name).run();
        await commandFactory.buildStageCommand(name).run();
    }, consoleLogger);
});
cmd
    .command('simulate <story>')
    .option('-l, --locale [locale]', 'Set Locale to Simulate')
    .option('-o, --override', 'Override version check')
    .option('-q, --quiet', 'Quiet mode')
    .description('story - Path to story. Simulate a story.')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        const locale = options.locale || "en-US";
        const quiet = !!options.quiet;
        const enforceLatest = !options.override;
        await commandFactory.buildImportCommand(name, { enforceLatest }).run();
        await commandFactory.buildBakeCommand(name).run();
        await commandFactory.buildSimulateCommand(name, { locale, quiet }).run();
    }, consoleLogger);
});
cmd
    .command('clean <story>')
    .description('story - Clean out the .deploy, code .dist folder, and any extra node_modules folders for the given story. Run clean when initially creating a new stage/locale to force the creation of a new skill id.')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        await commandFactory.buildCleanCommand(name).run();
    }, consoleLogger);
});
cmd
    .command('upload <story>')
    .description('story - Path to story. Upload public resources to S3.')
    .action(async (name, options) => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        await commandFactory.buildUploadResourcesCommand(name).run();
    }, consoleLogger);
});
cmd
    .command('vscode')
    .description('Install vscode extension for SFB editor support.')
    .action(async () => {
    await utilities_1.Utilities.wrap(cmd.verbose, async () => {
        await commandFactory.buildVscodeExtensionCommand().run();
    }, consoleLogger);
});
cmd.on('command:*', function () {
    console.error('Invalid command: %s\nSee --help for a list of available commands.', cmd.args.join(' '));
    process.exit(1);
});
cmd
    .parse(process.argv);
if (process.argv.length === 2) {
    cmd.help();
}
//# sourceMappingURL=ace.js.map
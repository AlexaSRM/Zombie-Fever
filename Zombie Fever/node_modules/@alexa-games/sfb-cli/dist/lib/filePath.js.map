{"version":3,"file":"filePath.js","sourceRoot":"","sources":["../../lib/filePath.ts"],"names":[],"mappings":";;AAEA,2CAAwC;AAExC,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAGnC,MAAa,QAAQ;IA8BjB,YAAY,IAAY;QACpB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAErC,IAAI,CAAC,SAAS,GAAG,qBAAS,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;QAEhD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAE/B,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACnD,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5E;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEtD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IAzBD,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IACjC,CAAC;IAyBM,cAAc,CAAC,MAAc;QAChC,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC/D;QAED,IAAI,MAAM,GAAG,CAAC,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACtD;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7B,IAAI,CAAC,GAAG,CAAC,EAAE;gBACP,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;aAC5B;YAED,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAC/B;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;;AAtEL,4BAuEC;AA3C2B,kBAAS,GAAG,aAAa,CAAC","sourcesContent":["declare var require: any;\n\nimport { Utilities } from './utilities';\n\nconst pathModule = require('path');\n\n\nexport class FilePath {\n    /**\n     * Resolved path\n     */\n    public readonly path: string;\n\n    /**\n     * This will be either / or C:\\ (where C is the actual driver letter)\n     */\n    public readonly pathRoot: string;\n\n    /**\n     * This will be / or \\ depending on the OS\n     */\n    public readonly delimiter: string;\n\n    /**\n     * The path split into individual directory names.\n     */\n    public readonly pathParts: string[];\n\n    /**\n     * Number of parts in the path.\n     */\n    public get length() {\n        return this.pathParts.length;\n    }\n\n    private static readonly rootRegEx = /^([A-Z]:\\\\)/;\n\n    constructor(path: string) {\n        this.path = pathModule.resolve(path);\n\n        this.delimiter = Utilities.isWin32 ? '\\\\' : '/';\n\n        this.pathRoot = this.delimiter;\n\n        const result = this.path.match(FilePath.rootRegEx);\n        if (result && result.length > 0) {\n            this.pathRoot = result[0];\n        }\n\n        if (!this.path.startsWith(this.pathRoot)) {\n            throw new Error('Expected resolved path to start with ' + this.pathRoot);\n        }\n\n        const pathToSplit = path.substr(this.pathRoot.length);\n\n        this.pathParts = pathToSplit.split(this.delimiter);\n    }\n\n    public getPartialPath(length: number) {\n        if (length > this.pathParts.length) {\n            throw new Error('Parameter length must not exceed length.');\n        }\n\n        if (length < 0) {\n            throw new Error('Parameter length be at least 0.');\n        }\n\n        let result = this.pathRoot;\n        for (let i = 0; i < length; i++) {\n            if (i > 0) {\n                result += this.delimiter;\n            }\n\n            result += this.pathParts[i];\n        }\n\n        return result;\n    }\n}\n"]}
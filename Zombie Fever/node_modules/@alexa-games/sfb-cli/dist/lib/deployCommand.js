"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pathModule = require('path');
const fs = require('fs');
const fileUtils_1 = require("./fileUtils");
const utilities_1 = require("./utilities");
const specialPaths_1 = require("./specialPaths");
const sfb_skill_1 = require("@alexa-games/sfb-skill");
class DeployCommand {
    constructor(storyPath, logger, stdOutput) {
        this.storyPath = storyPath;
        this.logger = logger;
        this.stdOutput = stdOutput;
    }
    async run() {
        this.logger.status("Deploying...");
        const dirs = new specialPaths_1.SpecialPaths(this.storyPath);
        const config = await sfb_skill_1.ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);
        const configDirs = dirs.getConfigDirectories(config);
        const askProfileName = config.getValue("ask-profile-name");
        let startTime = Date.now();
        await this.restoreDeploymentMetadata(dirs, configDirs);
        await utilities_1.Utilities.runCommandInDirectoryAsync(utilities_1.Utilities.npxBin, ['ask', 'deploy', '--no-wait', '--force', '--profile', askProfileName], configDirs.askSkillFullPath, this.stdOutput, { shell: true });
        await this.preserveDeploymentMetadata(dirs, configDirs);
        let duration = Date.now() - startTime;
        this.logger.success(`Deployment finished in ${duration} ms.`);
    }
    async restoreDeploymentMetadata(dirs, configPaths) {
        const skillManifestFilePath = pathModule.join(dirs.metaDataStoragePath, specialPaths_1.SKILL_MANIFEST_FILE);
        await this.copyIfPresent(skillManifestFilePath, configPaths.askSkillFullPath);
        const askConfigFilePath = pathModule.join(dirs.metaDataStoragePath, 'ask_config');
        const skillAskConfigFolder = pathModule.join(configPaths.askSkillFullPath, '.ask');
        const stagedAskConfigFile = pathModule.join(skillAskConfigFolder, 'config');
        fileUtils_1.FileUtils.makeDir(skillAskConfigFolder);
        if (fs.existsSync(askConfigFilePath)) {
            await fileUtils_1.FileUtils.copyFile(askConfigFilePath, stagedAskConfigFile);
        }
    }
    async preserveDeploymentMetadata(dirs, configPaths) {
        this.logger.status('Creating a copy of .ask/config for safe keeping...');
        const skillAskConfigFolder = pathModule.join(configPaths.askSkillFullPath, '.ask');
        const stagedAskConfigFile = pathModule.join(skillAskConfigFolder, 'config');
        if (fs.existsSync(stagedAskConfigFile)) {
            fileUtils_1.FileUtils.makeDir(dirs.metaDataStoragePath);
            const askConfigFilePath = pathModule.join(dirs.metaDataStoragePath, 'ask_config');
            await fileUtils_1.FileUtils.copyFile(stagedAskConfigFile, askConfigFilePath);
        }
    }
    async copyIfPresent(src, dst, message) {
        if (fs.existsSync(src)) {
            if (message) {
                this.logger.status(message);
            }
            await fileUtils_1.FileUtils.recursiveCopy(src, dst);
        }
    }
}
exports.DeployCommand = DeployCommand;
//# sourceMappingURL=deployCommand.js.map
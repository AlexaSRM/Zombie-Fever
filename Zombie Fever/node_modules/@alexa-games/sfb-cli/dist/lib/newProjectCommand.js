"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pathModule = require('path');
const fs = require('fs');
const fileUtils_1 = require("./fileUtils");
const specialPaths_1 = require("./specialPaths");
const manifestUtils_1 = require("./manifestUtils");
const template = {
    storyId: 'my-branch-story',
    storyTitle: 'My Branch Story'
};
class NewProjectCommand {
    constructor(storyPath, template, logger, stdOutput) {
        this.storyPath = storyPath;
        this.template = template;
        this.logger = logger;
        this.stdOutput = stdOutput;
    }
    async run() {
        const storyName = pathModule.basename(this.storyPath);
        const storyId = storyName.replace(/ /g, '-').toLowerCase();
        const storyTitle = storyName.replace(/-/g, ' ');
        const dirs = new specialPaths_1.SpecialPaths(this.storyPath);
        const dest = fileUtils_1.FileUtils.fixpath(this.storyPath);
        if (fs.existsSync(dest)) {
            throw new Error(`Directory already exists: ${dest}`);
        }
        const samplesSource = pathModule.join(dirs.skillSourceTemplateRoot, this.template, '*');
        this.logger.status(`Copying ${samplesSource} to ${dest}...`);
        await fileUtils_1.FileUtils.recursiveCopy(samplesSource, dest, { makeDestinationWritable: true });
        const configFile = pathModule.join(dest, 'abcConfig.json');
        await fileUtils_1.FileUtils.replaceInFile(configFile, new RegExp(template.storyId, 'g'), storyId);
        await fileUtils_1.FileUtils.replaceInFile(configFile, new RegExp(template.storyTitle, 'g'), storyTitle);
        const placeholderPackageManifestFilePath = pathModule.join(dirs.codePath, `_${specialPaths_1.PACKAGE_MANIFEST_FILE}`);
        const packageManifestFilePath = pathModule.join(dirs.codePath, specialPaths_1.PACKAGE_MANIFEST_FILE);
        await fileUtils_1.FileUtils.renameFileIfExists(placeholderPackageManifestFilePath, packageManifestFilePath);
        const manifest = fileUtils_1.FileUtils.loadJson(packageManifestFilePath);
        await manifestUtils_1.ManifestUtils.repairPackageManifest(manifest);
        fs.writeFileSync(packageManifestFilePath, JSON.stringify(manifest, null, 4));
        this.logger.success(`New story ${storyName} is ready.`);
    }
}
exports.NewProjectCommand = NewProjectCommand;
//# sourceMappingURL=newProjectCommand.js.map
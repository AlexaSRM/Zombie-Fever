import { Command } from './command';
import { Logger } from './logger';
import { StdOutput } from './stdOutput';
export interface BuildOptions {
    enforceLatest: boolean;
}
export interface NewProjectOptions {
    template: string;
}
export interface SimulateOptions {
    locale: string;
    quiet: boolean;
}
export interface TestOptions {
    locale: string;
}
export declare class CommandFactory {
    private readonly logger;
    private readonly stdOutput;
    constructor(logger?: Logger, stdOutput?: StdOutput);
    buildBakeCommand(storyPath: string): Command;
    buildDeployCommand(storyPath: string): Command;
    buildDeployMetadataCommand(storyPath: string): Command;
    buildUploadZipLambda(storyPath: string, locale: string): Command;
    buildImportCommand(storyPath: string, options: BuildOptions): Command;
    buildNewProjectCommand(storyPath: string, options: NewProjectOptions): Command;
    buildSimulateCommand(storyPath: string, options: SimulateOptions): Command;
    buildTestCommand(storyPath: string, options: TestOptions): Command;
    buildStageCommand(storyPath: string): Command;
    buildCleanCommand(storyPath: string): Command;
    buildUploadResourcesCommand(storyPath: string): Command;
    buildVscodeExtensionCommand(): Command;
}

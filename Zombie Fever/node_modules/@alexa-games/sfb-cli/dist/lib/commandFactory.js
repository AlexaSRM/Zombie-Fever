"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const consoleLogger_1 = require("./consoleLogger");
const consoleStdOutput_1 = require("./consoleStdOutput");
const bakeCommand_1 = require("./bakeCommand");
const deployCommand_1 = require("./deployCommand");
const deployMetadataCommand_1 = require("./deployMetadataCommand");
const uploadZipLambdaCommand_1 = require("./uploadZipLambdaCommand");
const importCommand_1 = require("./importCommand");
const newProjectCommand_1 = require("./newProjectCommand");
const simulateCommand_1 = require("./simulateCommand");
const testCommand_1 = require("./testCommand");
const stageCommand_1 = require("./stageCommand");
const cleanCommand_1 = require("./cleanCommand");
const uploadResourcesCommand_1 = require("./uploadResourcesCommand");
const vscodeExtensionCommand_1 = require("./vscodeExtensionCommand");
class CommandFactory {
    constructor(logger, stdOutput) {
        this.logger = logger ? logger : new consoleLogger_1.ConsoleLogger();
        this.stdOutput = stdOutput ? stdOutput : new consoleStdOutput_1.ConsoleStdOutput();
    }
    buildBakeCommand(storyPath) {
        return new bakeCommand_1.BakeCommand(storyPath, this.logger);
    }
    buildDeployCommand(storyPath) {
        return new deployCommand_1.DeployCommand(storyPath, this.logger, this.stdOutput);
    }
    buildDeployMetadataCommand(storyPath) {
        return new deployMetadataCommand_1.DeployMetadataCommand(storyPath, this.logger, this.stdOutput);
    }
    buildUploadZipLambda(storyPath, locale) {
        return new uploadZipLambdaCommand_1.UploadZipLambdaCommand(storyPath, this.logger, locale, this.stdOutput);
    }
    buildImportCommand(storyPath, options) {
        return new importCommand_1.ImportCommand(storyPath, options.enforceLatest, this.logger, this.stdOutput);
    }
    buildNewProjectCommand(storyPath, options) {
        return new newProjectCommand_1.NewProjectCommand(storyPath, options.template, this.logger, this.stdOutput);
    }
    buildSimulateCommand(storyPath, options) {
        return new simulateCommand_1.SimulateCommand(storyPath, options.locale, options.quiet, this.logger);
    }
    buildTestCommand(storyPath, options) {
        return new testCommand_1.TestCommand(storyPath, options.locale, this.logger);
    }
    buildStageCommand(storyPath) {
        return new stageCommand_1.StageCommand(storyPath, this.logger, this.stdOutput);
    }
    buildCleanCommand(storyPath) {
        return new cleanCommand_1.CleanCommand(storyPath, this.logger, this.stdOutput);
    }
    buildUploadResourcesCommand(storyPath) {
        return new uploadResourcesCommand_1.UploadResourcesCommand(storyPath, this.logger, this.stdOutput);
    }
    buildVscodeExtensionCommand() {
        return new vscodeExtensionCommand_1.VscodeExtensionCommand(this.logger, this.stdOutput);
    }
}
exports.CommandFactory = CommandFactory;
//# sourceMappingURL=commandFactory.js.map
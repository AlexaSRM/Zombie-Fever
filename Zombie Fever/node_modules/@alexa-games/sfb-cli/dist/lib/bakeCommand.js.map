{"version":3,"file":"bakeCommand.js","sourceRoot":"","sources":["../../lib/bakeCommand.ts"],"names":[],"mappings":"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","sourcesContent":["\ndeclare var require: any;\n\nconst fs = require('fs')\nconst path = require('path')\n\nimport { FileUtils } from './fileUtils';\nimport { SpecialPaths } from './specialPaths';\nimport { ConfigAccessor } from '@alexa-games/sfb-skill';\nimport { Command } from './command';\nimport { Logger } from './logger';\n\n/**\n * Run this after import to copy files out to the baked folder for easy reference.\n * (Optional)\n * Reads: Output path\n * Writes: Baked path\n * Depends on: ImportCommand\n */\nexport class BakeCommand implements Command {\n\n    constructor(\n        private readonly storyPath: string,\n        private readonly logger: Logger) {\n    }\n\n    public async run() {\n        const dirs = new SpecialPaths(this.storyPath);\n        const config = await ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);\n\n        this.logger.status('Copying baked output to the baked folder for your reference...');\n        \n        for (let locale of config.publishLocales) {\n            await this.copyContent(locale, dirs, config);\n        }\n\n        // Do a bake for the apl-templates files, which may have a subdirectory of additional content\n        // files to bake into the main file\n        this.logger.status('Checking for apl-template files to bake...');\n        for (let locale of config.publishLocales) {\n            const aplTemplatesFilePath = config.getAplTemplatesFilePath(locale);\n            await this.bakeAPLFiles(aplTemplatesFilePath, aplTemplatesFilePath);\n        }\n\n        this.logger.success('Baked output copied.');\n    }\n    \n    private async copyContent(locale: string, dirs: SpecialPaths, config: ConfigAccessor) {\n        const localeBuildOutputPath = dirs.getLocaleBuiltResourcesPath(locale);\n\n        const voiceOverFileName = config.getValue(\"abc-recording-script-filename\", undefined, locale);\n        const bakedStoryName = config.getValue(\"abc-baked-filename\", undefined, locale);\n\n        await FileUtils.recursiveCopy(`${localeBuildOutputPath}/${bakedStoryName}`, `${dirs.bakedPath}/${locale}`);\n                \n        if (fs.existsSync(`${localeBuildOutputPath}/${voiceOverFileName}`)) {\n            await FileUtils.recursiveCopy(`${localeBuildOutputPath}/${voiceOverFileName}`, `${dirs.bakedPath}/${locale}`);\n        }\n    }\n\n    // Check and see if there is an \"apl-templates\" subdirectory to combine into the apl-templates file.\n    // This let's users keep APL files by name in a sub-directory then refer to them later by that file name.\n    // Makes for much easier integration with the APL Designer website, which works on one APL file at a time.\n    async bakeAPLFiles(aplTemplatesFilePath: string, outputAPLFilePath: string) {\n\n        if(aplTemplatesFilePath) {\n\n            const dirNamePath = path.dirname(aplTemplatesFilePath);\n\n            if(dirNamePath) {\n\n                const aplDirName = path.resolve(path.join(dirNamePath, \"apl-templates\"));\n\n                if(fs.existsSync(aplDirName)) {\n\n                    // Now list all files in this directory\n                    const fileList = readdirRecursiveSync(aplDirName);\n\n                    if(fileList.length > 0) {\n\n                        // Now load the source APL file, and combine all the additional files into it\n                        let sourceAPLJSON : any = {};\n\n                        if(fs.existsSync(aplTemplatesFilePath)) {\n                            try {\n                                sourceAPLJSON = JSON.parse(fs.readFileSync(aplTemplatesFilePath));\n                            } catch (e) {\n                                this.logger.warning(e);\n                                throw new Error(`Unable to JSON parse APL file ${aplTemplatesFilePath}`);\n                            }\n                        }\n\n                        for(const filename of fileList) {\n\n                            const aplFile = path.join(aplDirName, filename);\n\n                            try {\n                                const fileAPLJson = JSON.parse(fs.readFileSync( aplFile ));\n\n                                let keyName = path.join(path.dirname(filename), path.basename(filename, \".json\"));\n\n                                // Turn slashes in the filename into \".\"'s\n                                keyName = keyName.replace(\"\\\\\", \".\").replace(\"/\", \".\");\n    \n                                sourceAPLJSON[keyName] = fileAPLJson;    \n                            } catch (e) {\n                                this.logger.warning(e);\n                                throw new Error(`Unable to JSON parse APL file ${aplFile}`);\n                            }\n                        }\n\n                        // Now write out the combined file\n                        fs.writeFileSync(outputAPLFilePath, JSON.stringify(sourceAPLJSON, undefined, 2));\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n// return all the files in the given folder path recursively, with their path\n// that remains after the initial folderPath is removed\nfunction readdirRecursiveSync(folderPath : string) {\n    \n    const returnedFileList : string[]= [];\n  \n    readdirRecursiveSyncHelper(\n        folderPath,\n        path.resolve(folderPath),\n        returnedFileList\n        );\n\n    return returnedFileList;\n}\n  \n// helper function for above recursive promisified function above\nfunction readdirRecursiveSyncHelper(\n    originalFolderPath : string,\n    folderPath : string,\n    returnedFileList : string[]\n  ) {\n    const files = fs.readdirSync(folderPath);\n  \n    files.forEach((filename : string) => {\n      const stats = fs.statSync(path.resolve(folderPath, filename));\n  \n      if (stats.isDirectory()) {\n        readdirRecursiveSyncHelper(\n          originalFolderPath,\n          path.resolve(folderPath, filename),\n          returnedFileList\n        );\n      } else {\n        const relativePath = path.relative(\n          originalFolderPath,\n          path.resolve(folderPath, filename)\n        );\n        returnedFileList.push(relativePath);\n      }\n    });\n}"]}
{"version":3,"file":"specialPaths.js","sourceRoot":"","sources":["../../lib/specialPaths.ts"],"names":[],"mappings":"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","sourcesContent":["import { FileUtils } from './fileUtils';\nimport { ConfigAccessor } from '@alexa-games/sfb-skill';\nimport * as pathModule from 'path';\n\nexport const ABC_CONFIG_FILE = 'abcConfig.json';\nexport const DEPLOY_DIRECTORY = '.deploy';\nexport const BUILD_OUTPUT_DIRECTORY = 'dist';\nexport const BUILT_RESOURCES_DIRECTORY = 'res';\nexport const BAKED_DIRECTORY = 'baked';\nexport const RESOURCES_DIRECTORY = 'resources';\nexport const METADATA_DIRECTORY = 'metadata';\nexport const CODE_DIRECTORY = 'code';\nexport const CONTENT_DIRECTORY = 'content';\nexport const SKILL_SOURCE_TEMPLATES_DIRECTORY = 'samples';\nexport const NODE_MODULES_DIRECTORY = 'node_modules';\nexport const PACKAGE_MANIFEST_FILE = 'package.json';\nexport const SAMPLE_STORY = 'example_story';\nexport const EXTENSIONS_DIRECTORY = 'extensions';\nexport const SKILL_MANIFEST_FILE = 'skill.json';\n\nexport interface ConfigPaths {\n    askSkillDirectoryName: string;\n    askSkillFullPath: string;\n    lambdaCodeDeployPath: string;\n    modelsDeployPath: string;\n}\n\nexport class SpecialPaths {\n    public readonly abcConfig: string;\n    public readonly deployPath: string;\n    public readonly storyPath: string;\n    public readonly aceRootPath: string;\n    public readonly buildOutputPath: string;\n    public readonly builtResourcesPath: string;\n    public readonly bakedPath: string;\n    public readonly metaDataStoragePath: string;\n    public readonly codePath: string;\n    public readonly codeBuildOutputPath: string;\n    public readonly contentPath: string;\n    public readonly skillSourceTemplates: string;\n    public readonly skillSourceTemplateRoot: string;\n    public readonly extensionLoaderPath: string;\n\n    private configDirs?: ConfigPaths;\n\n    constructor(storyPath: string) {\n        this.storyPath = FileUtils.fixpath(storyPath);\n        this.abcConfig = pathModule.join(this.storyPath, ABC_CONFIG_FILE);\n        this.deployPath = pathModule.join(this.storyPath, DEPLOY_DIRECTORY);\n        this.buildOutputPath = pathModule.join(this.deployPath, BUILD_OUTPUT_DIRECTORY);\n        this.builtResourcesPath = pathModule.join(this.buildOutputPath, BUILT_RESOURCES_DIRECTORY);\n        this.aceRootPath = FileUtils.fixpath(pathModule.join(__dirname, '../..'));\n        this.bakedPath = pathModule.join(this.storyPath, BAKED_DIRECTORY);\n        this.codePath = pathModule.join(this.storyPath, CODE_DIRECTORY);\n        this.codeBuildOutputPath = pathModule.join(this.codePath, BUILD_OUTPUT_DIRECTORY);\n        this.contentPath = pathModule.join(this.storyPath, CONTENT_DIRECTORY);\n        this.skillSourceTemplates = pathModule.join(this.aceRootPath, SKILL_SOURCE_TEMPLATES_DIRECTORY, SAMPLE_STORY);\n        this.skillSourceTemplateRoot = pathModule.join(this.aceRootPath, SKILL_SOURCE_TEMPLATES_DIRECTORY);\n        this.extensionLoaderPath = pathModule.join(this.codeBuildOutputPath, EXTENSIONS_DIRECTORY, 'ExtensionLoader');\n\n        let stageAndLocale = \"\";\n        if(process.env['stage']) {\n            stageAndLocale += process.env['stage'];\n            if(process.env['locale']) {\n                stageAndLocale += '-';\n            }\n        }\n        if(process.env['locale']) {\n            stageAndLocale += process.env['locale'];\n        }\n\n        this.metaDataStoragePath = pathModule.join(this.storyPath, METADATA_DIRECTORY, stageAndLocale); // Support different stages and locales for metadata path\n    }\n\n    public getResourcePath(locale: string) {\n        return pathModule.join(this.getLocaleContentPath(locale), RESOURCES_DIRECTORY);\n    }\n\n    public getLocaleContentPath(locale: string) {\n        return pathModule.join(this.contentPath, locale);\n    }\n\n    public getLocaleBuiltResourcesPath(locale: string) {\n        return pathModule.join(this.builtResourcesPath, locale);\n    }\n\n    public async loadConfigDirectories(): Promise<ConfigPaths> {\n        \n        if (!this.configDirs) {\n            const config = await ConfigAccessor.loadConfigFile(this.abcConfig, this.builtResourcesPath);\n            this.configDirs = this.getConfigDirectories(config);\n        }\n        return this.configDirs;\n    }\n\n    public getConfigDirectories(config: ConfigAccessor): ConfigPaths {\n        const askSkillDirectoryName = config.askSkillDirectoryName;\n        const askSkillFullPath = pathModule.join(this.deployPath, askSkillDirectoryName);\n\n        return {\n            askSkillDirectoryName,\n            askSkillFullPath,\n            lambdaCodeDeployPath: pathModule.join(askSkillFullPath, 'lambda', 'custom'),\n            modelsDeployPath: pathModule.join(askSkillFullPath, 'models')\n        };\n    }\n}"]}
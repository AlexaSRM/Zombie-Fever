"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pathModule = require('path');
const fs = require('fs');
const utilities_1 = require("./utilities");
const specialPaths_1 = require("./specialPaths");
const sfb_skill_1 = require("@alexa-games/sfb-skill");
class UploadZipLambdaCommand {
    constructor(storyPath, logger, locale, stdOutput) {
        this.storyPath = storyPath;
        this.logger = logger;
        this.locale = locale;
        this.stdOutput = stdOutput;
    }
    async run() {
        this.logger.status("Zipping and Uploading Lambda...");
        let startTime = Date.now();
        const dirs = new specialPaths_1.SpecialPaths(this.storyPath);
        const config = await sfb_skill_1.ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);
        const configDirs = dirs.getConfigDirectories(config);
        const askProfileName = config.getValue("ask-profile-name");
        await utilities_1.Utilities.runCommandInDirectoryAsync(utilities_1.Utilities.npxBin, ['rimraf', 'index.zip'], dirs.storyPath, this.stdOutput, { shell: true });
        if (utilities_1.Utilities.isWin32) {
            await utilities_1.Utilities.runCommandInDirectoryAsync("7z", ['a', '-r', 'index.zip', configDirs.lambdaCodeDeployPath + "/*"], dirs.storyPath, this.stdOutput, { shell: true });
        }
        else {
            await utilities_1.Utilities.runCommandInDirectoryAsync("zip", ['-rg', 'index.zip', configDirs.lambdaCodeDeployPath], dirs.storyPath, this.stdOutput, { shell: true });
        }
        const s3BucketName = config.getS3BucketName(this.locale);
        const skillDirectoryName = configDirs.askSkillDirectoryName;
        await utilities_1.Utilities.runCommandInDirectoryAsync(utilities_1.Utilities.npxBin, ['aws', 's3', 'cp', './index.zip', `s3://${s3BucketName}/lambda-zips/${skillDirectoryName}/`, '--profile', askProfileName], dirs.storyPath, this.stdOutput, { shell: true });
        let region = config.getValue("aws-region");
        if (!region) {
            region = "us-east-1";
            this.logger.status(`Defaulting to S3 AWS Region ${region} because 'aws-region' config not set in your abcConfig.json file.`);
        }
        const lambdaFunctionName = `ask-custom-${skillDirectoryName}-default`;
        await utilities_1.Utilities.runCommandInDirectoryAsync(utilities_1.Utilities.npxBin, ['aws', 'lambda', 'update-function-code', "--function-name", lambdaFunctionName, "--region", region, "--s3-bucket", s3BucketName, "--s3-key", `lambda-zips/${skillDirectoryName}/index.zip`, '--profile', askProfileName], dirs.storyPath, this.stdOutput, { shell: true });
        let duration = Date.now() - startTime;
        this.logger.success(`Zip and Upload finished in ${duration} ms.`);
    }
}
exports.UploadZipLambdaCommand = UploadZipLambdaCommand;
//# sourceMappingURL=uploadZipLambdaCommand.js.map
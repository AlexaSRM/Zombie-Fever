{"version":3,"file":"stageCommand.js","sourceRoot":"","sources":["../../lib/stageCommand.ts"],"names":[],"mappings":";;;;;;;;;AAAA,uCAAyB;AACzB,iDAAmC;AAEnC,iDAKwB;AACxB,2CAAwC;AAGxC,2CAAwC;AACxC,sDAAwD;AAUxD,MAAa,YAAY;IAErB,YACqB,SAAiB,EACjB,MAAc,EACd,SAAoB;QAFpB,cAAS,GAAT,SAAS,CAAQ;QACjB,WAAM,GAAN,MAAM,CAAQ;QACd,cAAS,GAAT,SAAS,CAAW;IACzC,CAAC;IAEM,KAAK,CAAC,GAAG;QACZ,MAAM,kBAAkB,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE5D,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE;YAC9C,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;SACvE;QAED,MAAM,YAAY,GAAG,MAAM,0BAAc,CAAC,cAAc,CAAC,kBAAkB,CAAC,SAAS,EAAE,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QAE9H,MAAM,UAAU,GAAG,kBAAkB,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAEzE,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;QAE1D,MAAM,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,cAAc,EAAE,YAAY,CAAC,CAAA;QAE3G,MAAM,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,UAAU,EAAE,YAAY,CAAC,cAAc,CAAC,CAAC;QAE5F,MAAM,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;IACrE,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,IAAkB,EAAE,UAAuB;QAE3E,MAAM,wBAAwB,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,kCAAmB,CAAC,CAAC;QAChG,MAAM,iBAAiB,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,kCAAmB,CAAC,CAAC;QAE5F,IAAI,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,wBAAwB,CAAC,EAAE;YAC9E,qBAAS,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAE5C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,kCAAmB,oBAAoB,CAAC,CAAC;YAEvE,MAAM,qBAAS,CAAC,QAAQ,CAAC,iBAAiB,EAAE,wBAAwB,CAAC,CAAC;SACzE;IACL,CAAC;IAKO,KAAK,CAAC,cAAc,CAAC,IAAkB,EAAE,UAAuB;QACpE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uDAAuD,CAAC,CAAC;QAE5E,IAAI,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;YAC5C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,gBAAgB,uDAAuD,CAAC,CAAC;SAC7G;aAAM;YACH,IAAI;gBACA,qBAAS,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAEnC,MAAM,cAAc,GAAG,kEAAkE,CAAC;gBAC1F,MAAM,eAAe,GAAG,eAAe,CAAC;gBAExC,MAAM,qBAAS,CAAC,0BAA0B,CACtC,qBAAS,CAAC,MAAM,EAChB,CAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,eAAe,EAAE,cAAc,EAAE,UAAU,CAAC,qBAAqB,CAAE,EAC1H,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,SAAS,EACd,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;gBAEnB,IAAI,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE;oBAChD,MAAM,qBAAS,CAAC,SAAS,CAAC,UAAU,CAAC,oBAAoB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9E;aACJ;oBAAS;gBAGN,MAAM,qBAAS,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,gBAAgB,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aACpF;SACJ;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,wDAAwD,CAAC,CAAC;IAClF,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,IAAkB,EAAE,UAAuB,EAAE,cAAwB,EAAE,YAA4B;QACnI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,sCAAsC,CAAC,CAAC;QAE3D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC;QACpD,MAAM,qBAAS,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,CAAC,EAAE,UAAU,CAAC,oBAAoB,EAAE,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC,CAAC;QAE9I,MAAM,qBAAS,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,CAAC,EAAE,UAAU,CAAC,oBAAoB,EAAE,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC,CAAC;QAElJ,MAAM,IAAI,CAAC,sCAAsC,CAAC,IAAI,EAAE,UAAU,EAAE,YAAY,CAAC,QAAQ,CAAC,iBAAiB,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;QAElI,IAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,mBAAmB,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE;YAChE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;YACxC,MAAM,qBAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,EAC5D,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC,CAAC;SACvE;QAED,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,KAAK,IAAI,MAAM,IAAI,cAAc,EAAE;YAC/B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,qBAAqB,MAAM,sBAAsB,CAAC,CAAC;YAEtE,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,OAAO,CAAC,CAAC;YAChG,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBAC5B,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,GAAG,MAAM,OAAO,CAAC,CAAC,CAAC;aAChG;iBAAM;gBACH,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,WAAW,kBAAkB,CAAC,CAAA;gBACpD,OAAO,GAAG,IAAI,CAAC;aAClB;SACJ;QAED,IAAI,OAAO,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAA;SAChE;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;IAC7D,CAAC;IAEO,KAAK,CAAC,sCAAsC,CAAC,IAAkB,EAAE,UAAuB,EAAE,WAAoB;QAClH,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uCAAuC,CAAC,CAAC;QAE5D,MAAM,6BAA6B,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,oBAAoB,EAAE,oCAAqB,CAAC,CAAC;QAS9G,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,oCAAqB,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QACnH,OAAO,eAAe,CAAC,eAAe,CAAC;QACvC,EAAE,CAAC,aAAa,CAAC,6BAA6B,EAAE,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAG1F,IAAI,WAAW,EAAE;YACb,MAAM,qBAAS,CAAC,0BAA0B,CACtC,qBAAS,CAAC,MAAM,EAChB,CAAE,qBAAS,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAE,EAChD,UAAU,CAAC,oBAAoB,EAC/B,IAAI,CAAC,SAAS,EACd,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;SACtB;aAAM;YACH,MAAM,qBAAS,CAAC,0BAA0B,CACtC,qBAAS,CAAC,MAAM,EAChB,CAAE,SAAS,EAAE,cAAc,CAAE,EAC7B,UAAU,CAAC,oBAAoB,EAC/B,IAAI,CAAC,SAAS,EACd,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;SACtB;IAOL,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,IAAkB,EAAE,UAAuB,EAAE,cAAwB;QAEnG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;QAEjD,MAAM,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,kCAAmB,CAAC,CAAC;QACvF,MAAM,iBAAiB,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,kCAAmB,CAAC,CAAC;QAE5F,IAAI,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;YAChC,MAAM,qBAAS,CAAC,QAAQ,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;SAChE;QAED,IAAI,QAAQ,GAAG,qBAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QACrD,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,KAAK,IAAI,MAAM,IAAI,cAAc,EAAE;YAC/B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC1D,OAAO,GAAG,IAAI,CAAC;gBACf,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aAClJ;SACJ;QAED,KAAK,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE;YAC7E,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAClC,OAAO,GAAG,IAAI,CAAC;gBACf,OAAO,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAClE;SACJ;QAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;YAC3C,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG;gBACvC;oBACI,MAAM,EAAC,wBAAwB;iBAClC;aACJ,CAAC;YACF,OAAO,GAAG,IAAI,CAAC;SAClB;QAED,IAAI,OAAO,EAAE;YACT,EAAE,CAAC,aAAa,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC1E;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IACnD,CAAC;CACJ;AAnMD,oCAmMC","sourcesContent":["import * as fs from 'fs';\nimport * as pathModule from 'path';\n\nimport { \n    SpecialPaths,\n    ConfigPaths,\n    PACKAGE_MANIFEST_FILE,\n    SKILL_MANIFEST_FILE\n} from './specialPaths';\nimport { Utilities } from './utilities';\nimport { Logger } from './logger';\nimport { StdOutput } from './stdOutput';\nimport { FileUtils } from './fileUtils';\nimport { ConfigAccessor } from '@alexa-games/sfb-skill';\nimport { Command } from './command';\n\n/**\n * Gathers all files to the deployment folder.  \n * Reads: Output path\n * Writes: Deploy path\n * Depends on: ImportCommand\n */\n\nexport class StageCommand implements Command {\n\n    constructor(\n        private readonly storyPath: string,\n        private readonly logger: Logger,\n        private readonly stdOutput: StdOutput) {\n    }\n\n    public async run() {\n        const specialDirectories = new SpecialPaths(this.storyPath);\n\n        if (!fs.existsSync(specialDirectories.storyPath)) {\n            throw new Error('Cannot find path ' + specialDirectories.storyPath);\n        }\n\n        const configHelper = await ConfigAccessor.loadConfigFile(specialDirectories.abcConfig, specialDirectories.builtResourcesPath);\n\n        const configDirs = specialDirectories.getConfigDirectories(configHelper);\n\n        await this.makeAskPayload(specialDirectories, configDirs);\n\n        await this.copyOverAskSkillFiles(specialDirectories, configDirs, configHelper.publishLocales, configHelper)\n\n        await this.modifySkillManifest(specialDirectories, configDirs, configHelper.publishLocales);\n\n        await this.preserveSkillManifest(specialDirectories, configDirs);\n    }\n\n    private async preserveSkillManifest(dirs: SpecialPaths, configDirs: ConfigPaths) {\n\n        const skillManifestStoragePath = pathModule.join(dirs.metaDataStoragePath, SKILL_MANIFEST_FILE);\n        const skillManifestPath = pathModule.join(configDirs.askSkillFullPath, SKILL_MANIFEST_FILE);\n\n        if (fs.existsSync(skillManifestPath) && !fs.existsSync(skillManifestStoragePath)) {\n            FileUtils.makeDir(dirs.metaDataStoragePath);\n\n            this.logger.status(`Copying ${SKILL_MANIFEST_FILE} for safe keeping.`);\n\n            await FileUtils.copyFile(skillManifestPath, skillManifestStoragePath);\n        }\n    }\n\n    /**\n     * Use ASK to create the file structure for a skill using one of their templates.\n     */\n    private async makeAskPayload(dirs: SpecialPaths, configDirs: ConfigPaths) {\n        this.logger.status('Staging deployment folder layout with ASK template...');\n\n        if (fs.existsSync(configDirs.askSkillFullPath)) {\n            this.logger.status(`${configDirs.askSkillFullPath}: The skill folder already exists, skipping creation.`);\n        } else {\n            try {\n                FileUtils.makeDir(dirs.deployPath);\n    \n                const askTemplateUrl = 'https://s3.amazonaws.com/ask-cli/templates/nodejs-templates.json';\n                const askTemplateName = '\"Hello World\"';\n\n                await Utilities.runCommandInDirectoryAsync(\n                    Utilities.npxBin,\n                    [ 'ask', 'new', '--url', askTemplateUrl, '--template', askTemplateName, '--skill-name', configDirs.askSkillDirectoryName ],\n                    dirs.deployPath,\n                    this.stdOutput,\n                    {shell: true});\n\n                if (fs.existsSync(configDirs.lambdaCodeDeployPath)) {\n                    await FileUtils.deleteDir(configDirs.lambdaCodeDeployPath, this.stdOutput);\n                }\n            } finally {\n                // ask setups git for the new project folder.  We don't want this since the folder is \n                // temporary.\n                await FileUtils.deleteDir(`${configDirs.askSkillFullPath}/.git`, this.stdOutput);\n            }\n        }\n\n        this.logger.success('Deployment folder layout was staged with ASK template.');\n    }\n\n    private async copyOverAskSkillFiles(dirs: SpecialPaths, configDirs: ConfigPaths, publishLocales: string[], configHelper: ConfigAccessor) {\n        this.logger.status('Copying over story specific files...');\n\n        this.logger.status('Copying build output files...');\n        await FileUtils.recursiveCopy(pathModule.join(dirs.buildOutputPath, '*'), configDirs.lambdaCodeDeployPath, { makeDestinationWritable: true });\n\n        await FileUtils.recursiveCopy(pathModule.join(dirs.codeBuildOutputPath, '*'), configDirs.lambdaCodeDeployPath, { makeDestinationWritable: true });\n\n        await this.setupNodeModulesUsingInstallProduction(dirs, configDirs, configHelper.getValue(\"sfbLocalTesting\", undefined, \"en-US\"));\n\n        if(!configHelper.getValue(\"skipFFMPEGInclude\", undefined, \"en-US\")) {\n            this.logger.status('Copying ffmpeg...');\n            await FileUtils.copyFile(pathModule.join(dirs.aceRootPath, 'ffmpeg'), \n                    pathModule.join(configDirs.lambdaCodeDeployPath, 'ffmpeg'));    \n        }\n\n        let failure = false;\n        for (let locale of publishLocales) {\n            this.logger.status(`Copying model for ${locale} to deployment path.`);\n\n            const modelOutput = pathModule.join(dirs.getLocaleBuiltResourcesPath(locale), `${locale}.json`);\n            if (fs.existsSync(modelOutput)) {\n                fs.copyFileSync(modelOutput, pathModule.join(configDirs.modelsDeployPath, `${locale}.json`));\n            } else {\n                this.logger.status(`${modelOutput} does not exist.`)\n                failure = true;\n            }\n        }\n\n        if (failure) {\n            throw new Error('Error copying models to deployment folder.')\n        }\n\n        this.logger.success('Story specific files copied over.');\n    }\n\n    private async setupNodeModulesUsingInstallProduction(dirs: SpecialPaths, configDirs: ConfigPaths, isLocalTest: boolean) {\n        this.logger.status('Installing production node_modules...');\n\n        const lambdaPackageManifestFilePath = pathModule.join(configDirs.lambdaCodeDeployPath, PACKAGE_MANIFEST_FILE);\n\n        /* TODO: Restore after https://issues.amazon.com/issues/P25551675 is resolved\n        await FileUtils.copyFile(\n            pathModule.join(dirs.codePath, PACKAGE_MANIFEST_FILE),\n            lambdaPackageManifestFilePath);\n        */\n\n        // TODO: remove alternate solution post https://issues.amazon.com/issues/P25551675 resolve\n        const packageManifest = JSON.parse(fs.readFileSync(pathModule.join(dirs.codePath, PACKAGE_MANIFEST_FILE), \"utf8\"));\n        delete packageManifest.devDependencies;\n        fs.writeFileSync(lambdaPackageManifestFilePath, JSON.stringify(packageManifest, null, 4));\n        // End of alternate solution\n\n        if (isLocalTest) {\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.npxBin,\n                [ Utilities.yarnBin, 'install', '--production' ],\n                configDirs.lambdaCodeDeployPath,\n                this.stdOutput,\n                {shell: true});    \n        } else {\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.npmBin,\n                [ 'install', '--production' ],\n                configDirs.lambdaCodeDeployPath,\n                this.stdOutput,\n                {shell: true});\n        }\n        \n        // Remove the package.json file before running ask deploy since it will attempt to\n        // run npm install which may corrupt our node_modules folder.\n\n        /* TODO: uncomment post https://issues.amazon.com/issues/P25551675 resolve\n        FileUtils.deleteFile(lambdaPackageManifestFilePath);*/\n    }\n\n    private async modifySkillManifest(dirs: SpecialPaths, configDirs: ConfigPaths, publishLocales: string[]) {\n        // duplicate manifest for all locales\n        this.logger.status('Updating skill manifest...');\n\n        const skillSourcePath = pathModule.join(dirs.metaDataStoragePath, SKILL_MANIFEST_FILE);\n        const skillManifestPath = pathModule.join(configDirs.askSkillFullPath, SKILL_MANIFEST_FILE);\n\n        if (fs.existsSync(skillSourcePath)) {\n            await FileUtils.copyFile(skillSourcePath, skillManifestPath);\n        }\n\n        let manifest = FileUtils.loadJson(skillManifestPath);\n        let updated = false;\n        for (let locale of publishLocales) {\n            if (!manifest.manifest.publishingInformation.locales[locale]) {\n                updated = true;\n                manifest.manifest.publishingInformation.locales[locale] = JSON.parse(JSON.stringify(manifest.manifest.publishingInformation.locales[\"en-US\"]));\n            }\n        }\n\n        for (let locale of Object.keys(manifest.manifest.publishingInformation.locales)) {\n            if (!publishLocales.includes(locale)) {\n                updated = true;\n                delete manifest.manifest.publishingInformation.locales[locale];\n            }\n        }\n\n        if (!manifest.manifest.apis.custom.interfaces) {\n            manifest.manifest.apis.custom.interfaces = [\n                {\n                    \"type\":\"ALEXA_PRESENTATION_APL\"\n                }\t\n            ];\n            updated = true;\n        }\n\n        if (updated) {\n            fs.writeFileSync(skillManifestPath, JSON.stringify(manifest, null, 2));    \n        }\n\n        this.logger.success('Skill manifest updated.');\n    }\n}\n"]}
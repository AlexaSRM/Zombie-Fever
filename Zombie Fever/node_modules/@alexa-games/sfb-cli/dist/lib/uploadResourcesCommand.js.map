{"version":3,"file":"uploadResourcesCommand.js","sourceRoot":"","sources":["../../lib/uploadResourcesCommand.ts"],"names":[],"mappings":";;;;;AAEA,2CAAwC;AACxC,iDAA8C;AAC9C,sDAAwD;AACxD,2CAAwC;AAIxC,4CAAoB;AAEpB,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AASnC,MAAa,sBAAsB;IAE/B,YACqB,SAAiB,EACjB,MAAc,EACd,SAAoB;QAFpB,cAAS,GAAT,SAAS,CAAQ;QACjB,WAAM,GAAN,MAAM,CAAQ;QACd,cAAS,GAAT,SAAS,CAAW;IACzC,CAAC;IAEM,KAAK,CAAC,GAAG;QACZ,MAAM,IAAI,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAG,MAAM,0BAAc,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAE5F,KAAK,IAAI,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE;YACtC,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;SAClD;IACL,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,MAAc,EAAE,IAAkB,EAAE,MAAsB;QAElF,MAAM,qBAAqB,GAAG,MAAM,CAAC,QAAQ,CAAC,yBAAyB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAC5F,MAAM,kBAAkB,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,gBAAgB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAC1E,MAAM,qBAAqB,GAAG,MAAM,CAAC,qBAAqB,CAAC;QAG3D,IAAI,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,kBAAkB,EAAE,SAAS,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,kBAAkB,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAEtI,MAAM,YAAY,GAAG,qBAAS,CAAC,OAAO,CAAC,GAAG,kBAAkB,SAAS,CAAC,CAAC;QACvE,MAAM,UAAU,GAAG,QAAQ,YAAY,IAAI,qBAAqB,IAAI,MAAM,EAAE,CAAC;QAE7E,KAAI,IAAI,UAAU,IAAI,qBAAqB,EAAE;YACzC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iDAAiD,cAAc,uBAAuB,CAAC,CAAA;YAC1G,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,YAAY,MAAM,CAAC,CAAA;YAEnD,MAAM,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;YAEjE,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;gBAE/B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,mCAAmC,YAAY,MAAM,CAAC,CAAA;gBACzE,SAAS;aACZ;YAED,MAAM,qBAAS,CAAC,eAAe,CAC3B,qBAAS,CAAC,MAAM,EAChB;gBACI,IAAI;gBACJ,IAAI;gBACJ,IAAI,cAAc,GAAG;gBACrB,IAAI,UAAU,IAAI,UAAU,IAAI;gBAChC,aAAa;gBACb,OAAO;gBACP,aAAa;gBACb,WAAW;gBACX,cAAc;aACjB,EACD,IAAI,CAAC,SAAS,EACd,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;YAGnB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SACnC;IACL,CAAC;CACJ;AA9DD,wDA8DC","sourcesContent":["declare var require: any;\n\nimport { FileUtils } from './fileUtils';\nimport { SpecialPaths } from './specialPaths';\nimport { ConfigAccessor } from '@alexa-games/sfb-skill';\nimport { Utilities } from './utilities';\nimport { Logger } from './logger';\nimport { StdOutput } from './stdOutput';\nimport { Command } from './command';\nimport fs from 'fs';\n\nconst pathModule = require('path');\n\n/**\n * Run this after import to copy files out to the baked folder for easy reference.\n * (Optional)\n * Reads: Output path\n * Writes: Baked path\n * Depends on: ImportCommand\n */\nexport class UploadResourcesCommand implements Command {\n\n    constructor(\n        private readonly storyPath: string,\n        private readonly logger: Logger,\n        private readonly stdOutput: StdOutput) {\n    }\n\n    public async run() {\n        const dirs = new SpecialPaths(this.storyPath);\n        const config = await ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);\n\n        for (let locale of config.publishLocales) {\n            await this.uploadContent(locale, dirs, config);\n        }\n    }\n    \n    private async uploadContent(locale: string, dirs: SpecialPaths, config: ConfigAccessor) {\n\n        const publicResourceFolders = config.getValue(\"public-resource-folders\", undefined, locale);\n        const localeResourcePath = dirs.getResourcePath(locale);\n        const s3BucketName = config.getValue(\"s3-bucket-name\", undefined, locale);\n        const askSkillDirectoryName = config.askSkillDirectoryName;\n\n        // Backwards compatible with missing aws profile name, use ask profile name\n        let awsProfileName = config.getValue('aws-profile-name', undefined, locale) || config.getValue('ask-profile-name', undefined, locale);\n\n        const sourceFolder = FileUtils.fixpath(`${localeResourcePath}/public`);\n        const destFolder = `s3://${s3BucketName}/${askSkillDirectoryName}/${locale}`;\n\n        for(let folderName of publicResourceFolders) {\n            this.logger.status(`Using config value for 'aws-profile-name' of '${awsProfileName}' from abcConfig.json`)\n            this.logger.status(`Uploading ${sourceFolder} ...`)\n\n            const folderToUpload = pathModule.join(sourceFolder, folderName);\n\n            if(!fs.existsSync(folderToUpload)) {\n                // Tell the user we are skipping the folder, but this is not an error\n                this.logger.status(`Folder does not exist, skipping ${sourceFolder} ...`)\n                continue;\n            }\n\n            await Utilities.runCommandAsync(\n                Utilities.awsBin,\n                [\n                    's3',\n                    'cp',\n                    `\"${folderToUpload}\"`,\n                    `\"${destFolder}/${folderName}/\"`,\n                    '--recursive',\n                    '--acl',\n                    'public-read',\n                    '--profile',\n                    awsProfileName\n                ],\n                this.stdOutput,\n                {shell: true});\n           \n\n            this.logger.success(`Success!`);\n        }   \n    }\n}\n"]}
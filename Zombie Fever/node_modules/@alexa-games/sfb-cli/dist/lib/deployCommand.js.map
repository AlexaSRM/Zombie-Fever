{"version":3,"file":"deployCommand.js","sourceRoot":"","sources":["../../lib/deployCommand.ts"],"names":[],"mappings":"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","sourcesContent":["\nconst pathModule = require('path');\nconst fs = require('fs');\n\nimport { FileUtils } from './fileUtils';\nimport { Utilities } from './utilities';\nimport { SpecialPaths, ConfigPaths, SKILL_MANIFEST_FILE } from './specialPaths';\nimport { ConfigAccessor } from '@alexa-games/sfb-skill';\nimport { Logger } from './logger';\nimport { StdOutput } from './stdOutput';\nimport { Command } from './command';\n\n/**\n * Run this after import to copy files out to the baked folder for easy reference.\n * (Optional)\n * Reads: Deploy path\n * Writes: Cloud\n * Depends on: StageCommand\n */\nexport class DeployCommand implements Command {\n\n    constructor(\n        private readonly storyPath: string,\n        private readonly logger: Logger,\n        private readonly stdOutput: StdOutput) {\n    }\n\n    public async run() {\n        this.logger.status(\"Deploying...\");\n\n        const dirs = new SpecialPaths(this.storyPath);\n\n        const config = await ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);\n\n        const configDirs = dirs.getConfigDirectories(config);\n       \n        const askProfileName = config.getValue(\"ask-profile-name\");\n\n        let startTime = Date.now();\n\n        await this.restoreDeploymentMetadata(dirs, configDirs);\n\n        await Utilities.runCommandInDirectoryAsync(\n            Utilities.npxBin,\n            [ 'ask', 'deploy', '--no-wait', '--force', '--profile', askProfileName ],\n            configDirs.askSkillFullPath,\n            this.stdOutput,\n            {shell: true});\n\n        await this.preserveDeploymentMetadata(dirs, configDirs);\n\n        let duration = Date.now() - startTime;\n\n        this.logger.success(`Deployment finished in ${duration} ms.`);\n    }\n\n    private async restoreDeploymentMetadata(dirs: SpecialPaths, configPaths: ConfigPaths) {\n        // skill.json\n        const skillManifestFilePath = pathModule.join(dirs.metaDataStoragePath, SKILL_MANIFEST_FILE);\n\n        await this.copyIfPresent(skillManifestFilePath, configPaths.askSkillFullPath);\n\n        // ask_config\n        const askConfigFilePath = pathModule.join(dirs.metaDataStoragePath, 'ask_config');\n        const skillAskConfigFolder = pathModule.join(configPaths.askSkillFullPath, '.ask');\n        const stagedAskConfigFile = pathModule.join(skillAskConfigFolder, 'config');\n        FileUtils.makeDir(skillAskConfigFolder);\n        if (fs.existsSync(askConfigFilePath)) {\n            await FileUtils.copyFile(askConfigFilePath, stagedAskConfigFile);\n        }\n    }\n\n    private async preserveDeploymentMetadata(dirs: SpecialPaths, configPaths: ConfigPaths) {\n        // ask_config\n        this.logger.status('Creating a copy of .ask/config for safe keeping...')\n        const skillAskConfigFolder = pathModule.join(configPaths.askSkillFullPath, '.ask');\n        const stagedAskConfigFile = pathModule.join(skillAskConfigFolder, 'config');\n        if (fs.existsSync(stagedAskConfigFile)) {\n            FileUtils.makeDir(dirs.metaDataStoragePath);\n            const askConfigFilePath = pathModule.join(dirs.metaDataStoragePath, 'ask_config');\n            await FileUtils.copyFile(stagedAskConfigFile, askConfigFilePath);\n        }\n    }\n\n    private async copyIfPresent(src: string, dst: string, message?: string) {\n        if (fs.existsSync(src)) {\n            if (message) {\n                this.logger.status(message)\n            }\n\n            await FileUtils.recursiveCopy(src, dst);\n        }\n    }\n}\n"]}
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const sfb_story_debugger_1 = require("@alexa-games/sfb-story-debugger");
const specialPaths_1 = require("./specialPaths");
const sfb_skill_1 = require("@alexa-games/sfb-skill");
const fileUtils_1 = require("./fileUtils");
class SimulateCommand {
    constructor(storyPath, locale, quiet, logger) {
        this.storyPath = storyPath;
        this.locale = locale;
        this.quiet = quiet;
        this.logger = logger;
    }
    async run() {
        this.logger.status('Simulating content ...');
        if (!fs.existsSync(this.storyPath)) {
            throw new Error(`${this.storyPath}: The specified story path does not exist.`);
        }
        const dirs = new specialPaths_1.SpecialPaths(this.storyPath);
        const config = await sfb_skill_1.ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);
        await this.simulateStory(this.locale, dirs, config);
    }
    simulateStory(locale, dirs, config) {
        const bakedFilePath = path.resolve(dirs.bakedPath, locale, config.getValue("abc-baked-filename", undefined, locale));
        const extensionLoaderModule = require(dirs.extensionLoaderPath);
        const customExtensions = new extensionLoaderModule.ExtensionLoader({
            locale,
            configAccessor: config
        });
        const customStoryExtensions = customExtensions.getExtensions();
        const abcDebugger = new sfb_story_debugger_1.ABCDebugger(fileUtils_1.FileUtils.loadJson(bakedFilePath), customStoryExtensions, bakedFilePath);
        abcDebugger.verbose = !this.quiet;
        abcDebugger.run(undefined, console);
    }
}
exports.SimulateCommand = SimulateCommand;
//# sourceMappingURL=simulateCommand.js.map
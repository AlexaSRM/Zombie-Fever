{"version":3,"file":"uploadZipLambdaCommand.js","sourceRoot":"","sources":["../../lib/uploadZipLambdaCommand.ts"],"names":[],"mappings":"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","sourcesContent":["\nconst pathModule = require('path');\nconst fs = require('fs');\n\nimport { FileUtils } from './fileUtils';\nimport { Utilities } from './utilities';\nimport { SpecialPaths, ConfigPaths, SKILL_MANIFEST_FILE } from './specialPaths';\nimport { ConfigAccessor } from '@alexa-games/sfb-skill';\nimport { Logger } from './logger';\nimport { StdOutput } from './stdOutput';\nimport { Command } from './command';\n\n/**\n * Run this to zip the contents of your skill and then upload to S3, then invokes copy from S3 to Lambda.\n * Useful when default Lambda update-function command is slow for your connection or when it exceeds its command line file limit.\n */\nexport class UploadZipLambdaCommand implements Command {\n\n    constructor(\n        private readonly storyPath: string,\n        private readonly logger: Logger,\n        private readonly locale: string,\n        private readonly stdOutput: StdOutput) {\n    }\n\n    public async run() {\n        this.logger.status(\"Zipping and Uploading Lambda...\");\n\n        let startTime = Date.now();\n\n        const dirs = new SpecialPaths(this.storyPath);\n\n        const config = await ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);\n\n        const configDirs = dirs.getConfigDirectories(config);\n       \n        const askProfileName = config.getValue(\"ask-profile-name\");\n\n        await Utilities.runCommandInDirectoryAsync(\n            Utilities.npxBin,\n            [ 'rimraf', 'index.zip' ],\n            dirs.storyPath,\n            this.stdOutput,\n            {shell: true});\n\n            if(Utilities.isWin32) {\n                await Utilities.runCommandInDirectoryAsync(\n                    \"7z\",\n                    [ 'a', '-r', 'index.zip', configDirs.lambdaCodeDeployPath + \"/*\" ],\n                    dirs.storyPath,\n                    this.stdOutput,\n                    {shell: true});        \n            } else {\n                await Utilities.runCommandInDirectoryAsync(\n                    \"zip\",\n                    [ '-rg', 'index.zip', configDirs.lambdaCodeDeployPath],\n                    dirs.storyPath,\n                    this.stdOutput,\n                    {shell: true});                \n            }\n\n        const s3BucketName = config.getS3BucketName(this.locale);\n        const skillDirectoryName = configDirs.askSkillDirectoryName;\n    \n        await Utilities.runCommandInDirectoryAsync(\n            Utilities.npxBin,\n            [ 'aws', 's3', 'cp', './index.zip', `s3://${s3BucketName}/lambda-zips/${skillDirectoryName}/`, '--profile', askProfileName ],\n            dirs.storyPath,\n            this.stdOutput,\n            {shell: true});\n\n        let region = config.getValue(\"aws-region\");\n        if(!region) {\n            region = \"us-east-1\";\n            this.logger.status(`Defaulting to S3 AWS Region ${region} because 'aws-region' config not set in your abcConfig.json file.`);\n        }\n\n        // TODO: Get from manifest file\n        const lambdaFunctionName = `ask-custom-${skillDirectoryName}-default`;\n\n        await Utilities.runCommandInDirectoryAsync(\n            Utilities.npxBin,\n            [ 'aws', 'lambda', 'update-function-code', \"--function-name\", lambdaFunctionName, \"--region\", region, \"--s3-bucket\", s3BucketName, \"--s3-key\", `lambda-zips/${skillDirectoryName}/index.zip`, '--profile', askProfileName ],\n            dirs.storyPath,\n            this.stdOutput,\n            {shell: true});\n        \n\n        let duration = Date.now() - startTime;\n\n        this.logger.success(`Zip and Upload finished in ${duration} ms.`);\n    }\n\n}\n"]}
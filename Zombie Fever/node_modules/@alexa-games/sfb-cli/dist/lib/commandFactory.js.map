{"version":3,"file":"commandFactory.js","sourceRoot":"","sources":["../../lib/commandFactory.ts"],"names":[],"mappings":";;AACA,mDAAgD;AAChD,yDAAsD;AACtD,+CAA4C;AAC5C,mDAAgD;AAChD,mEAAgE;AAChE,qEAAkE;AAClE,mDAAgD;AAEhD,2DAAwD;AACxD,uDAAoD;AACpD,+CAA4C;AAC5C,iDAA8C;AAC9C,iDAA8C;AAE9C,qEAAkE;AAClE,qEAAkE;AAmBlE,MAAa,cAAc;IAKvB,YACI,MAAe,EACf,SAAqB;QAErB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,6BAAa,EAAE,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,mCAAgB,EAAE,CAAC;IACpE,CAAC;IAEM,gBAAgB,CAAC,SAAiB;QACrC,OAAO,IAAI,yBAAW,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAEM,kBAAkB,CAAC,SAAiB;QACvC,OAAO,IAAI,6BAAa,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACrE,CAAC;IAEM,0BAA0B,CAAC,SAAiB;QAC/C,OAAO,IAAI,6CAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7E,CAAC;IAEM,oBAAoB,CAAC,SAAiB,EAAE,MAAc;QACzD,OAAO,IAAI,+CAAsB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACtF,CAAC;IAEM,kBAAkB,CAAC,SAAiB,EAAE,OAAqB;QAC9D,OAAO,IAAI,6BAAa,CAAC,SAAS,EAAE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5F,CAAC;IAEM,sBAAsB,CAAC,SAAiB,EAAE,OAA0B;QACvE,OAAO,IAAI,qCAAiB,CAAC,SAAS,EAAE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3F,CAAC;IAEM,oBAAoB,CAAC,SAAiB,EAAE,OAAwB;QACnE,OAAO,IAAI,iCAAe,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACtF,CAAC;IAEM,gBAAgB,CAAC,SAAiB,EAAE,OAAoB;QAC3D,OAAO,IAAI,yBAAW,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACnE,CAAC;IAEM,iBAAiB,CAAC,SAAiB;QACtC,OAAO,IAAI,2BAAY,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACpE,CAAC;IAEM,iBAAiB,CAAC,SAAiB;QACtC,OAAO,IAAI,2BAAY,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACpE,CAAC;IAEM,2BAA2B,CAAC,SAAiB;QAChD,OAAO,IAAI,+CAAsB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9E,CAAC;IAEM,2BAA2B;QAC9B,OAAO,IAAI,+CAAsB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC;CACJ;AA5DD,wCA4DC","sourcesContent":["import { Command } from './command';\nimport { ConsoleLogger } from './consoleLogger';\nimport { ConsoleStdOutput } from './consoleStdOutput';\nimport { BakeCommand } from './bakeCommand';\nimport { DeployCommand } from './deployCommand';\nimport { DeployMetadataCommand } from './deployMetadataCommand';\nimport { UploadZipLambdaCommand } from './uploadZipLambdaCommand';\nimport { ImportCommand } from './importCommand';\nimport { Logger } from './logger';\nimport { NewProjectCommand } from './newProjectCommand';\nimport { SimulateCommand } from './simulateCommand';\nimport { TestCommand } from './testCommand';\nimport { StageCommand } from './stageCommand';\nimport { CleanCommand } from './cleanCommand';\nimport { StdOutput } from './stdOutput';\nimport { UploadResourcesCommand } from './uploadResourcesCommand';\nimport { VscodeExtensionCommand } from './vscodeExtensionCommand';\n\nexport interface BuildOptions {\n    enforceLatest: boolean;\n}\n\nexport interface NewProjectOptions {\n    template: string;\n}\n\nexport interface SimulateOptions {\n    locale: string;\n    quiet: boolean;\n}\n\nexport interface TestOptions {\n    locale: string;\n}\n\nexport class CommandFactory {\n\n    private readonly logger: Logger;\n    private readonly stdOutput: StdOutput;\n\n    constructor(\n        logger?: Logger,\n        stdOutput?: StdOutput) {\n\n        this.logger = logger ? logger : new ConsoleLogger();\n        this.stdOutput = stdOutput ? stdOutput : new ConsoleStdOutput();\n    }\n\n    public buildBakeCommand(storyPath: string): Command {\n        return new BakeCommand(storyPath, this.logger);\n    }\n\n    public buildDeployCommand(storyPath: string): Command {\n        return new DeployCommand(storyPath, this.logger, this.stdOutput);\n    }\n\n    public buildDeployMetadataCommand(storyPath: string): Command {\n        return new DeployMetadataCommand(storyPath, this.logger, this.stdOutput);\n    }\n\n    public buildUploadZipLambda(storyPath: string, locale: string): Command {\n        return new UploadZipLambdaCommand(storyPath, this.logger, locale, this.stdOutput);\n    }\n\n    public buildImportCommand(storyPath: string, options: BuildOptions): Command {\n        return new ImportCommand(storyPath, options.enforceLatest, this.logger, this.stdOutput);\n    }\n\n    public buildNewProjectCommand(storyPath: string, options: NewProjectOptions): Command {\n        return new NewProjectCommand(storyPath, options.template, this.logger, this.stdOutput);\n    }\n\n    public buildSimulateCommand(storyPath: string, options: SimulateOptions): Command {\n        return new SimulateCommand(storyPath, options.locale, options.quiet, this.logger);\n    }\n\n    public buildTestCommand(storyPath: string, options: TestOptions): Command {\n        return new TestCommand(storyPath, options.locale, this.logger);\n    }\n\n    public buildStageCommand(storyPath: string): Command {\n        return new StageCommand(storyPath, this.logger, this.stdOutput);\n    }\n\n    public buildCleanCommand(storyPath: string): Command {\n        return new CleanCommand(storyPath, this.logger, this.stdOutput);\n    }\n\n    public buildUploadResourcesCommand(storyPath: string): Command {\n        return new UploadResourcesCommand(storyPath, this.logger, this.stdOutput);\n    }\n\n    public buildVscodeExtensionCommand(): Command {\n        return new VscodeExtensionCommand(this.logger, this.stdOutput);\n    }\n}\n"]}
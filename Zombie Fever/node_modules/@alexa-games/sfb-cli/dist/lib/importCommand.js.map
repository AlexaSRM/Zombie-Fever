{"version":3,"file":"importCommand.js","sourceRoot":"","sources":["../../lib/importCommand.ts"],"names":[],"mappings":"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","sourcesContent":["declare var require: any;\ndeclare var process: any;\n\n/* \n    ABC Importer script \n*/\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {\n    ACEImporter,\n    ABCImportPlugin\n} from '@alexa-games/sfb-f';\n\nimport { readUtf8FileExcludingBomSync } from '@alexa-games/sfb-util';\n\nimport { SpecialPaths, ABC_CONFIG_FILE, PACKAGE_MANIFEST_FILE } from './specialPaths';\nimport { ConfigAccessor, CoreExtensionLoader } from '@alexa-games/sfb-skill';\nimport { Utilities } from './utilities';\nimport { Logger } from './logger';\nimport { StdOutput } from './stdOutput';\nimport { FileUtils } from './fileUtils';\nimport { Command } from './command';\nimport { ManifestUtils, PackageMetadata } from './manifestUtils';\nimport semver from 'semver';\n\ninterface ContentItem {\n    id: string,\n    text: string\n}\n\n/**\n * Converts user's story to a runnable format.\n * Reads: Source path\n * Writes: Output path\n * Depends on: <nothing>\n */\nexport class ImportCommand implements Command {\n\n    constructor(\n        private readonly storyPath: string,\n        private readonly enforceLatest: boolean,\n        private readonly logger: Logger,\n        private readonly stdOutput: StdOutput) {\n    }\n\n    public async run() {\n        this.logger.status('Importing content...')\n\n        if (!fs.existsSync(this.storyPath)) {\n            throw new Error(`${this.storyPath}: The specified story path does not exist.`);\n        }\n\n        const dirs = new SpecialPaths(this.storyPath);\n        const config = await ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);\n\n        await this.versionChecks(dirs);\n\n        await this.copyAbcConfig(dirs);\n\n        await this.compileCode(dirs, config.getValue(\"sfbLocalTesting\", undefined, \"en-US\"));\n\n        for (const locale of config.publishLocales) {\n            await this.importResourceFiles(locale, dirs, config.validResourceFileExtensions);\n            await this.importAdditionalDirectories(locale, dirs, config.additionalResourceDirectories);\n\n            try {\n                await this.importStory(locale, dirs, config);\n            } catch (err) {\n                if (!ImportCommand.isImportError(err)) {\n                    throw err;\n                }\n                const count = this.reportErrors(err);\n                throw new Error(`Found ${count} import errors.`);\n            }\n        }\n\n        await this.copyGeneratedResources(dirs);\n\n        this.logger.success('Content imported.');\n    }\n\n    private async versionChecks(dirs: SpecialPaths) {\n        \n        const toolingMetadata = ManifestUtils.readRawPackageNameVersion();\n\n        await this.checkOnlineForNewerTooling(toolingMetadata);\n\n        const storyCodeManifestPath = path.join(dirs.codePath, PACKAGE_MANIFEST_FILE);\n        const storyCodeManifest = FileUtils.loadJson(storyCodeManifestPath);\n\n        ManifestUtils.checkDeploymentPackageVersionWithTooling(storyCodeManifest, toolingMetadata, this.logger);\n    }\n\n    private async checkOnlineForNewerTooling(toolingMetadata: PackageMetadata) {\n        // see if the running version is older than what is published\n\n        let publishedVersion = '0.0.0';\n        \n        try \n        {\n            publishedVersion = await ManifestUtils.getLatestsMajorVersionFromNpm(\n                toolingMetadata,\n                this.stdOutput);\n\n            if (!publishedVersion || publishedVersion === '') {\n                this.logger.warning(`SFB version check skipped. Unable to determine the latest version of ${toolingMetadata.name}.`);\n                return;\n            }\n        } catch (e) {\n            this.logger.warning(`SFB version check skipped. Error communicating with NPM.`);\n            this.logger.warning(e);\n            return;\n        }\n\n        if (semver.lt(toolingMetadata.version, publishedVersion)) {\n            const message = `Current version Skill Flow Builder ${toolingMetadata.version} is behind latest available ${publishedVersion}.`;\n            if (this.enforceLatest) {\n                throw new Error(message);\n            }\n            \n            this.logger.warning(message);\n        }\n    }\n\n    private async compileCode(dirs: SpecialPaths, isLocalTest: boolean) {\n        this.logger.status('Compiling TypeScript code...');\n\n        if (isLocalTest) {\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.npxBin,\n                [Utilities.yarnBin, 'install'],\n                dirs.codePath,\n                this.stdOutput,\n                {shell: true});\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.yarnBin,\n                ['compile'],\n                dirs.codePath,\n                this.stdOutput,\n                {shell: true});\n        } else {\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.npmBin,\n                [ 'install'],\n                dirs.codePath,\n                this.stdOutput,\n                {shell: true});\n            await Utilities.runCommandInDirectoryAsync(\n                Utilities.npmBin,\n                [ 'run', 'compile'],\n                dirs.codePath,\n                this.stdOutput,\n                {shell: true}); \n        }\n        \n        this.logger.success('Compile step completed.');\n    }\n\n    private async copyAbcConfig(dirs: SpecialPaths) {\n        const configFileDeployPath = path.join(dirs.buildOutputPath, 'abcConfig');\n        FileUtils.makeDir(configFileDeployPath);\n\n        await FileUtils.copyFile(dirs.abcConfig, path.join(configFileDeployPath, ABC_CONFIG_FILE));\n    }\n\n    /**\n     * Logs error and returns a count of the number of errors found.\n     * @param err Error object that follows the SFB-F error format\n     */\n    private reportErrors(err: any): number {\n        if (err instanceof Array) {\n           for (let i = 0; i < err.length; i++) {\n               this.reportErrors(err[i]);\n           }\n\n           return err.length;\n        } else {\n            const message = `${err.errorName}: ${err.errorMessage}`;\n            if (err.sourceID) {\n                this.logger.failure(`${err.sourceID}:${err.lineNumber} - ${message}`);\n            } else {\n                this.logger.failure(`Line ${err.lineNumber} - ${message}`);\n            }\n\n            return 1;\n        }\n    }\n\n    private static isImportError(err: any) {\n        if (err instanceof Array) {\n            if (err.length > 0) {\n                return ImportCommand.isImportErrorObject(err[0]);\n            }\n        }\n\n        return ImportCommand.isImportErrorObject(err);\n    }\n\n    private static isImportErrorObject(err?: any) {\n        return err && 'lineNumber' in err && 'errorName' in err && 'errorMessage' in err;\n    }\n\n    private async copyGeneratedResources(dirs: SpecialPaths) {\n        const contentPath = dirs.contentPath;\n        const languageStringsFile = path.join(dirs.builtResourcesPath, 'languageStrings.json');\n\n        await FileUtils.recursiveCopy(languageStringsFile, contentPath);\n    }\n\n    private async importStory(locale: string, dirs: SpecialPaths, config: ConfigAccessor): Promise<void> {\n        this.logger.status(`Importing locale ${locale}...`)\n\n        // Config values\n        const contentPath = dirs.contentPath;\n        const resourcePath = dirs.getResourcePath(locale);\n        const localeBuiltResourcesPath = dirs.getLocaleBuiltResourcesPath(locale);\n\n        const bakedFilePath = path.join(localeBuiltResourcesPath, config.getValue(\"abc-baked-filename\", undefined, locale));  \n        const recordingScriptFilePath = path.join(localeBuiltResourcesPath, config.getValue(\"abc-recording-script-filename\", undefined, locale));  \n\n        const storyTitle = config.getValue(\"story-title\", undefined, locale);\n        const storyId = config.getValue(\"story-id\", undefined, locale);\n        const invocationName = config.getValue(\"skill-invocation-name\", undefined, locale).toLowerCase();\n\n        const customSlotTypeFilePath = path.join(resourcePath, \n            config.getValue(\"custom-slottype-filename\", undefined, locale));\n\n        const manifestFilePath = path.join(contentPath, \"MANIFEST.json\");\n\n        let storyManifest: any = {};\n        if (fs.existsSync(manifestFilePath)) {\n            storyManifest = FileUtils.loadJson(manifestFilePath);\n        } else {\n            throw new Error(`${manifestFilePath} does not exist.`);\n        }\n\n        const combinedContent: ContentItem[] = await this.getCombinedStoryContentFromManifest(\n            storyManifest, \n            contentPath);\n\n        /**\n         * Build Configurations\n         */\n        const DEFAULT_IMPORT_PLUGIN_NAME: string = \"default\";\n\n        let extensionLoader = new CoreExtensionLoader(locale, config, {\n            contentSource: dirs.contentPath\n        });\n        \n        const extensionLoaderModule = require(dirs.extensionLoaderPath);\n\n        const customExtensions = new extensionLoaderModule.ExtensionLoader({\n            locale: locale,\n            configAccessor: config\n        });\n\n        let customStoryExtensions = customExtensions.getExtensions().concat(extensionLoader.getImportExtensions());\n\n        let customImportPlugins: ABCImportPlugin[] = [];\n\n        let importer = new ACEImporter(customImportPlugins, undefined, customStoryExtensions);\n\n        let customSlots: any = {};\n        if (!fs.existsSync(customSlotTypeFilePath)) {\n            this.logger.warning(`[Import WARN] Custom Slot config '${customSlotTypeFilePath}' cannot be found.`);\n        } else {\n            customSlots = FileUtils.loadJson(customSlotTypeFilePath);\n        }\n\n        try {\n            let importedStory = await importer.importABCStory(DEFAULT_IMPORT_PLUGIN_NAME, \"\", storyTitle, storyId, true, {\n                customSlots: customSlots,\n                contents: combinedContent,\n                version: storyManifest.version || 1,\n                locale: locale\n            });\n\n            importedStory.alexaVoiceModel.languageModel.invocationName = invocationName;\n\n            FileUtils.makeDir(localeBuiltResourcesPath)\n\n            let recordingScript: string = extensionLoader.voiceOverExtension.getRecordingScript();\n            if (recordingScript && recordingScript.length > 0) {\n                fs.writeFileSync(recordingScriptFilePath, recordingScript);    \n            }\n\n            let languageString: any = extensionLoader.localizationExtension.getLocalizedStringsObject();\n\n            if (languageString && Object.keys(languageString).length > 0) {\n                const languageStringsFile = path.join(dirs.builtResourcesPath, 'languageStrings.json');\n                const languageStringsSourceFile = path.join(dirs.contentPath, 'languageStrings.json');\n\n                fs.writeFileSync(languageStringsFile, JSON.stringify(languageString, null, 4));\n                fs.writeFileSync(languageStringsSourceFile, JSON.stringify(languageString, null, 4));\n            }\n\n            fs.writeFileSync(bakedFilePath, JSON.stringify(importedStory, null, 4));    \n\n            // Write voice model as well to a separate file\n            fs.writeFileSync(`${localeBuiltResourcesPath}/${locale}.json`, JSON.stringify({\n                \"interactionModel\": importedStory['alexaVoiceModel'] }, null, 4));\n\n\n            this.logger.status(`Importing of ${locale} completed.`)\n        } catch (err) {\n            if (err.errorItems) {\n                throw err.errorItems;\n            } else {\n                throw err;\n            }\n        }\n    }  \n\n    private getCombinedStoryContentFromManifest(manifest: any, srcDirectoryPath: string) {\n        const stories: string[] = manifest.include;\n        const pathToRegex: {[key: string]: string} = {};\n\n        for (const storyRegex of stories) {\n            const extractFileRegex: RegExp = /([\\S]+\\/)?([^\\/]+?)$/g;\n            const matchedPath: any = extractFileRegex.exec(storyRegex);\n\n            if (matchedPath != null) {\n                const postDir: string = matchedPath[1]? `/${matchedPath[1]}`: \"\";\n                if (!pathToRegex[`${srcDirectoryPath}${postDir}`]) {\n                    pathToRegex[`${srcDirectoryPath}${postDir}`] = \"\";\n                } else {\n                    pathToRegex[`${srcDirectoryPath}${postDir}`] += \"|\"\n                }\n\n                pathToRegex[`${srcDirectoryPath}${postDir}`] += `(?:^${matchedPath[2].replace(/\\./g, \"\\\\.\").replace(/\\*/g, \".*\")}$)`;\n            }\n        }\n\n        const combinedStoryContent: ContentItem[] = [];\n\n        for (const searchDirectory of Object.keys(pathToRegex)) {\n            const files: string[] = fs.readdirSync(searchDirectory);\n            if (!files) {\n                throw new Error(`[Import ERROR] Cannot find story content files: ${JSON.stringify(stories, null, 4)}`);\n            }\n        \n            for (var i = 0; i < files.length; i++) {\n                const file: string = files[i];\n                if (file.match(pathToRegex[searchDirectory])) {\n                    combinedStoryContent.push({\n                        id: path.join(path.relative(srcDirectoryPath, searchDirectory), file),\n                        text: readUtf8FileExcludingBomSync(path.join(searchDirectory, file))\n                    });\n                }\n            }\n        }\n\n        return combinedStoryContent;\n    }\n\n    // Copy over any additional directories requested to be included\n    private async importAdditionalDirectories(locale: string, dirs: SpecialPaths, directories: string[]) {\n\n        const resourceFolder = dirs.getResourcePath(locale);\n        const localeBuildOutputPath = dirs.getLocaleBuiltResourcesPath(locale);\n\n        for(let dir of directories) {\n            await FileUtils.recursiveCopy(path.join(resourceFolder, dir), localeBuildOutputPath);\n        }\n    }\n\n    private async importResourceFiles(locale: string, dirs: SpecialPaths, extensions: string[]) {\n        const resourceFolder = dirs.getResourcePath(locale);\n        const localeBuildOutputPath = dirs.getLocaleBuiltResourcesPath(locale);\n\n        // Support multiple extensions\n        for(let ext of extensions) {\n            await FileUtils.recursiveCopy(`${resourceFolder}/*.${ext}`, localeBuildOutputPath);\n        }\n    }\n}\n"]}
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fileUtils_1 = require("./fileUtils");
const specialPaths_1 = require("./specialPaths");
const sfb_skill_1 = require("@alexa-games/sfb-skill");
const utilities_1 = require("./utilities");
const fs_1 = __importDefault(require("fs"));
const pathModule = require('path');
class UploadResourcesCommand {
    constructor(storyPath, logger, stdOutput) {
        this.storyPath = storyPath;
        this.logger = logger;
        this.stdOutput = stdOutput;
    }
    async run() {
        const dirs = new specialPaths_1.SpecialPaths(this.storyPath);
        const config = await sfb_skill_1.ConfigAccessor.loadConfigFile(dirs.abcConfig, dirs.builtResourcesPath);
        for (let locale of config.publishLocales) {
            await this.uploadContent(locale, dirs, config);
        }
    }
    async uploadContent(locale, dirs, config) {
        const publicResourceFolders = config.getValue("public-resource-folders", undefined, locale);
        const localeResourcePath = dirs.getResourcePath(locale);
        const s3BucketName = config.getValue("s3-bucket-name", undefined, locale);
        const askSkillDirectoryName = config.askSkillDirectoryName;
        let awsProfileName = config.getValue('aws-profile-name', undefined, locale) || config.getValue('ask-profile-name', undefined, locale);
        const sourceFolder = fileUtils_1.FileUtils.fixpath(`${localeResourcePath}/public`);
        const destFolder = `s3://${s3BucketName}/${askSkillDirectoryName}/${locale}`;
        for (let folderName of publicResourceFolders) {
            this.logger.status(`Using config value for 'aws-profile-name' of '${awsProfileName}' from abcConfig.json`);
            this.logger.status(`Uploading ${sourceFolder} ...`);
            const folderToUpload = pathModule.join(sourceFolder, folderName);
            if (!fs_1.default.existsSync(folderToUpload)) {
                this.logger.status(`Folder does not exist, skipping ${sourceFolder} ...`);
                continue;
            }
            await utilities_1.Utilities.runCommandAsync(utilities_1.Utilities.awsBin, [
                's3',
                'cp',
                `"${folderToUpload}"`,
                `"${destFolder}/${folderName}/"`,
                '--recursive',
                '--acl',
                'public-read',
                '--profile',
                awsProfileName
            ], this.stdOutput, { shell: true });
            this.logger.success(`Success!`);
        }
    }
}
exports.UploadResourcesCommand = UploadResourcesCommand;
//# sourceMappingURL=uploadResourcesCommand.js.map
{"version":3,"file":"utilities.spec.js","sourceRoot":"","sources":["../../test/utilities.spec.ts"],"names":[],"mappings":";;AAAA,4CAAsF;AACtF,mCAA0C;AAE1C,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IAEvB,MAAM,cAAc,GAAG,gBAAgB,CAAC;IACxC,MAAM,8BAA8B,GAAG,+CAA+C,CAAC;IACvF,MAAM,2BAA2B,GAAG,4CAA4C,CAAC;IAEjF,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAChD,MAAM,MAAM,GAAG,wCAA4B,CAAC,8BAA8B,CAAC,CAAC;QAE5E,eAAM,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC7C,MAAM,MAAM,GAAG,wCAA4B,CAAC,2BAA2B,CAAC,CAAC;QAEzE,eAAM,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,MAAM,GAAG,MAAM,oCAAwB,CAAC,8BAA8B,CAAC,CAAC;QAE9E,eAAM,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,MAAM,GAAG,MAAM,oCAAwB,CAAC,2BAA2B,CAAC,CAAC;QAE3E,eAAM,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { readUtf8FileExcludingBom, readUtf8FileExcludingBomSync } from '../utilities';\nimport { strict as assert } from 'assert';\n\ndescribe('utilities', () => {\n\n    const ExpectedOutput = 'this is a test';\n    const TestReadUtf8FileWithoutBomPath = 'test/testFiles/testReadUtf8FileWithoutBom.txt';\n    const TestReadUtf8FileWithBomPath = 'test/testFiles/testReadUtf8FileWithBom.txt';\n\n    it('readUtf8FileExcludingBomSync without bom', () => {\n        const output = readUtf8FileExcludingBomSync(TestReadUtf8FileWithoutBomPath);\n\n        assert.equal(output, ExpectedOutput);\n    });\n\n    it('readUtf8FileExcludingBomSync with bom', () => {\n        const output = readUtf8FileExcludingBomSync(TestReadUtf8FileWithBomPath);\n\n        assert.equal(output, ExpectedOutput);\n    });\n\n    it('readUtf8FileExcludingBom without bom', async () => {\n        const output = await readUtf8FileExcludingBom(TestReadUtf8FileWithoutBomPath);\n\n        assert.equal(output, ExpectedOutput);\n    });\n\n    it('readUtf8FileExcludingBom with bom', async () => {\n        const output = await readUtf8FileExcludingBom(TestReadUtf8FileWithBomPath);\n\n        assert.equal(output, ExpectedOutput);\n    });\n});\n"]}
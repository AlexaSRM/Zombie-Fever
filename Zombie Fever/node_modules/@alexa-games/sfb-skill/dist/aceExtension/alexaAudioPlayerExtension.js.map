{"version":3,"file":"alexaAudioPlayerExtension.js","sourceRoot":"","sources":["../../src/aceExtension/alexaAudioPlayerExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import { DriverExtension, InstructionExtension, DriverExtensionParameter, InstructionExtensionParameter, StoryStateHelper, Choice, SceneDirectionBuilder } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from './../configAccessor';\n\nexport interface AudioPlayerItem { \n    url: string,\n    playBehavior?: string,\n    offsetInMilliseconds?: number,\n    metadata?: { title?: string,\n                 subtitle?: string,\n                 art?: string,\n                 backgroundImage?: string }\n};\n\nexport enum AudioPlayerDirective {\n    Play= \"AudioPlayer.Play\",\n    Stop= \"AudioPlayer.Stop\",\n    ClearQueue= \"AudioPlayer.ClearQueue\",\n    None= \"None\"\n}\n\nexport class AlexaAudioPlayerExtension implements DriverExtension, InstructionExtension {\n\n    private directivesToPost: any[] = [];\n\n    public constructor(locale: string, configAccessor: ConfigAccessor) {\n    }\n\n    async post(param: DriverExtensionParameter) {\n        const handlerInput = param.userInputHelper.getHandlerInput();\n\n        if(handlerInput) {\n            // Post all directives then clear them out again\n            if(this.directivesToPost.length > 0) {\n                this.directivesToPost.forEach((directive) => {\n                    handlerInput.responseBuilder.addDirective(directive);\n                });\n\n                this.directivesToPost = [];\n            }\n        }\n    }\n\n    public generateAudioPlayerDirective(directive : AudioPlayerDirective, \n                                        audioPlayerItem? : AudioPlayerItem, \n                                        storyState? : {[key: string]: any}) : any {\n        \n        // Retrieve and set tokens in story state\n        const previousToken = (storyState && storyState.audio_player_token) ? storyState.audio_player_token : \"\";\n\n        const token = Math.floor(Math.random() * 1000000);\n\n        if(storyState) {\n            storyState.audio_player_token = token;\n        }\n\n        if(directive === AudioPlayerDirective.Play && audioPlayerItem) {\n\n            const audioPlayerDirective = {\n                    \"type\": directive,\n                    \"playBehavior\": audioPlayerItem.playBehavior || \"REPLACE_ALL\",\n                    \"audioItem\": {\n                      \"stream\": {\n                        \"url\": audioPlayerItem.url,\n                        \"token\": token,\n                        \"expectedPreviousToken\": previousToken,\n                        \"offsetInMilliseconds\": audioPlayerItem.offsetInMilliseconds || 0\n                      },\n                      \"metadata\": {\n                        \"title\": (audioPlayerItem.metadata && audioPlayerItem.metadata.title) ? audioPlayerItem.metadata.title : \"\",\n                        \"subtitle\": (audioPlayerItem.metadata && audioPlayerItem.metadata.subtitle) ? audioPlayerItem.metadata.subtitle : \"\",\n                        \"art\": {\n                          \"sources\": [\n                            {\n                              \"url\": (audioPlayerItem.metadata && audioPlayerItem.metadata.art) ? audioPlayerItem.metadata.art : \"\"\n                            }\n                          ]\n                        },\n                        \"backgroundImage\": {\n                          \"sources\": [\n                            {\n                              \"url\": (audioPlayerItem.metadata && audioPlayerItem.metadata.backgroundImage) ? audioPlayerItem.metadata.backgroundImage : \"\"\n                            }\n                          ]\n                        }\n                      }\n                    }\n            };\n\n            // Delete expected previous token if not an ENQUEUE request\n            if(audioPlayerDirective.playBehavior !== \"ENQUEUE\") {\n                delete audioPlayerDirective.audioItem.stream.expectedPreviousToken;\n            }\n\n            return audioPlayerDirective;\n\n        } else if(directive === AudioPlayerDirective.Stop) {\n\n            return {\n                \"type\": directive\n            };\n\n        } else if(directive === AudioPlayerDirective.ClearQueue) {\n\n            return {\n                \"type\": directive,\n                \"clearBehavior\" : \"CLEAR_ALL\"\n            }\n        }\n\n        // else return undefined\n        return undefined;\n    }\n\n    async pre(param: DriverExtensionParameter) {\n    }\n\n    async audio_player_play(param: InstructionExtensionParameter): Promise<void> {\n\n        if(!param.instructionParameters.url) {\n            throw new Error(\"Audio Player Play directive requires 'url' param\");\n        }\n\n        const audioItem : AudioPlayerItem = { url: param.instructionParameters.url};\n\n        if(param.instructionParameters.playBehavior) {\n            audioItem.playBehavior = param.instructionParameters.playBehavior;\n        }\n\n        if(param.instructionParameters.offsetInMilliseconds) {\n            audioItem.offsetInMilliseconds = Number.parseInt(param.instructionParameters.offsetInMilliseconds);\n        }\n\n        if(param.instructionParameters.title || \n            param.instructionParameters.subtitle ||\n            param.instructionParameters.art ||\n            param.instructionParameters.backgroundImage\n            ) {\n\n            audioItem.metadata = {};\n\n            if(param.instructionParameters.title) {\n                audioItem.metadata.title = param.instructionParameters.title;\n            }\n            if(param.instructionParameters.subtitle) {\n                audioItem.metadata.subtitle = param.instructionParameters.subtitle;\n            }\n            if(param.instructionParameters.art) {\n                audioItem.metadata.art = param.instructionParameters.art;\n            }\n            if(param.instructionParameters.backgroundImage) {\n                audioItem.metadata.backgroundImage = param.instructionParameters.backgroundImage;\n            }\n        }\n\n        const directive = this.generateAudioPlayerDirective(AudioPlayerDirective.Play, audioItem, param.storyState);\n\n        if(directive) {\n            this.directivesToPost.push(directive);\n        }\n    }\n\n    async audio_player_stop(param: InstructionExtensionParameter): Promise<void> {\n\n        const directive = this.generateAudioPlayerDirective(AudioPlayerDirective.Stop);\n\n        if(directive) {\n            this.directivesToPost.push(directive);\n        }\n    }\n\n    async audio_player_clear_queue(param: InstructionExtensionParameter): Promise<void> {\n\n        const directive = this.generateAudioPlayerDirective(AudioPlayerDirective.ClearQueue);\n\n        if(directive) {\n            this.directivesToPost.push(directive);\n        }\n    }\n\n}"]}
{"version":3,"file":"metricsExtension.js","sourceRoot":"","sources":["../../src/aceExtension/metricsExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    DriverExtension,\n    DriverExtensionParameter,\n    StoryStateHelper,\n    InstructionExtension,\n    InstructionExtensionParameter\n} from '@alexa-games/sfb-f';\nimport { HandlerInput } from 'ask-sdk-core';\nimport uuid from 'uuid/v4';\n\ninterface MetricsEvent {\n    skillId: string,\n    timestamp: string,\n    customerIdentifier: string,\n    eventType: string,\n    requestId: string,\n    eventId: string,\n    sessionId: string,\n    stage: string,\n    locale: string,\n    metadata: {\n        schemaVersion: string\n    }\n    details: {[key: string]: any}\n}\n\nexport class MetricsExtension implements DriverExtension, InstructionExtension {\n    private metricEvent: MetricsEvent;\n    private reservedKeys = new Set();\n\n    constructor(sendMetricsFunction?: (metricEvent: MetricsEvent) => Promise<void>) {\n        if (sendMetricsFunction) {\n            this.sendMetricsEvent = sendMetricsFunction;\n        }\n        this.reservedKeys.add('sceneId');\n        this.reservedKeys.add('previousSceneId');\n        this.metricEvent = this.getDefaultMetricsEvent();\n    }\n\n    async post(param: DriverExtensionParameter): Promise<void> {\n        const request = param.userInputHelper.getHandlerInput();\n\n        // driver knows if it is a reprompt\n        const unhandledChoice = param.driver.isUnhandledChoice();\n        if (unhandledChoice) {\n            this.metricEvent.details.unhandledChoice = true;\n        }\n\n        this.metricEvent.details.sceneId = this.getLast(param.driver.getVisitedSceneIDsOnRun());\n        this.metricEvent.locale = param.locale;\n\n        this.addRequestParameters(request);\n\n        const previousScenes = param.driver.getVisitedSceneIDsOnRun();\n\n        try {\n            if (previousScenes.length > 1) {\n                await this.logPreviousScenes(previousScenes);\n            } else {\n                await this.sendMetricsEvent(this.metricEvent);\n            }\n            this.metricEvent = this.getDefaultMetricsEvent();\n        } catch (err) {\n            throw new Error('failed to send metrics');\n        }\n    }\n\n    addRequestParameters(request: HandlerInput | undefined) {\n        try {\n            // We don't want this to crash the skill if there is a problem, so progressively add properties\n            if (request) {\n                const session = request.requestEnvelope.session;\n                const req = request.requestEnvelope.request;\n                if (req) {\n                    this.metricEvent.timestamp = req.timestamp;\n                    this.metricEvent.requestId = req.requestId;\n                }\n                if (session) {\n                    this.metricEvent.sessionId = session.sessionId;\n                    this.metricEvent.customerIdentifier = session.user.userId;\n                    this.metricEvent.skillId = session.application.applicationId;\n                }\n            }\n        } catch (err) {\n            console.warn('[METRICS-ERROR] Error parsing properties for metrics', err);\n        }\n    }\n\n    pre(param: DriverExtensionParameter): Promise<void> {\n        this.metricEvent.details.previousSceneId = StoryStateHelper.getCurrentSceneID(param.driver.getCurrentStoryState()) || '';\n        return Promise.resolve();\n    }\n\n    public async trackMetric(param: InstructionExtensionParameter): Promise<void> {\n        const detailKey: string = param.instructionParameters['type'];\n        if (detailKey && this.canWriteKey(detailKey)) {\n            const detailValue = param.instructionParameters['value'] || 1;\n            this.checkForDetailOverwrite(detailKey, detailValue);\n            this.metricEvent.details[detailKey] = detailValue;\n        } else {\n            console.error('[METRICS-ERROR] Cannot map type and value for trackMetric call.', JSON.stringify(param.instructionParameters))\n        }\n    }\n\n    private checkForDetailOverwrite(key: string, val: any) {\n        if (this.metricEvent.details[key]) {\n            console.error('[METRICS-ERROR] Overwriting value for type that is already set.', `\n                type name: ${key}\n                current value: ${this.metricEvent.details[key]}\n                new value: ${val}\n                `)\n        }\n    }\n\n    private canWriteKey(key: string): boolean {\n        if (this.reservedKeys.has(key)) {\n            console.error(`[METRICS-ERROR] Cannot overwrite ${key}, it is reserved.`);\n            return false;\n        }\n        return true;\n    }\n\n\n    private async sendMetricsEvent(metricEvent: MetricsEvent): Promise<void> {\n        console.log('[METRICS]', JSON.stringify(metricEvent));\n    };\n\n    private getLast(arr: Array<any>) {\n        if (arr.length === 0) {\n            return undefined;\n        }\n        return arr[arr.length - 1];\n    }\n\n    private async logPreviousScenes(previousScenes: string[]) {\n        for (const [index, sceneId] of previousScenes.entries()) {\n            const metricEvent = this.metricEvent;\n            if (previousScenes[index - 1]) {\n                metricEvent.details = {};\n                metricEvent.details.previousSceneId = previousScenes[index - 1];\n            }\n            metricEvent.details.sceneId = sceneId;\n            await this.sendMetricsEvent(metricEvent);\n        }\n    }\n\n    private getDefaultMetricsEvent() {\n        return <MetricsEvent>{\n            skillId: '',\n            timestamp: '',\n            customerIdentifier: '',\n            eventType: 'metrics',\n            requestId: '',\n            eventId: uuid(),\n            sessionId: '',\n            stage: process.env.stage || 'stage env variable not defined',\n            locale: '',\n            metadata: {\n                schemaVersion: '1.0'\n            },\n            details: {}\n        }\n    }\n}\n"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
;
var AudioPlayerDirective;
(function (AudioPlayerDirective) {
    AudioPlayerDirective["Play"] = "AudioPlayer.Play";
    AudioPlayerDirective["Stop"] = "AudioPlayer.Stop";
    AudioPlayerDirective["ClearQueue"] = "AudioPlayer.ClearQueue";
    AudioPlayerDirective["None"] = "None";
})(AudioPlayerDirective = exports.AudioPlayerDirective || (exports.AudioPlayerDirective = {}));
class AlexaAudioPlayerExtension {
    constructor(locale, configAccessor) {
        this.directivesToPost = [];
    }
    async post(param) {
        const handlerInput = param.userInputHelper.getHandlerInput();
        if (handlerInput) {
            if (this.directivesToPost.length > 0) {
                this.directivesToPost.forEach((directive) => {
                    handlerInput.responseBuilder.addDirective(directive);
                });
                this.directivesToPost = [];
            }
        }
    }
    generateAudioPlayerDirective(directive, audioPlayerItem, storyState) {
        const previousToken = (storyState && storyState.audio_player_token) ? storyState.audio_player_token : "";
        const token = Math.floor(Math.random() * 1000000);
        if (storyState) {
            storyState.audio_player_token = token;
        }
        if (directive === AudioPlayerDirective.Play && audioPlayerItem) {
            const audioPlayerDirective = {
                "type": directive,
                "playBehavior": audioPlayerItem.playBehavior || "REPLACE_ALL",
                "audioItem": {
                    "stream": {
                        "url": audioPlayerItem.url,
                        "token": token,
                        "expectedPreviousToken": previousToken,
                        "offsetInMilliseconds": audioPlayerItem.offsetInMilliseconds || 0
                    },
                    "metadata": {
                        "title": (audioPlayerItem.metadata && audioPlayerItem.metadata.title) ? audioPlayerItem.metadata.title : "",
                        "subtitle": (audioPlayerItem.metadata && audioPlayerItem.metadata.subtitle) ? audioPlayerItem.metadata.subtitle : "",
                        "art": {
                            "sources": [
                                {
                                    "url": (audioPlayerItem.metadata && audioPlayerItem.metadata.art) ? audioPlayerItem.metadata.art : ""
                                }
                            ]
                        },
                        "backgroundImage": {
                            "sources": [
                                {
                                    "url": (audioPlayerItem.metadata && audioPlayerItem.metadata.backgroundImage) ? audioPlayerItem.metadata.backgroundImage : ""
                                }
                            ]
                        }
                    }
                }
            };
            if (audioPlayerDirective.playBehavior !== "ENQUEUE") {
                delete audioPlayerDirective.audioItem.stream.expectedPreviousToken;
            }
            return audioPlayerDirective;
        }
        else if (directive === AudioPlayerDirective.Stop) {
            return {
                "type": directive
            };
        }
        else if (directive === AudioPlayerDirective.ClearQueue) {
            return {
                "type": directive,
                "clearBehavior": "CLEAR_ALL"
            };
        }
        return undefined;
    }
    async pre(param) {
    }
    async audio_player_play(param) {
        if (!param.instructionParameters.url) {
            throw new Error("Audio Player Play directive requires 'url' param");
        }
        const audioItem = { url: param.instructionParameters.url };
        if (param.instructionParameters.playBehavior) {
            audioItem.playBehavior = param.instructionParameters.playBehavior;
        }
        if (param.instructionParameters.offsetInMilliseconds) {
            audioItem.offsetInMilliseconds = Number.parseInt(param.instructionParameters.offsetInMilliseconds);
        }
        if (param.instructionParameters.title ||
            param.instructionParameters.subtitle ||
            param.instructionParameters.art ||
            param.instructionParameters.backgroundImage) {
            audioItem.metadata = {};
            if (param.instructionParameters.title) {
                audioItem.metadata.title = param.instructionParameters.title;
            }
            if (param.instructionParameters.subtitle) {
                audioItem.metadata.subtitle = param.instructionParameters.subtitle;
            }
            if (param.instructionParameters.art) {
                audioItem.metadata.art = param.instructionParameters.art;
            }
            if (param.instructionParameters.backgroundImage) {
                audioItem.metadata.backgroundImage = param.instructionParameters.backgroundImage;
            }
        }
        const directive = this.generateAudioPlayerDirective(AudioPlayerDirective.Play, audioItem, param.storyState);
        if (directive) {
            this.directivesToPost.push(directive);
        }
    }
    async audio_player_stop(param) {
        const directive = this.generateAudioPlayerDirective(AudioPlayerDirective.Stop);
        if (directive) {
            this.directivesToPost.push(directive);
        }
    }
    async audio_player_clear_queue(param) {
        const directive = this.generateAudioPlayerDirective(AudioPlayerDirective.ClearQueue);
        if (directive) {
            this.directivesToPost.push(directive);
        }
    }
}
exports.AlexaAudioPlayerExtension = AlexaAudioPlayerExtension;
//# sourceMappingURL=alexaAudioPlayerExtension.js.map
{"version":3,"file":"alexaNotificationsExtension.js","sourceRoot":"","sources":["../../src/aceExtension/alexaNotificationsExtension.ts"],"names":[],"mappings":";;AAGA,MAAa,2BAA2B;IAEpC,YAAmB,MAAc,EAAE,cAA8B;IACjE,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,KAA+B;IAC1C,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,KAA+B;IACzC,CAAC;IAED,KAAK,CAAC,gCAAgC,CAAC,KAA+B;QAElE,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;QAE7D,IAAG,YAAY,EAAE;YACb,YAAY,CAAC,eAAe,CAAC,gCAAgC,CAAC,CAAC,wCAAwC,CAAC,CAAC,CAAC;SAC7G;IACL,CAAC;CAEJ;AApBD,kEAoBC","sourcesContent":["import { DriverExtension, InstructionExtension, DriverExtensionParameter, InstructionExtensionParameter, StoryStateHelper, Choice, SceneDirectionBuilder } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from './../configAccessor';\n\nexport class AlexaNotificationsExtension implements DriverExtension, InstructionExtension {\n\n    public constructor(locale: string, configAccessor: ConfigAccessor) {\n    }\n\n    async post(param: DriverExtensionParameter) {\n    }\n\n    async pre(param: DriverExtensionParameter) {\n    }\n\n    async showNotificationsPermissionsCard(param: DriverExtensionParameter): Promise<void> {\n\n        const handlerInput = param.userInputHelper.getHandlerInput();\n\n        if(handlerInput) {\n            handlerInput.responseBuilder.withAskForPermissionsConsentCard(['alexa::devices:all:notifications:write']);\n        }\n    }\n\n}"]}
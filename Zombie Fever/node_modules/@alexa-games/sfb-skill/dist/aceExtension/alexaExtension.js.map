{"version":3,"file":"alexaExtension.js","sourceRoot":"","sources":["../../src/aceExtension/alexaExtension.ts"],"names":[],"mappings":"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","sourcesContent":["import { DriverExtension, DriverExtensionParameter, UserInput, Slot as ACESlot, StoryStateHelper } from '@alexa-games/sfb-f';\nimport { HandlerInput } from 'ask-sdk';\n\nexport class AlexaExtension implements DriverExtension {\n    async post(param: DriverExtensionParameter) {\n        const driver = param.driver;\n        const handlerInput = param.userInputHelper.getHandlerInput();\n\n        if (handlerInput) {\n            const ssmlPromises: Promise<string>[] = [\n                driver.getSpeechSSMLText(),\n                driver.getRepromptSSMLText()\n            ];\n            \n            const resultSSML = await Promise.all(ssmlPromises);\n\n            const speechOutput: string = resultSSML[0]; \n\n            // reprompt speech (speech for when player doesn't respond in 8 seconds)\n            let repromptOutput: string = resultSSML[1];\n\n            if(!repromptOutput || repromptOutput.trim().length === 0) {\n                // reprompt with speech if not defined by the content.\n                repromptOutput = speechOutput;\n            }\n\n            if (StoryStateHelper.isStoryPaused(driver.getCurrentStoryState()) || StoryStateHelper.isEndingReached(driver.getCurrentStoryState())) {\n                handlerInput.responseBuilder.withShouldEndSession(true);\n            } else {\n                handlerInput.responseBuilder.reprompt(repromptOutput);\n            }\n            \n            handlerInput.responseBuilder\n            .speak(speechOutput)\n            .getResponse();\n        }\n    }\n\n    async pre(param: DriverExtensionParameter) {\n        const inputHelper = param.userInputHelper;\n        const handlerInput = inputHelper.getHandlerInput();\n\n        if (handlerInput) {\n            const parsedInput = this.parseASKHandlerInput(handlerInput);\n            if (parsedInput.intent) inputHelper.setInputIntent(parsedInput.intent);\n            if (parsedInput.value) inputHelper.setInputValue(parsedInput.value);\n            if (parsedInput.slots) inputHelper.setInputSlots(parsedInput.slots);\n        }\n\n        const isPausingIntent = this.isPausingIntent(inputHelper.getInputIntent() || \"\");\n        const isForceQuitIntent = this.isForceQuitIntent(inputHelper.getInputIntent() || \"\");\n        const isIntentExpected = StoryStateHelper.isInputExpected(param.storyState, inputHelper.getUserInput(), param.locale);\n\n        if (isForceQuitIntent || (isPausingIntent && !isIntentExpected)) {\n            param.driver.pauseStory();\n        }\n    }\n\n    private parseASKHandlerInput(handlerInput: HandlerInput): UserInput {\n        // Parse the incoming request\n        let userInput: UserInput = {\n        }\n\n        if (handlerInput.requestEnvelope.request.type === 'LaunchRequest' || handlerInput.requestEnvelope.request.type === 'SessionEndedRequest') {\n            userInput.intent = handlerInput.requestEnvelope.request.type;\n        } else if (handlerInput.requestEnvelope.request.type === 'IntentRequest') {\n            userInput.intent = handlerInput.requestEnvelope.request.intent.name;\n\n            let slots: {[key: string]: any} | undefined = handlerInput.requestEnvelope.request.intent.slots;\n            let foundSlots: ACESlot[] = [];\n            let valueStringCollections: string = \"\";\n\n            if (slots) {\n                for (let slotName of Object.keys(slots)) {\n                    if (slots[slotName] && slots[slotName].value) {\n                        let resolutionEntities: any = slots[slotName].resolutions;\n\n                        // TODO: Make this work\n                        let slotIndexToUse = 0;\n                        if (resolutionEntities && resolutionEntities.resolutionsPerAuthority) {\n                            for(let i = 0; i < resolutionEntities.resolutionsPerAuthority.length; i++) {\n                                \n                                console.log(\"CHECKING \" + i + \" \" + JSON.stringify(resolutionEntities.resolutionsPerAuthority[i]));\n\n                                if(resolutionEntities.resolutionsPerAuthority[i].status.code === 'ER_SUCCESS_MATCH') {\n                                    slotIndexToUse = i;\n                                    console.log(\"BREAKING at : \" + slotIndexToUse);\n                                    break;\n                                }\n                            }\n                        }\n\n                        if (resolutionEntities && resolutionEntities.resolutionsPerAuthority && resolutionEntities.resolutionsPerAuthority[slotIndexToUse]\n                            && resolutionEntities.resolutionsPerAuthority[slotIndexToUse].status.code === 'ER_SUCCESS_MATCH') {\n                                let resolution: string = resolutionEntities.resolutionsPerAuthority[slotIndexToUse].values[0].value.name;\n                                foundSlots.push({\n                                    name: slots[slotName].name,\n                                    value: resolution\n                                });\n                                \n                                valueStringCollections += \" \" + resolution;\n                        } \n                        else if (!resolutionEntities || !resolutionEntities.resolutionsPerAuthority){\n                            foundSlots.push({\n                                name: slots[slotName].name,\n                                value: slots[slotName].value || \"\"\n                            });\t\n                            valueStringCollections += \" \" + slots[slotName].value;\n                        }\n                    }\n                }\n            }\n\n            if (valueStringCollections.trim().length > 0) {\n                userInput.value = valueStringCollections.trim();\n            }\n\n            userInput.slots = foundSlots;\n        }\n\n        return userInput;\n    }\n\n    private isPausingIntent(intent: string): boolean {\n        return intent == \"AMAZON.PauseIntent\" || intent == \"AMAZON.CancelIntent\";\n    }\n\n    private isForceQuitIntent(intent: string): boolean {\n        return intent == \"SessionEndedRequest\" || intent == \"AMAZON.StopIntent\";\n\t}\n}"]}
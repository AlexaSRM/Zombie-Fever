"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const assert_1 = require("assert");
const alexaAudioPlayerExtension_1 = require("../../aceExtension/alexaAudioPlayerExtension");
const configAccessor_1 = require("../../configAccessor");
const sfb_f_1 = require("@alexa-games/sfb-f");
const testUtil = __importStar(require("./testUtil"));
const CONFIG_FILE = "./src/test/data/abcConfig.json";
describe('Alexa Audio Extension Tests', () => {
    it('Instantiation', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "");
        const alexaAudioPlayerExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        assert_1.strict.ok(alexaAudioPlayerExtension);
    });
    it('Play Directive', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "");
        const alexaAudioPlayerExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const audioItem = { 'url': 'https://s3.amazonaws.com/alexa-ml/project-bird/en-US/audio/bgm_yuuya.mp3' };
        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(alexaAudioPlayerExtension_1.AudioPlayerDirective.Play, audioItem);
        assert_1.strict.ok(directive);
        assert_1.strict.equal(directive.type, "AudioPlayer.Play");
    });
    it('Stop Directive', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "");
        const alexaAudioPlayerExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(alexaAudioPlayerExtension_1.AudioPlayerDirective.Stop);
        assert_1.strict.ok(directive);
        assert_1.strict.equal(directive.type, "AudioPlayer.Stop");
    });
    it('Clear Queue Directive', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "");
        const alexaAudioPlayerExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(alexaAudioPlayerExtension_1.AudioPlayerDirective.ClearQueue);
        assert_1.strict.ok(directive);
        assert_1.strict.equal(directive.type, "AudioPlayer.ClearQueue");
    });
    it('No Directive', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "");
        const alexaAudioPlayerExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(alexaAudioPlayerExtension_1.AudioPlayerDirective.None);
        assert_1.strict.equal(directive, undefined);
    });
    it('Test post', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const alexaMonetizationExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const userInputHelper = new sfb_f_1.UserInputHelper(testUtil.testUserInput);
        const param = { storyState: {},
            userInputHelper,
            driver: testUtil.getDefaultBaseDriver(),
            locale: 'en-US'
        };
        await alexaMonetizationExtension.pre(param);
        await alexaMonetizationExtension.post(param);
    });
    it('Test post', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const alexaMonetizationExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const userInputHelper = new sfb_f_1.UserInputHelper(testUtil.testUserInput);
        const param = { storyState: {},
            userInputHelper,
            driver: testUtil.getDefaultBaseDriver(),
            locale: 'en-US'
        };
        await alexaMonetizationExtension.pre(param);
        await alexaMonetizationExtension.post(param);
    });
    it('Test audio_player_play', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const alexaMonetizationExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const userInputHelper = new sfb_f_1.UserInputHelper(testUtil.testUserInput);
        const param = { storyState: {},
            userInputHelper,
            driver: testUtil.getDefaultBaseDriver(),
            locale: 'en-US'
        };
        await alexaMonetizationExtension.audio_player_play(testUtil.getMockInstructionParameter("audio_player_play", { "url": "https://s3.amazonaws.com/alexa-ml/project-bird/en-US/audio/bgm_yuuya.mp3" }));
    });
    it('Test audio_player_play no url', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const alexaMonetizationExtension = new alexaAudioPlayerExtension_1.AlexaAudioPlayerExtension('en-us', config);
        const userInputHelper = new sfb_f_1.UserInputHelper(testUtil.testUserInput);
        const param = { storyState: {},
            userInputHelper,
            driver: testUtil.getDefaultBaseDriver(),
            locale: 'en-US'
        };
        try {
            await alexaMonetizationExtension.audio_player_play(testUtil.getMockInstructionParameter("audio_player_play", {}));
            assert_1.strict(false, 'Should have thrown by now.');
        }
        catch (e) {
            assert_1.strict(true, 'Should throw an error');
        }
    });
});
//# sourceMappingURL=alexaAudioPlayerExtension.spec.js.map
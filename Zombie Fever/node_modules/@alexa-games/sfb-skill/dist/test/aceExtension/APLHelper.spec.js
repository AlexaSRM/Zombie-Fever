"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const assert_1 = require("assert");
const configAccessor_1 = require("../../configAccessor");
const APLHelper_1 = require("../../handler/APLHelper");
const CONFIG_FILE = "./src/test/data/abcConfig.json";
describe('APL Helper Test', () => {
    it('Initialization', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const aplHelper = new APLHelper_1.APLHelper('en-us', config);
        assert_1.strict.ok(aplHelper);
    });
    it('Generate Directive from APL Directive', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const aplHelper = new APLHelper_1.APLHelper('en-us', config);
        const visualProps = [];
        visualProps.push({ sceneID: "start",
            template: "default",
            title: "Story Title" });
        const aplTemplate = aplHelper.generateAPLDirectiveWithVisualOptions(visualProps);
        assert_1.strict.ok(aplTemplate);
        assert_1.strict.ok(aplTemplate.length > 0);
        assert_1.strict.equal(aplTemplate[0].type, "Alexa.Presentation.APL.RenderDocument");
    });
});
//# sourceMappingURL=APLHelper.spec.js.map
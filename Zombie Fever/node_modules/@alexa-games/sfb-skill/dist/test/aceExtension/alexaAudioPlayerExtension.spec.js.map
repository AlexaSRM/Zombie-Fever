{"version":3,"file":"alexaAudioPlayerExtension.spec.js","sourceRoot":"","sources":["../../../src/test/aceExtension/alexaAudioPlayerExtension.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { strict as assert } from 'assert';\n\nimport { AlexaAudioPlayerExtension, AudioPlayerDirective, AudioPlayerItem } from '../../aceExtension/alexaAudioPlayerExtension';\nimport { ConfigAccessor } from '../../configAccessor';\nimport { ACEDriver, UserInputHelper, UserInput, DriverExtensionParameter, InstructionExtensionParameter, PlayStage, StoryAccessor } from '@alexa-games/sfb-f';\nimport * as testUtil from './testUtil';\n\nconst CONFIG_FILE = \"./src/test/data/abcConfig.json\";\n\ndescribe('Alexa Audio Extension Tests', () => {\n\n    it('Instantiation', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"\");\n\n        const alexaAudioPlayerExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        assert.ok(alexaAudioPlayerExtension);\n    });\n\n    it('Play Directive', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"\");\n\n        const alexaAudioPlayerExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const audioItem : AudioPlayerItem = { 'url': 'https://s3.amazonaws.com/alexa-ml/project-bird/en-US/audio/bgm_yuuya.mp3' };\n\n        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(AudioPlayerDirective.Play, audioItem);\n\n        assert.ok(directive);\n\n        assert.equal(directive.type, \"AudioPlayer.Play\");\n\n        // TODO: Add more validation here of the given audio item\n    });\n\n    it('Stop Directive', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"\");\n\n        const alexaAudioPlayerExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(AudioPlayerDirective.Stop);\n\n        assert.ok(directive);\n\n        assert.equal(directive.type, \"AudioPlayer.Stop\");\n    });\n\n    it('Clear Queue Directive', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"\");\n\n        const alexaAudioPlayerExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(AudioPlayerDirective.ClearQueue);\n\n        assert.ok(directive);\n\n        assert.equal(directive.type, \"AudioPlayer.ClearQueue\");\n    });\n\n    it('No Directive', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"\");\n\n        const alexaAudioPlayerExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const directive = alexaAudioPlayerExtension.generateAudioPlayerDirective(AudioPlayerDirective.None);\n\n        assert.equal(directive, undefined);\n    });\n\n    it('Test post', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"./src/test/data\");\n\n        const alexaMonetizationExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const userInputHelper = new UserInputHelper(testUtil.testUserInput);\n\n        const param : DriverExtensionParameter = { storyState: {}, \n                                                   userInputHelper,\n                                                   driver: testUtil.getDefaultBaseDriver(),\n                                                   locale: 'en-US'\n                                                 };\n\n        await alexaMonetizationExtension.pre(param);\n\n        await alexaMonetizationExtension.post(param);\n\n    });\n\n    it('Test post', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"./src/test/data\");\n\n        const alexaMonetizationExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const userInputHelper = new UserInputHelper(testUtil.testUserInput);\n\n        const param : DriverExtensionParameter = { storyState: {}, \n                                                   userInputHelper,\n                                                   driver: testUtil.getDefaultBaseDriver(),\n                                                   locale: 'en-US'\n                                                 };\n\n        await alexaMonetizationExtension.pre(param);\n\n        await alexaMonetizationExtension.post(param);\n\n    });\n\n    it('Test audio_player_play', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"./src/test/data\");\n\n        const alexaMonetizationExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const userInputHelper = new UserInputHelper(testUtil.testUserInput);\n\n        const param : DriverExtensionParameter = { storyState: {}, \n                                                   userInputHelper,\n                                                   driver: testUtil.getDefaultBaseDriver(),\n                                                   locale: 'en-US'\n                                                 };\n\n        await alexaMonetizationExtension.audio_player_play(testUtil.getMockInstructionParameter(\"audio_player_play\", {\"url\": \"https://s3.amazonaws.com/alexa-ml/project-bird/en-US/audio/bgm_yuuya.mp3\"}));\n\n    });\n    \n    it('Test audio_player_play no url', async () => {\n\n        const config = await ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), \"./src/test/data\");\n\n        const alexaMonetizationExtension = new AlexaAudioPlayerExtension('en-us', config);\n\n        const userInputHelper = new UserInputHelper(testUtil.testUserInput);\n\n        const param : DriverExtensionParameter = { storyState: {}, \n                                                   userInputHelper,\n                                                   driver: testUtil.getDefaultBaseDriver(),\n                                                   locale: 'en-US'\n                                                 };\n\n        try {\n            await alexaMonetizationExtension.audio_player_play(testUtil.getMockInstructionParameter(\"audio_player_play\", {}));\n            assert(false, 'Should have thrown by now.')\n        } catch (e) {\n            assert(true, 'Should throw an error');\n        }\n    });\n\n});\n"]}
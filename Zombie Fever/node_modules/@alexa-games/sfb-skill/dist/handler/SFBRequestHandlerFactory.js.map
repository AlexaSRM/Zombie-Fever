{"version":3,"file":"SFBRequestHandlerFactory.js","sourceRoot":"","sources":["../../src/handler/SFBRequestHandlerFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import { DriverExtension, InstructionExtension, ImporterExtension } from '@alexa-games/sfb-f';\nimport { SFBRequestHandler } from './AlexaSFBRequestHandler';\nimport { ConfigAccessor } from '../configAccessor';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\ntype ExtensionType = DriverExtension|InstructionExtension|ImporterExtension;\n\nexport class SFBRequestHandlerFactory {\n    static readonly FFMPEG_BIN_NAME = \"ffmpeg\";\n\n    static create(event: any, context: any, extensions: ExtensionType[], configAccessor: ConfigAccessor, projectDir: string, customRequestHandler?: any): SFBRequestHandler {\n\n        // Because we are generating a request handler, we must be running on a deployed \n        // environment rather than a local development simulation. Set deployed to true\n        // so configAccessor can formulate the correct directory structure.\n        configAccessor.deployed = true;\n\n        const locale: string = event.request.locale? event.request.locale: \"en-US\";\n\n        const dynamoDBTalbeName: any = configAccessor.getRequestLocalizedValue(\"dynamo-db-session-table-name\", event);\n\n        const storyMetadata: string = path.resolve(projectDir, \"res\", event.request.locale, configAccessor.getRequestLocalizedValue(\"abc-baked-filename\", event));\n                \n        const pollyConfig: any = Object.assign(configAccessor.getRequestLocalizedValue(\"polly-config\", event), {\n            s3DomainName: configAccessor.getRequestLocalizedValue(\"s3-domain-name\", event),\n            bucketName: configAccessor.getRequestLocalizedValue(\"s3-bucket-name\", event),\n            workingDir: path.resolve(\"/\", \"tmp\"),\n            FFMPEGLocation: path.resolve(\"/\", \"tmp\", SFBRequestHandlerFactory.FFMPEG_BIN_NAME)\n        });\n        \n        this.setupFFMPEGbin(path.resolve(projectDir, SFBRequestHandlerFactory.FFMPEG_BIN_NAME), pollyConfig.workingDir);\n\n        const defaultPollyConfig: any = configAccessor.getRequestLocalizedValue(\"default-narrator\", event);\n        \n        // If custom type is passed in, then instantiate it instead of the common SFBRequestHandler\n        if(!customRequestHandler) {\n            customRequestHandler = SFBRequestHandler;\n        }\n\n        const sfbHandler = new customRequestHandler({\n                locale: locale,\n                story: require(storyMetadata),\n                pollyVoiceConfig: pollyConfig,\n                defaultVoiceConfig: defaultPollyConfig,\n                attributeTableName: dynamoDBTalbeName\n            },\n            extensions,\n            configAccessor,\n            projectDir);\n\n        return sfbHandler;\n    }\n\n    static setupFFMPEGbin(ffmpegSrcPath: string, workingDir: string) {\n        if(!fs.existsSync(ffmpegSrcPath)) {\n            console.log(`[WARN] Packaged FFMPEG not found in path: ${ffmpegSrcPath}`);\n            return;\n        }\n    \n        if(!fs.existsSync(workingDir)) {\n            console.log(`[INFO] Initializing audio working directory: ${workingDir}`);\n            fs.mkdirSync(workingDir);\n        }\n    \n        if(!fs.existsSync(workingDir)) {\n            console.log(`[WARN] Audio working directory initialization failed!`);\n            return;\n        }\n        \n        const destPath = path.join(workingDir, SFBRequestHandlerFactory.FFMPEG_BIN_NAME);\n        if (fs.existsSync(destPath)) {\n            console.log(`[INFO] FFMPEG already exists in the audio working directory: ${workingDir}`);\n            return;\n        }\n    \n        // Adding try catch to avoid crashing the editor when repeatedly called (race condition)\n        try {\n            console.log(`[INFO] Copying FFMPEG binary to audio working directory...`);\n            fs.copyFileSync(ffmpegSrcPath, destPath);\n    \n            fs.chmodSync(destPath, '0700');\n        } catch (err) {\n            throw err;\n        }\t\n    \n        return;\n    }\n}"]}
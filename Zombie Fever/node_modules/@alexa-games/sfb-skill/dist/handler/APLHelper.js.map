{"version":3,"file":"APLHelper.js","sourceRoot":"","sources":["../../src/handler/APLHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { HandlerInput } from 'ask-sdk';\nimport { VisualOptions } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from '../configAccessor';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { readUtf8FileExcludingBomSync } from '@alexa-games/sfb-util';\n\nexport class APLHelper {\n    private templates: any;\n    private commands: any = {};\n\n    constructor(private locale: string = \"en-US\", private configAccessor: ConfigAccessor) {\n        const aplTemplatePath = configAccessor.getAplTemplatesFilePath(locale);\n        if (!fs.existsSync(aplTemplatePath)) {\n            throw new Error(`Could not find the required APL template configuration in '${aplTemplatePath}'`);\n        }\n\n        try {\n            this.templates = JSON.parse(readUtf8FileExcludingBomSync(aplTemplatePath));\n        } catch(err) {\n            throw new Error(`There was a problem while parsing the APL template configuration.\\n${err}`);\n        }\n\n        // Note: It is ok if the APL commands file is missing\n        const aplCommandPath = configAccessor.getAplCommandsFilePath(locale);\n        if (aplCommandPath && fs.existsSync(aplCommandPath)) {\n            \n            try {\n                this.commands = JSON.parse(readUtf8FileExcludingBomSync(aplCommandPath));\n            } catch(err) {\n                throw new Error(`There was a problem while parsing the APL commands configuration.\\n${err}`);\n            }\n        }\n    }\n\n    supportsDisplay(handlerInput: HandlerInput): boolean {\n        return (handlerInput.requestEnvelope.context &&\n          handlerInput.requestEnvelope.context.System &&\n          handlerInput.requestEnvelope.context.System.device &&\n          handlerInput.requestEnvelope.context.System.device.supportedInterfaces &&\n          (handlerInput.requestEnvelope.context.System.device.supportedInterfaces['Alexa.Presentation.APL'] ||\n            handlerInput.requestEnvelope.context.System.device.supportedInterfaces.Display) &&\n          handlerInput.requestEnvelope.context.Viewport) !== undefined;\n    }\n      \n    generateAPLDirectiveWithVisualOptions(visualProperties: VisualOptions[]): any[] {\n        let templateName: string = \"default\";\n        if (visualProperties[0] && visualProperties[0].template) {\n            templateName = visualProperties[0].template\n        }\n\n        // no slide show support yet. show the first page only\n        let aplTemplateDirective: any = this.templates[templateName];\n\n        if(!aplTemplateDirective) {\n            return [];\n        }\n\n        // Check for missing directive items\n        if(!aplTemplateDirective.type) {\n            aplTemplateDirective.type = \"Alexa.Presentation.APL.RenderDocument\";\n        }\n\n        if(!aplTemplateDirective.token) {\n            aplTemplateDirective.token = \"ABC_RENDERED_DOCUMENT\";\n        }\n\n        if(!aplTemplateDirective.version && aplTemplateDirective.document && aplTemplateDirective.document.version ) {\n            aplTemplateDirective.version = aplTemplateDirective.document.version;\n        }\n\n        aplTemplateDirective.datasources.visualProperties = Object.assign(aplTemplateDirective.datasources.visualProperties, visualProperties[0]);\n\n        return [\n            aplTemplateDirective\n        ];\n    }\n\n    generateAPLCommand(commandName: string): any {\n        return this.commands[commandName];\n    }\n\n    getAPLTemplates(): any {\n        return this.templates;\n    }\n}"]}
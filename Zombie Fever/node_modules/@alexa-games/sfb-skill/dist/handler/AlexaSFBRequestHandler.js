"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sfb_f_1 = require("@alexa-games/sfb-f");
class SFBRequestHandler {
    constructor(config, customExtensions, configAccessor, projectDir) {
        this.config = config;
        this.customExtensions = customExtensions;
        this.configAccessor = configAccessor;
        this.projectDir = projectDir;
    }
    canHandle(handlerInput) {
        return true;
    }
    getTableName() {
        return this.config.attributeTableName;
    }
    async handle(handlerInput) {
        if (SFBRequestHandler.debug)
            console.debug("Starting SFBRequestHandler handle().");
        const handleStart = new Date().getTime();
        const storyData = this.config.story;
        let gameState;
        try {
            if (SFBRequestHandler.debug)
                console.debug("Starting persistent attributes request.");
            const startTime = new Date().getTime();
            gameState = await handlerInput.attributesManager.getPersistentAttributes();
            const duration = new Date().getTime() - startTime;
            if (SFBRequestHandler.debug)
                console.debug(`Persistent attributes retrieved in ${duration}ms.`);
        }
        catch (error) {
            return this.buildPersistentAttributeErrorResponse(error, handlerInput);
        }
        let customImportPlugins = [];
        let userInput = {
            handlerInput: handlerInput
        };
        let storyDriver = new sfb_f_1.ACEDriver(storyData, customImportPlugins, this.customExtensions, this.config.pollyVoiceConfig, this.config.locale);
        const NARRATOR = this.config.defaultVoiceConfig;
        if (NARRATOR && this.config.defaultVoiceConfig.enabled) {
            storyDriver.configureDefaultPollyNarrator(NARRATOR);
            storyDriver.turnOnDefaultPolly();
        }
        else {
            storyDriver.turnOffDefaultPolly();
        }
        console.log(`[INFO] Begin story run with state: ${JSON.stringify(gameState, null, 4)}`);
        const startTime = new Date().getTime();
        await storyDriver.resumeStory(userInput, gameState);
        const duration = new Date().getTime() - startTime;
        if (SFBRequestHandler.debug)
            console.debug(`SFB Driver finished in ${duration}ms.`);
        const resultState = storyDriver.getCurrentStoryState();
        console.log(`[INFO] Story run complete with state=${JSON.stringify(resultState, null, 4)}`);
        handlerInput.attributesManager.setPersistentAttributes(resultState);
        const saveStartTime = new Date().getTime();
        await handlerInput.attributesManager.savePersistentAttributes();
        const saveDuration = new Date().getTime() - saveStartTime;
        if (SFBRequestHandler.debug)
            console.debug(`persistent attributes saved in ${saveDuration}ms.`);
        const response = handlerInput.responseBuilder.getResponse();
        if (response.directives) {
            for (let directive of response.directives) {
                if (directive.type === "Connections.SendRequest" ||
                    directive.type === "AudioPlayer.Play") {
                    response.shouldEndSession = true;
                    break;
                }
            }
        }
        if (response.shouldEndSession && response.reprompt) {
            delete response.reprompt;
        }
        const handleDuration = new Date().getTime() - handleStart;
        if (SFBRequestHandler.debug)
            console.debug(`SFB Request Handler handle() finished in ${handleDuration}ms.`);
        return response;
    }
    isPausingRequest(handlerInput) {
        if (handlerInput.requestEnvelope.request.type === "SessionEndedRequest") {
            return true;
        }
        if (handlerInput.requestEnvelope.request.type === 'IntentRequest') {
            const intent = handlerInput.requestEnvelope.request.intent.name;
            return intent == "SessionEndedRequest" || intent == "AMAZON.StopIntent" || intent == "AMAZON.PauseIntent" || intent == "AMAZON.CancelIntent";
        }
        return false;
    }
    buildPersistentAttributeErrorResponse(error, handlerInput) {
        let err = error.toString();
        if (err.match(new RegExp("is not authorized to perform", "gi")) != null) {
            return handlerInput.responseBuilder
                .speak("Could not create or access your DynamoDB Table. Please verify that your IAM role has a Full Access permission to use DynamoDB.")
                .getResponse();
        }
        else if (err.match(new RegExp("Requested resource not found", "gi")) != null) {
            return handlerInput.responseBuilder
                .speak("A DynamoDB Table for this skill is being created. Please try again in 5 minutes.")
                .getResponse();
        }
        else {
            return handlerInput.responseBuilder
                .speak("Something went wrong while loading your progress. Try again later, and if the problem persists please contact the skill publisher.")
                .getResponse();
        }
    }
}
exports.SFBRequestHandler = SFBRequestHandler;
SFBRequestHandler.debug = false;
//# sourceMappingURL=AlexaSFBRequestHandler.js.map
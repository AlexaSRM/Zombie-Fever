"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const sfb_util_1 = require("@alexa-games/sfb-util");
class Util {
    static async getContentItemsFromDocument(document) {
        let filePath = path.resolve(document.uri.fsPath.replace(/\/[^\/]+?$/g, "").replace(/\\[^\\]+?$/g, ""));
        let manifestPath = path.join(filePath, "MANIFEST.json");
        let manifestFound = false;
        while (filePath.length > 0 && !manifestFound) {
            if (fs.existsSync(manifestPath)) {
                manifestFound = true;
                break;
            }
            filePath = path.resolve(filePath.replace(/\/[^\/]+?[\/]?$/g, ""));
            manifestPath = path.join(filePath, "MANIFEST.json");
        }
        let contentItems = [];
        try {
            if (manifestFound) {
                contentItems = await Util.getContentItems(JSON.parse(sfb_util_1.readUtf8FileExcludingBomSync(manifestPath)), filePath);
            }
            else {
                contentItems.push({
                    id: document.uri.toString(),
                    text: document.getText()
                });
            }
        }
        catch (err) {
            console.log("issue while parsing for content items: " + err);
        }
        return contentItems;
    }
    static async getContentItems(manifest, srcDirectoryPath) {
        return new Promise((resolve, reject) => {
            try {
                let stories = manifest.include;
                let pathToRegex = {};
                for (let storyRegex of stories) {
                    let extractFileRegex = /([\S]+\/)?([^\/]+?.abc)$/g;
                    let matchedPath = extractFileRegex.exec(storyRegex);
                    if (matchedPath != null) {
                        let postDir = matchedPath[1] ? `/${matchedPath[1]}` : "";
                        if (!pathToRegex[`${srcDirectoryPath}${postDir}`]) {
                            pathToRegex[`${srcDirectoryPath}${postDir}`] = "";
                        }
                        else {
                            pathToRegex[`${srcDirectoryPath}${postDir}`] += "|";
                        }
                        pathToRegex[`${srcDirectoryPath}${postDir}`] += `(?:^${matchedPath[2].replace(/\./g, "\\.").replace(/\*/g, ".*")}$)`;
                    }
                }
                let combinedStoryContent = [];
                for (let searchDirectory of Object.keys(pathToRegex)) {
                    let files = fs.readdirSync(searchDirectory);
                    if (!files) {
                        throw new Error(`[Import ERROR] Cannot find story content files: ${JSON.stringify(stories, null, 4)}`);
                    }
                    for (var i = 0; i < files.length; i++) {
                        let file = files[i];
                        if (file.match(pathToRegex[searchDirectory])) {
                            combinedStoryContent.push({
                                id: path.join(searchDirectory, file),
                                text: fs.readFileSync(path.join(searchDirectory, file), { encoding: 'utf8' })
                            });
                        }
                    }
                }
                resolve(combinedStoryContent);
            }
            catch (err) {
                reject(err);
            }
        });
    }
}
exports.Util = Util;
//# sourceMappingURL=Util.js.map
{"version":3,"file":"tokenReplacer.js","sourceRoot":"","sources":["../../transformers/tokenReplacer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Segmenter, SegmentType } from './segmenter';\n\nexport class TokenReplacer {\n\n    constructor(\n        private readonly segmenter: Segmenter,\n        private readonly data: any) {\n    }\n\n    /**\n     * Replaces tokens in the supplied line with values from class instance data structure.\n     * @param line Line to substitute special segments.\n     * @param isCondition True will cause non-numbers for single part tokens to be returned quoted.\n     */\n    public replaceTokens(line: string, isCondition : boolean = true, depth: number = 0): string {\n\n        let result = '';\n\n        const resolveCache: { [key: string]: string } = {};\n\n        const segments = this.segmenter.parse(line);\n\n        for (let segment of segments) {\n            switch (segment.type) {\n                case SegmentType.PlainText:\n                case SegmentType.Error:\n                case SegmentType.Snippet:\n                    result += segment.original;\n                    break\n                case SegmentType.Variable:\n\n                    result += this.resolveVariable(resolveCache, segment.value, isCondition, depth);\n                    break;\n            }\n        }\n\n        return result.toString();\n    }\n\n    private resolveVariable(resolveCache: { [key: string]: string }, key: string, isCondition: boolean, depth: number) {\n        let value = resolveCache[key];\n        if (value) {\n            return value;\n        }\n\n        value = this.resolveVariableBase(key, isCondition, depth);\n        resolveCache[key] = value;\n\n        return value;\n    }\n\n    private resolveVariableBase(key: string, isCondition: boolean, depth: number): string {\n        // Remove single quotes from throughout the key.\n        key = key.replace(/'/g, '');\n\n        if (depth < 10 && key.indexOf('{') >= 0) {\n            key = this.replaceTokens(key, false, depth + 1);\n        }\n\n        const splitKey = key.split('.');\n\n        let value = this.data;\n        for (let i = 0; i < splitKey.length; i++) {\n            value = value[splitKey[i]];\n\n            if (value === undefined) {\n                if (i === 0) {\n                    // Current convention maps undefined single-token and first token\n                    // variables values to 'false'. TODO: Ask Ezra about this\n                    value = false;\n                }\n                break;\n            }\n        }\n\n        if (splitKey.length === 1 && isCondition && value && isNaN(value)) {\n            // If our single-token variable value is not a number, and is a condition, then\n            // return it in single quotes. Inline code (in the story file) cannot create\n            // complex data types, so not treating dotted notation specially when used in \n            // a condition since that is by definition inline\n            value = `'${value.replace(/'/g, \"\\\\'\")}'`;\n        }\n\n        if (value === undefined || value === null) {\n            return 'undefined';\n        }\n   \n        return value.toString();\n    }  \n}"]}
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const _http = __importStar(require("http"));
const url = __importStar(require("url"));
const crypto_1 = require("crypto");
async function urlExists(urlString, http) {
    return new Promise((resolve) => {
        let options = {
            method: 'HEAD',
            host: url.parse(urlString).host,
            port: 80,
            path: url.parse(urlString).pathname
        };
        let request = http.request(options, function (r) {
            resolve(r.statusCode == 200);
        });
        request.end();
    });
}
/**
 * Replaces a section of speech surrounded by voice over marker with appropriate sound file.
 * A section surrounded by voice over tags (<vo> </vo>) is considered the voice over section.
 * Also, prints out the script and the generated file name for the section.
 */
class VoiceOverExtension {
    /**
     * @param urlFormat string showing the url pattern. {{file_name}} is replaced with the auto generated file name.
     */
    constructor(urlFormat, http) {
        this.urlFormat = urlFormat;
        this.recordingScript = "";
        this.http = http || _http;
    }
    async extendSourceContent(sourceHelper) {
    }
    async extendImportedContent(metadataHelper) {
        let voiceOverRegex = /<[\s]*?vo[\s]*?>([\s\S]+?)<[\s]*?\/[\s]*?vo[\s]*?>/g;
        let recordingScript = "";
        let urlFormat = this.urlFormat;
        let nonExistingURLs = [];
        let sceneString = JSON.stringify(metadataHelper.getAllScenes());
        let resultString = JSON.stringify(metadataHelper.getAllScenes());
        let voTagMatch = voiceOverRegex.exec(sceneString);
        let alreadyCaptured = {};
        while (voTagMatch) {
            let match = voTagMatch[0];
            let p1 = voTagMatch[1];
            let scriptHash = crypto_1.createHash('md5').update(p1.trim().toLowerCase().replace(/[\s]+/g, "")).digest('hex');
            let fileName = `${scriptHash}.mp3`;
            let fileURL = urlFormat.replace("{{file_name}}", fileName);
            if (!alreadyCaptured[scriptHash]) {
                alreadyCaptured[scriptHash] = true;
                let scriptContent = p1.replace(/\\n/g, "\n").replace(/\\t/g, "\t")
                    .replace(/\\'/g, "'").replace(/\\"/g, "\"");
                recordingScript += `\n\n[FILENAME] = '${fileName}'`;
                recordingScript += "\n" + scriptContent + "\n";
            }
            let exists = await urlExists(fileURL, this.http);
            if (exists) {
                resultString = resultString.replace(match, `<audio src='${fileURL}' />`);
            }
            else {
                nonExistingURLs.push(fileURL);
                resultString = resultString.replace(match, p1);
            }
            voTagMatch = voiceOverRegex.exec(sceneString);
        }
        this.recordingScript = recordingScript;
        if (nonExistingURLs.length > 0) {
            console.warn(`Voice-over file do not exist for the following URLs: ${JSON.stringify(nonExistingURLs, null, 4)}`);
        }
        metadataHelper.setAllScenes(JSON.parse(resultString));
    }
    getRecordingScript() {
        return this.recordingScript;
    }
}
exports.VoiceOverExtension = VoiceOverExtension;
//# sourceMappingURL=VoiceOverExtension.js.map
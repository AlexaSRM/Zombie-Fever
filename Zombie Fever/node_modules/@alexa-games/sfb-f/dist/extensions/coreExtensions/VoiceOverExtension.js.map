{"version":3,"file":"VoiceOverExtension.js","sourceRoot":"","sources":["../../../extensions/coreExtensions/VoiceOverExtension.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport * as _http from 'http';\nimport * as url from 'url';\nimport { ImporterExtension } from '../ACEExtension';\nimport { SourceContentHelper } from '../../importPlugins/sourceContentHelper';\nimport { StoryMetadataHelper } from '../../importPlugins/storyMetadataHelper';\n\nimport { createHash } from 'crypto';\n\nasync function urlExists(urlString : string, http: any): Promise<boolean> {\n    return new Promise<boolean> ((resolve) => {\n        let options: any = {\n            method: 'HEAD',\n            host: url.parse(urlString).host,\n            port: 80,\n            path: url.parse(urlString).pathname\n        };\n    \n        let request: any = http.request(options, function(r: any) {\n            resolve(r.statusCode == 200);\n        });\n        \n        request.end();\n    });\n}\n\n/**\n * Replaces a section of speech surrounded by voice over marker with appropriate sound file.\n * A section surrounded by voice over tags (<vo> </vo>) is considered the voice over section.\n * Also, prints out the script and the generated file name for the section.\n */\nexport class VoiceOverExtension implements ImporterExtension {\n    private urlFormat: string;\n    private recordingScript: string;\n    private http: any;\n\n    /**\n     * @param urlFormat string showing the url pattern. {{file_name}} is replaced with the auto generated file name.\n     */\n    public constructor(urlFormat: string, http?: any) {\n        this.urlFormat = urlFormat;\n        this.recordingScript = \"\";\n        this.http =  http || _http;\n    }\n\n    async extendSourceContent(sourceHelper: SourceContentHelper): Promise<void> {\n    }\n\n    async extendImportedContent(metadataHelper: StoryMetadataHelper): Promise<void> {\n        let voiceOverRegex: RegExp = /<[\\s]*?vo[\\s]*?>([\\s\\S]+?)<[\\s]*?\\/[\\s]*?vo[\\s]*?>/g\n        let recordingScript: string = \"\";\n\n        let urlFormat: string = this.urlFormat;\n        let nonExistingURLs: string[] = [];\n\n        let sceneString: string = JSON.stringify(metadataHelper.getAllScenes());\n        let resultString: string = JSON.stringify(metadataHelper.getAllScenes());\n        let voTagMatch: any = voiceOverRegex.exec(sceneString);\n\n        let alreadyCaptured: any = {};\n        while (voTagMatch) {\n            let match: string = voTagMatch[0];\n            let p1: string = voTagMatch[1];\n\n            let scriptHash: string = createHash('md5').update(p1.trim().toLowerCase().replace(/[\\s]+/g, \"\")).digest('hex');\n\n            let fileName: string = `${scriptHash}.mp3`;\n            let fileURL: string = urlFormat.replace(\"{{file_name}}\", fileName);\n\n            if (!alreadyCaptured[scriptHash]) {\n                alreadyCaptured[scriptHash] = true;\n\n                let scriptContent: string = p1.replace(/\\\\n/g, \"\\n\").replace(/\\\\t/g, \"\\t\")\n                    .replace(/\\\\'/g, \"'\").replace(/\\\\\"/g, \"\\\"\");\n\n                recordingScript += `\\n\\n[FILENAME] = '${fileName}'`;\n                recordingScript += \"\\n\" + scriptContent + \"\\n\";\n\n            }\n\n            let exists: boolean = await urlExists(fileURL, this.http);\n\n            if (exists) {\n                resultString = resultString.replace(match, `<audio src='${fileURL}' />`);\n            } else {\n                nonExistingURLs.push(fileURL);\n                resultString = resultString.replace(match, p1);\n            }\n\n            voTagMatch = voiceOverRegex.exec(sceneString);\n        }\n\n        this.recordingScript = recordingScript;\n\n        if (nonExistingURLs.length > 0 ) {\n            console.warn(`Voice-over file do not exist for the following URLs: ${JSON.stringify(nonExistingURLs, null, 4)}`);\n        }\n\n        metadataHelper.setAllScenes(JSON.parse(resultString));\n    }\n\n    public getRecordingScript(): string {\n        return this.recordingScript;\n    }\n}\n"]}
{"version":3,"file":"storyUtilities.js","sourceRoot":"","sources":["../../../test/utilities/storyUtilities.ts"],"names":[],"mappings":";;;;;;;;;AACA,2CAA6B;AAC7B,oDAAqE;AAExD,QAAA,6BAA6B,GAAG,4BAA4B,CAAC;AAC7D,QAAA,2CAA2C,GAAG,gDAAgD,CAAC;AAC/F,QAAA,2BAA2B,GAAG,0BAA0B,CAAC;AAOtE,SAAgB,aAAa,CAAC,kBAA0B,EAAE,QAAgB;IACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEvE,uCAAuC;IAEvC,OAAO,uCAA4B,CAAC,QAAQ,CAAC,CAAC;AAClD,CAAC;AAND,sCAMC;AAED,SAAgB,gBAAgB,CAAC,kBAA0B,EAAE,QAAgB;IACzE,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEpF,uCAAuC;IAEvC,OAAO,uCAA4B,CAAC,QAAQ,CAAC,CAAC;AAClD,CAAC;AAND,4CAMC;AAED,SAAgB,wBAAwB,CAAC,kBAA0B,EAAE,QAAgB;IACjF,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEpF,uCAAuC;IAEvC,OAAO,IAAI,CAAC,KAAK,CAAC,uCAA4B,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC9D,CAAC;AAND,4DAMC;AAED,SAAgB,cAAc,CAAC,kBAA0B,EAAE,aAAuB;IAC9E,MAAM,WAAW,GAAc,EAAE,CAAC;IAElC,KAAK,IAAI,SAAS,IAAI,aAAa,EAAE;QACnC,WAAW,CAAC,IAAI,CAAC;YACf,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,aAAa,CAAC,kBAAkB,EAAE,SAAS,CAAC;SACnD,CAAC,CAAC;KACJ;IAED,OAAO,WAAW,CAAC;AACvB,CAAC;AAXD,wCAWC;AAGD,SAAgB,aAAa,CAAC,kBAA0B,EAAE,OAAe;IACrE,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC,CAAC;IAExE,IAAI,UAAU,GAA8B,EAAE,CAAC;IAC/C,KAAK,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/C,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;KACvD;IACD,OAAO,UAAU,CAAC;AACtB,CAAC;AARD,sCAQC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { readUtf8FileExcludingBomSync } from '@alexa-games/sfb-util';\n\nexport const POSITIVE_TEST_STORY_DIRECTORY = './test/positive_test_cases';\nexport const NEGATIVE_TEST_STORY_DIRECTORY_MISSING_START = './test/negative_test_cases/missing_start_scene';\nexport const GLOBAL_TEST_STORY_DIRECTORY = './test/global_test_cases';\n\nexport interface Content {\n  id: string,\n  text: string\n}\n\nexport function loadTestStory(storyFileDirectory: string, fileName: string): string {\n    const fullPath = path.resolve(path.join(storyFileDirectory, fileName));\n\n    // console.log(`fullPath=${fullPath}`);\n\n    return readUtf8FileExcludingBomSync(fullPath);\n}\n\nexport function loadTestResource(storyFileDirectory: string, fileName: string): string {\n    const fullPath = path.resolve(path.join(storyFileDirectory, 'resources', fileName));\n\n    // console.log(`fullPath=${fullPath}`);\n\n    return readUtf8FileExcludingBomSync(fullPath);\n}\n\nexport function loadTestResourceAsObject(storyFileDirectory: string, fileName: string): any {\n    const fullPath = path.resolve(path.join(storyFileDirectory, 'resources', fileName));\n\n    // console.log(`fullPath=${fullPath}`);\n\n    return JSON.parse(readUtf8FileExcludingBomSync(fullPath));\n}\n\nexport function loadAllContent(storyFileDirectory: string, storyFileList: string[]): Content[] {\n    const contentList: Content[] = [];\n\n    for (let storyFile of storyFileList) {\n      contentList.push({\n        id: storyFile,\n        text: loadTestStory(storyFileDirectory, storyFile)\n      });\n    }\n\n    return contentList;\n}\n\n\nexport function getISPMapping(storyFileDirectory: string, ispFile: string): { [key: string]: string } {\n    let ispJSON = JSON.parse(loadTestResource(storyFileDirectory, ispFile));\n\n    let ispMapping: { [key: string]: string } = {};\n    for (let i: number = 0; i < ispJSON.length; i++) {\n      ispMapping[ispJSON[i].productName] = ispJSON[i].ISPID;\n    }\n    return ispMapping;\n}\n"]}
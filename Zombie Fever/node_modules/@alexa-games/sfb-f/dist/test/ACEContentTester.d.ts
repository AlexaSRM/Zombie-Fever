import { UserInput } from "../driver/driverEntity";
import { StoryMetadata } from './../story/storyMetadata';
import { ImporterExtension, InstructionExtension, DriverExtension } from './../extensions/ACEExtension';
declare type ExtensionType = ImporterExtension | DriverExtension | InstructionExtension;
export declare class ACEContentTester {
    private ffmpegPath;
    private story;
    private state;
    private extensions;
    private driver;
    private getTestDriverInstance;
    constructor(storyData: StoryMetadata, extensions: ExtensionType[], ffmpegPath: string);
    /**
     * Resets the state of the test, and prepare for a new test run.
     */
    resetTest(): void;
    /**
     * Cleans out the current run state.
     */
    givenCleanState(): void;
    givenAttribute(attributeName: string, value: any): void;
    givenAttributes(attributes: {
        [key: string]: any;
    }): void;
    /**
     * Sets the test, so that the current scene is as defined by sceneID
     * @param sceneID scene ID the test should move to.
     */
    givenCurrentScene(sceneID: string): void;
    /**
     * Run the story for given user input.
     * @param userInput instance of UserInput class of SFB module
     */
    givenUserInput(userInput: UserInput): Promise<void>;
    /**
     * Invoke system level pause by signaling for pause event.
     */
    givenPauseInvoked(): Promise<void>;
    /**
     * Invoke system level resume by signlaing for resume event.
     */
    givenResumeInvoked(): Promise<void>;
    /**
     * Invoke system level start by signaling for start/launch event.
     */
    givenStartInvoked(): Promise<void>;
    assertAttributeDefined(attributeName: string): void;
    assertAttributeUndefined(attributeName: string): void;
    assertAttributeEquals(attributeName: string, expected: any): void;
    assertAttributeNotEquals(attributeName: string, expected: any): void;
    assertSceneID(sceneID: string, msg?: string): void;
    assertSpeech(expected: string): Promise<void>;
    assertPrettySpeech(expected: string): Promise<void>;
    assertPrettySpeechSSML(expected: string): Promise<void>;
    assertSpeechSSMLPerScene(expected: string): Promise<void>;
    assertSpeechOneOf(expected: string[]): Promise<void>;
    assertReprompt(expected: string): Promise<void>;
    getSpeech(): Promise<string>;
    getReprompt(): Promise<string>;
    getAttributeValue(attributeName: string): Promise<any>;
    assertAttributeExists(attributeName: string): Promise<void>;
    assertTime(timeAttribute: string, before: number, after: number): Promise<void>;
}
export {};

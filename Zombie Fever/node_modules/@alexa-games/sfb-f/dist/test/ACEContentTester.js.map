{"version":3,"file":"ACEContentTester.js","sourceRoot":"","sources":["../../test/ACEContentTester.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserInput } from \"../driver/driverEntity\";\nimport { StoryMetadata } from './../story/storyMetadata';\n\n//import assert = require('assert');\nimport { strict as assert } from 'assert';\nimport { StoryStateHelper } from \"..\";\nimport { ACEDriver } from \"../driver/driver\";\nimport { ImporterExtension, InstructionExtension, DriverExtension, } from './../extensions/ACEExtension';\n\nimport {AudioFileAccessor, PollyUtil, PollyRequestItem, PollyOutFormat} from '@alexa-games/sfb-polly';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nconst testOutputDir = path.resolve(\".\", \".out\");\n\ntype ExtensionType = ImporterExtension|DriverExtension|InstructionExtension;\n\nclass HappyAudioAccessor implements AudioFileAccessor {\n    async exists(audioName: string): Promise<boolean> {\n        return true;\n    }\n\n    async downloadAudio(audioName: string, workingDirectoryPath: string): Promise<void> {\n        //do nothing\n    }   \n\n    async getAudioURL(audioName: string): Promise<string>{\n        return `fake.url/${audioName}`;\n    }\n\n    async uploadAudio(audioName: string, workingDirectoryPath: string): Promise<string> {\n        return await this.getAudioURL(audioName);\n    }\n}\n\nclass HappyPollyUtil extends PollyUtil {\n    async synthesize(request: PollyRequestItem, workingDir: string, filename: string, outputFormat?: PollyOutFormat): Promise<any> {\n        return;\n    }\n\n    async estimateSSMLDuration(ssml: string, workingDir: string): Promise<number> {\n        return 1000;\n    }\n}\n\nexport class ACEContentTester {\n    private story: StoryMetadata;\n\n    private state: any;\n\n    private extensions: ExtensionType[];\n    private driver: ACEDriver;\n\n    private getTestDriverInstance() {\n\n        if (!fs.existsSync(testOutputDir)) {\n            fs.mkdirSync(testOutputDir);\n        }\n        \n        return new ACEDriver(this.story, [], this.extensions, {\n            \"enabled\": false,\n            \"combineAudioTags\": true,\n            \"dontUseCache\": true,\n            \"FFMPEGLocation\": this.ffmpegPath,\n            \"workingDir\": testOutputDir,\n            \"bucketName\": \"test-bucket\",\n            \"s3DomainName\": \"s3.amazon.com\",\n            \"cognito\": {\n                identityPoolId: \"us-east-1:11cce95b-36e9-4d5e-8e95-db76d27d1ab0\",\n                loginWithAmazonAccessToken: \"\"\n            }\n        },undefined, new HappyAudioAccessor(), new HappyPollyUtil(new HappyAudioAccessor()))\n    }\n\n    constructor(storyData: StoryMetadata, extensions: ExtensionType[], private ffmpegPath: string) {\n        this.story = storyData;\n        this.state = {};\n        this.extensions = extensions;\n        this.driver = this.getTestDriverInstance();\n    }\n\n    /**\n     * Resets the state of the test, and prepare for a new test run.\n     */\n    public resetTest() {\n        this.state = {};\n        this.driver = this.getTestDriverInstance();\n    }\n\n    /**\n     * Cleans out the current run state.\n     */\n    public givenCleanState() {\n        this.state = {};\n    }\n\n    public givenAttribute(attributeName: string, value: any): void {\n        this.state[attributeName] = value;\n    }\n\n    public givenAttributes(attributes: { [key: string]: any }) {\n        this.state = Object.assign(this.state, attributes);\n    }\n\n    /**\n     * Sets the test, so that the current scene is as defined by sceneID\n     * @param sceneID scene ID the test should move to.\n     */\n    public givenCurrentScene(sceneID: string): void {\n        StoryStateHelper.setCurrentSceneID(this.state, sceneID);\n    }\n\n    /**\n     * Run the story for given user input.\n     * @param userInput instance of UserInput class of SFB module\n     */\n    public async givenUserInput(userInput: UserInput): Promise<void> {\n        this.driver = this.getTestDriverInstance();\n\n        await this.driver.resumeStory(userInput, this.state);\n        this.state = this.driver.getCurrentStoryState();\n    }\n\n    /**\n     * Invoke system level pause by signaling for pause event.\n     */\n    public async givenPauseInvoked(): Promise<void> {\n        this.driver = this.getTestDriverInstance();\n\n        await this.driver.resumeStory({\n            intent: \"AMAZON.PauseIntent\"\n        },this.state);\n        this.state = this.driver.getCurrentStoryState();\n    }\n\n    /**\n     * Invoke system level resume by signlaing for resume event.\n     */\n    public async givenResumeInvoked(): Promise<void> {\n        this.driver = this.getTestDriverInstance();\n\n        await this.driver.resumeStory({\n            intent: \"LaunchRequest\",\n            value: \"LaunchRequest\"\n        }, this.state);\n\n        this.state = this.driver.getCurrentStoryState();\n    }\n\n    /**\n     * Invoke system level start by signaling for start/launch event.\n     */\n    public async givenStartInvoked(): Promise<void> {\n        this.driver = this.getTestDriverInstance();\n        await this.givenResumeInvoked();\n    }\n\n    public assertAttributeDefined(attributeName: string): void {\n        assert.equal(this.state[attributeName] == undefined, false, `Attribute Assertion Failed`);\n    }\n\n    public assertAttributeUndefined(attributeName: string): void {\n        assert.equal(this.state[attributeName] == undefined, true, `Attribute Assertion Failed`);\n    }\n\n    public assertAttributeEquals(attributeName: string, expected: any): void {\n        assert.equal(this.state[attributeName], expected, `Attribute Assertion Failed`);\n    }\n\n    public assertAttributeNotEquals(attributeName: string, expected: any): void {\n        assert.notEqual(this.state[attributeName], expected, `Attribute Assertion Failed`);\n    }\n\n    public assertSceneID(sceneID: string, msg: string = \"\"): void {\n        let actualScene: string | null = StoryStateHelper.getCurrentSceneID(this.state);\n        assert.equal(actualScene == null ? null : actualScene.trim().toLocaleLowerCase(), sceneID.trim().toLowerCase(), `Scene ID Assertion Failed: ${msg}`);\n    }\n\n    public async assertSpeech(expected: string) {\n        let actual: string = await this.driver.getSpeechSSMLText();\n        assert.equal(actual.trim(), expected.trim(), `Speech Assertion Failed`);\n    }\n\n    public async assertPrettySpeech(expected: string) {\n        let ssmlAndPretty = await this.driver.getSpeechSSMLAndPrettyText(); \n        let actual: string = ssmlAndPretty.pretty;\n        assert.equal(actual.trim(), expected.trim(), `Pretty Speech Assertion Failed`);\n    }\n\n    public async assertPrettySpeechSSML(expected: string) {\n        let ssmlAndPretty = await this.driver.getSpeechSSMLAndPrettyText(); \n        let actual: string = ssmlAndPretty.ssml;\n        assert.equal(actual.trim(), expected.trim(), `Pretty Speech SSML Assertion Failed`);\n    }\n\n    public async assertSpeechSSMLPerScene(expected: string) {\n        let scenesAndSsmlList = await this.driver.getSpeechSSMLTextPerScene(); \n        // TODO: Make this actually do something\n    }\n\n    public async assertSpeechOneOf(expected: string[]) {\n        let actual: string = await this.driver.getSpeechSSMLText();\n        assert(expected.includes(actual.trim()), `Speech Assertion Failed.`);\n    }\n\n    public async assertReprompt(expected: string) {\n        let actual: string = await this.driver.getRepromptSSMLText();\n        assert.equal(actual.trim(), expected.trim(), `Reprompt Assertion Failed`);\n    }\n\n    public async getSpeech() {\n        return await this.driver.getSpeechSSMLText();\n    }\n\n    public async getReprompt() {\n        return await this.driver.getRepromptSSMLText();\n    }\n\n    public async getAttributeValue(attributeName: string) {\n        return this.state[attributeName];\n    }\n\n    public async assertAttributeExists(attributeName: string) {\n        let actual: string = this.state[attributeName];\n        assert(actual != undefined, attributeName + ' undefined');\n    }\n\n    public async assertTime(timeAttribute: string, before: number, after: number) {\n        let time: number = +this.state[timeAttribute];\n        assert(time >= before && time <= after, 'Invalid time');\n    }\n}\n"]}
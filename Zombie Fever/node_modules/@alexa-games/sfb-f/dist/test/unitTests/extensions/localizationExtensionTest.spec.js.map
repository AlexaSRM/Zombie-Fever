{"version":3,"file":"localizationExtensionTest.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/extensions/localizationExtensionTest.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { LocalizationExtension } from './../../../extensions/coreExtensions/LocalizationExtension';\nimport { StoryMetadata, InstructionType } from './../../../story/storyMetadata';\nimport { StoryMetadataHelper } from '../../../importPlugins/storyMetadataHelper';\nimport { strict as assert } from 'assert';\nimport { SourceContentHelper } from '../../../importPlugins/sourceContentHelper';\n\ninterface LanguageStrings {\n    [locale: string]: {\n        translation: {\n            [key: string]: string\n        }\n    } \n}\ndescribe(\"Localization Extension Test\", function () {\n    it(\"Source Locale Generation Only\", async function () {\n        const testingLocale: string = \"en-US\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined,\"en-US\");\n        await localizationExtension.extendImportedContent(storyHelper);\n        const languageStrings: LanguageStrings = localizationExtension.getLocalizedStringsObject();\n        \n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.equal(resultingStartNarration, expectedStartNarration);\n\n        // utterance translation check\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it(\"Undefined source locale resolves to en-US\", async function () {\n        const testingLocale: string = \"en-US\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined,undefined);\n        await localizationExtension.extendImportedContent(storyHelper);\n        const languageStrings: LanguageStrings = localizationExtension.getLocalizedStringsObject();\n        \n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.equal(resultingStartNarration, expectedStartNarration);\n\n        // utterance translation check\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"None Source Locale Generation Only\", async function () {\n        const testingLocale: string = \"en-GB\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(storyHelper);\n        const languageStrings = localizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.equal(resultingStartNarration, expectedStartNarration);\n\n        // utterance translation check\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n\n    });\n\n    it (\"Duplicate Source String When Generating None Source Locale String For the First Time\", async function () {\n        const sourceLocale: string = \"en-US\";\n        const testingLocale: string = \"en-GB\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(sourceLocale,{},undefined,sourceLocale);\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const languageStrings = localizationExtension.getLocalizedStringsObject();\n        \n        const noneSrcExtension = new LocalizationExtension(testingLocale, languageStrings, undefined, sourceLocale);\n        await noneSrcExtension.extendImportedContent(storyHelper);\n        \n        // en-US (source locale)\n        const resultingSourceStartNarration = languageStrings[sourceLocale].translation['start.narration'];\n        const expectedSourceStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n\n        assert.equal(resultingSourceStartNarration, expectedSourceStartNarration);\n        assert.equal(languageStrings[sourceLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[sourceLocale].translation['utterance-start over'], \"start over\");\n\n        // en-GB (second locale)\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.equal(resultingStartNarration, expectedStartNarration);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Translation for None Source Locale is Not Overwritten On Overwrite == true\", async function () {\n        const testingLocale: string = \"en-GB\";\n        const translation: string = \"Translated Text\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstlanguageStrings = localizationExtension.getLocalizedStringsObject();\n\n        firstlanguageStrings[testingLocale].translation['start.narration'] = translation;\n        \n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstlanguageStrings, true, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.notEqual(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.notEqual(resultingStartNarration, expectedStartNarration);\n        assert.equal(resultingStartNarration, translation);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Translation for None Source Locale is Not Overwritten On Overwrite == false\", async function () {\n        const testingLocale: string = \"en-GB\";\n        const translation: string = \"Translated Text\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n\n        firstLanguageStrings[testingLocale].translation['start.narration'] = translation;\n        \n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, false, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.notEqual(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.notEqual(resultingStartNarration, expectedStartNarration);\n        assert.equal(resultingStartNarration, translation);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    })\n\n    it (\"Translation for None Source Locale Is Not Overwritten On Overwrite == undefined\", async function () {\n        const testingLocale: string = \"en-GB\";\n        const translation: string = \"Translated Text\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n\n        firstLanguageStrings[testingLocale].translation['start.narration'] = translation;\n        \n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, undefined, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.notEqual(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.notEqual(resultingStartNarration, expectedStartNarration);\n        assert.equal(resultingStartNarrationOnImportedStory, translation);\n        assert.equal(resultingStartNarration, translation);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Edits on languageString for SOURCE is Overwritten when Overwrite == true\", async function () {\n        const testingLocale: string = \"en-US\";\n        const translation: string = \"Translated Text\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n\n        firstLanguageStrings[testingLocale].translation['start.narration'] = translation;\n        \n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, true, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.equal(resultingStartNarration, expectedStartNarration);\n        assert.notEqual(resultingStartNarrationOnImportedStory, translation);\n        assert.notEqual(resultingStartNarration, translation);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Edits on languageString for SOURCE is Not Overwritten by the Source Content When Overwrite == false\", async function () {\n        const testingLocale: string = \"en-US\";\n        const translation: string = \"Translated Text\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n\n        firstLanguageStrings[testingLocale].translation['start.narration'] = translation;\n        \n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, false, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.notEqual(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.notEqual(resultingStartNarration, expectedStartNarration);\n        assert.equal(resultingStartNarrationOnImportedStory, translation);\n        assert.equal(resultingStartNarration, translation);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    })\n\n    it (\"Edits on languageString for SOURCE is Not Overwritten by the Source Content When Overwrite == undefined\", async function () {\n        const testingLocale: string = \"en-US\";\n        const translation: string = \"Translated Text\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n\n        firstLanguageStrings[testingLocale].translation['start.narration'] = translation;\n\n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, undefined, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.notEqual(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.notEqual(resultingStartNarration, expectedStartNarration);\n        assert.equal(resultingStartNarrationOnImportedStory, translation);\n        assert.equal(resultingStartNarration, translation);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n\n    it (\"A key on languageString deleted by mistake gets repopulated\", async function () {\n        const testingLocale: string = \"en-US\";\n        const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n\n        delete firstLanguageStrings[testingLocale].translation['start.narration'];\n\n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, undefined, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const expectedStartNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, expectedStartNarration);\n        assert.equal(resultingStartNarration, expectedStartNarration);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Source String Delete => Correlating String ID deleted in languageStrings for all locales, when Overwrite == true\", async function () {\n        const sourceLocale: string = \"en-US\";\n        const testingLocales: string[] = [\n            \"en-US\",\n            \"en-GB\"\n        ]\n\n        let languageString: any = {};\n        // first run; string generation\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,true,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // re-run with deleted scene\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(DELETED_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,true,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // assert in all locales\n        for (let locale of testingLocales) {\n            const untouchedString = languageString[locale].translation['start.narration'];\n            const deletedString = languageString[locale].translation['start.something else'];\n\n            assert.notEqual(untouchedString, undefined);\n            assert.equal(deletedString, undefined);\n        }\n    });\n\n    it (\"Source String Delete => Correlating String ID deleted in languageStrings for all locales, when Overwrite == false\", async function () {\n        const sourceLocale: string = \"en-US\";\n        const testingLocales: string[] = [\n            \"en-US\",\n            \"en-GB\"\n        ]\n\n        let languageString: any = {};\n        // first run; string generation\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,false,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // re-run with deleted scene\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(DELETED_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,false,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // assert in all locales\n        for (let locale of testingLocales) {\n            const untouchedString = languageString[locale].translation['start.narration'];\n            const deletedString = languageString[locale].translation['start.something else'];\n\n            assert.notEqual(untouchedString, undefined);\n            assert.equal(deletedString, undefined);\n        }\n    });\n\n    it (\"Source String Delete => Correlating String ID deleted in languageStrings for all locales, when Overwrite == undefined\", async function () {\n        const sourceLocale: string = \"en-US\";\n        const testingLocales: string[] = [\n            \"en-US\",\n            \"en-GB\"\n        ]\n\n        let languageString: any = {};\n        // first run; string generation\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,undefined,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // re-run with deleted scene\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(DELETED_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,undefined,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // assert in all locales\n        for (let locale of testingLocales) {\n            const untouchedString = languageString[locale].translation['start.narration'];\n            const deletedString = languageString[locale].translation['start.something else'];\n\n            assert.notEqual(untouchedString, undefined);\n            assert.equal(deletedString, undefined);\n        }\n    });\n\n    it (\"Source String Added => Correlating String ID added in languageStrings for all locales, when Overwrite == true\", async function () {\n        const sourceLocale: string = \"en-US\";\n        const testingLocales: string[] = [\n            \"en-US\",\n            \"en-GB\"\n        ]\n\n        let languageString: any = {};\n        // first run; string generation\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,true,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // re-run with deleted scene\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(ADDED_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,true,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // assert in all locales\n        for (let locale of testingLocales) {\n            const untouchedString = languageString[locale].translation['start.narration'];\n            const addedString = languageString[locale].translation['added scene.narration'];\n\n            assert.notEqual(untouchedString, undefined);\n            assert.notEqual(addedString, undefined);\n        }\n    });\n\n    it (\"Source String Added => Correlating String ID added in languageStrings for all locales, when Overwrite == false\", async function () {\n        const sourceLocale: string = \"en-US\";\n        const testingLocales: string[] = [\n            \"en-US\",\n            \"en-GB\"\n        ]\n\n        let languageString: any = {};\n        // first run; string generation\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,false,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // re-run with deleted scene\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(ADDED_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,false,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // assert in all locales\n        for (let locale of testingLocales) {\n            const untouchedString = languageString[locale].translation['start.narration'];\n            const addedString = languageString[locale].translation['added scene.narration'];\n\n            assert.notEqual(untouchedString, undefined);\n            assert.notEqual(addedString, undefined);\n        }\n    });\n\n    it (\"Source String Added => Correlating String ID added in languageStrings for all locales, when Overwrite == undefined\", async function () {\n        const sourceLocale: string = \"en-US\";\n        const testingLocales: string[] = [\n            \"en-US\",\n            \"en-GB\"\n        ]\n\n        let languageString: any = {};\n        // first run; string generation\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(TEST_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,undefined,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // re-run with deleted scene\n        for (let locale of testingLocales) {\n            const storyHelper = new StoryMetadataHelper(ADDED_STORY);\n\n            const localizationExtension = new LocalizationExtension(locale,languageString,undefined,sourceLocale);\n            await localizationExtension.extendImportedContent(storyHelper);\n\n            languageString = localizationExtension.getLocalizedStringsObject();\n        }\n\n        // assert in all locales\n        for (let locale of testingLocales) {\n            const untouchedString = languageString[locale].translation['start.narration'];\n            const addedString = languageString[locale].translation['added scene.narration'];\n\n            assert.notEqual(untouchedString, undefined);\n            assert.notEqual(addedString, undefined);\n        }\n    });\n\n\n    it (\"Edit in SOURCE updates source locale language string when Overwrite == true\", async function () {\n        const testingLocale: string = \"en-US\";\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n        \n        const storyHelper = new StoryMetadataHelper(CHANGED_STORY);\n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, true, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const originalNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const changedNarration = new StoryMetadataHelper(CHANGED_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, changedNarration);\n        assert.equal(resultingStartNarration, changedNarration);\n        assert.notEqual(resultingStartNarrationOnImportedStory, originalNarration);\n        assert.notEqual(resultingStartNarration, originalNarration);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Edit in SOURCE does NOT update source locale language string when Overwrite == false\", async function () {\n        const testingLocale: string = \"en-US\";\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n        \n        const storyHelper = new StoryMetadataHelper(CHANGED_STORY);\n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, false, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const originalNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const changedNarration = new StoryMetadataHelper(CHANGED_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, originalNarration);\n        assert.equal(resultingStartNarration, originalNarration);\n        assert.notEqual(resultingStartNarrationOnImportedStory, changedNarration);\n        assert.notEqual(resultingStartNarration, changedNarration);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Edit in SOURCE does NOT update source locale language string when Overwrite == undefined\", async function () {\n        const testingLocale: string = \"en-US\";\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendImportedContent(new StoryMetadataHelper(TEST_STORY));\n        const firstLanguageStrings = localizationExtension.getLocalizedStringsObject();\n        \n        const storyHelper = new StoryMetadataHelper(CHANGED_STORY);\n        const secondLocalizationExtension = new LocalizationExtension(testingLocale, firstLanguageStrings, undefined, \"en-US\");\n        await secondLocalizationExtension.extendImportedContent(storyHelper);\n\n        const languageStrings = secondLocalizationExtension.getLocalizedStringsObject();\n\n        const resultingStartNarration = languageStrings[testingLocale].translation['start.narration'];\n        const originalNarration = new StoryMetadataHelper(TEST_STORY).getSceneByID('start').contents[0].narration;\n        const changedNarration = new StoryMetadataHelper(CHANGED_STORY).getSceneByID('start').contents[0].narration;\n        const resultingStartNarrationOnImportedStory = storyHelper.getSceneNarration(\"start\");\n\n        assert.equal(resultingStartNarrationOnImportedStory, originalNarration);\n        assert.equal(resultingStartNarration, originalNarration);\n        assert.notEqual(resultingStartNarrationOnImportedStory, changedNarration);\n        assert.notEqual(resultingStartNarration, changedNarration);\n        assert.equal(languageStrings[testingLocale].translation['utterance-restart'], \"restart\");\n        assert.equal(languageStrings[testingLocale].translation['utterance-start over'], \"start over\");\n    });\n\n    it (\"Unused extension method 'extendSourceContent' does not throw when called\", async function () {\n        const testingLocale: string = \"en-GB\";\n\n        const localizationExtension = new LocalizationExtension(testingLocale,{},undefined, \"en-US\");\n        await localizationExtension.extendSourceContent(new SourceContentHelper([\n            {\n                id: \"test.abc\",\n                text: \"@start\"\n            }\n        ]))\n    });\n});\n\n\nconst TEST_STORY: StoryMetadata = {\n    pluginName: \"something\",\n    scenes: [\n        {\n            contents: [\n                {\n                    narration: \"testing narration\",\n                    sceneDirections: [\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a reprompt\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a recap\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.CHOICE,\n                            parameters: {\n                                \"utterances\": [\n                                    \"restart\",\n                                    \"start over\"\n                                ],\n                                \"saveToHistory\": \"true\",\n                                \"directions\": [\n                                    {\n                                        \"directionType\": \"bookmark\",\n                                        \"parameters\": {\n                                            \"variableName\": \"bookmark\"\n                                        },\n                                    },\n                                    {\n                                        \"directionType\": \"go to\",\n                                        \"parameters\": {\n                                            \"target\": \"restart confirm\",\n                                            \"targetSceneProperty\": \"narration\"\n                                        },\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \n            ],\n            id: \"start\"\n        },\n        {\n            contents: [\n                {\n                    narration: \"testing narration\",\n                    sceneDirections: [\n                        {\n                            directionType: InstructionType.CHOICE,\n                            parameters: {\n                                \"utterances\": [\n                                    \"restart\",\n                                    \"start over\"\n                                ],\n                                \"saveToHistory\": \"true\",\n                                \"directions\": [\n                                    {\n                                        \"directionType\": \"bookmark\",\n                                        \"parameters\": {\n                                            \"variableName\": \"bookmark\"\n                                        },\n                                    },\n                                    {\n                                        \"directionType\": \"go to\",\n                                        \"parameters\": {\n                                            \"target\": \"restart confirm\",\n                                            \"targetSceneProperty\": \"narration\"\n                                        },\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \n            ],\n            id: \"something else\"\n        }\n    ],\n    storyID: \"something\",\n    storyTitle: \"something\"\n}\n\nconst CHANGED_STORY: StoryMetadata = {\n    pluginName: \"something\",\n    scenes: [\n        {\n            contents: [\n                {\n                    narration: \"Changed Narration\",\n                    sceneDirections: [\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a reprompt\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a recap\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.CHOICE,\n                            parameters: {\n                                \"utterances\": [\n                                    \"restart\",\n                                    \"start over\"\n                                ],\n                                \"saveToHistory\": \"true\",\n                                \"directions\": [\n                                    {\n                                        \"directionType\": \"bookmark\",\n                                        \"parameters\": {\n                                            \"variableName\": \"bookmark\"\n                                        },\n                                    },\n                                    {\n                                        \"directionType\": \"go to\",\n                                        \"parameters\": {\n                                            \"target\": \"restart confirm\",\n                                            \"targetSceneProperty\": \"narration\"\n                                        },\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \n            ],\n            id: \"start\"\n        }\n    ],\n    storyID: \"something\",\n    storyTitle: \"something\"\n}\n\nconst DELETED_STORY: StoryMetadata = {\n    pluginName: \"something\",\n    scenes: [\n        {\n            contents: [\n                {\n                    narration: \"testing narration\",\n                    sceneDirections: [\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a reprompt\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a recap\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.CHOICE,\n                            parameters: {\n                                \"utterances\": [\n                                    \"restart\",\n                                    \"start over\"\n                                ],\n                                \"saveToHistory\": \"true\",\n                                \"directions\": [\n                                    {\n                                        \"directionType\": \"bookmark\",\n                                        \"parameters\": {\n                                            \"variableName\": \"bookmark\"\n                                        },\n                                    },\n                                    {\n                                        \"directionType\": \"go to\",\n                                        \"parameters\": {\n                                            \"target\": \"restart confirm\",\n                                            \"targetSceneProperty\": \"narration\"\n                                        },\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \n            ],\n            id: \"start\"\n        }\n    ],\n    storyID: \"something\",\n    storyTitle: \"something\"\n}\n\nconst ADDED_STORY: StoryMetadata = {\n    pluginName: \"something\",\n    scenes: [\n        {\n            contents: [\n                {\n                    narration: \"testing narration\",\n                    sceneDirections: [\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a reprompt\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.REPROMPT,\n                            parameters: {\n                                message: \"this is a recap\"\n                            }\n                        },\n                        {\n                            directionType: InstructionType.CHOICE,\n                            parameters: {\n                                \"utterances\": [\n                                    \"restart\",\n                                    \"start over\"\n                                ],\n                                \"saveToHistory\": \"true\",\n                                \"directions\": [\n                                    {\n                                        \"directionType\": \"bookmark\",\n                                        \"parameters\": {\n                                            \"variableName\": \"bookmark\"\n                                        },\n                                    },\n                                    {\n                                        \"directionType\": \"go to\",\n                                        \"parameters\": {\n                                            \"target\": \"restart confirm\",\n                                            \"targetSceneProperty\": \"narration\"\n                                        },\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \n            ],\n            id: \"start\"\n        },\n        {\n            contents: [\n                {\n                    narration: \"testing narration\",\n                    sceneDirections: [\n                        {\n                            directionType: InstructionType.CHOICE,\n                            parameters: {\n                                \"utterances\": [\n                                    \"restart\",\n                                    \"start over\"\n                                ],\n                                \"saveToHistory\": \"true\",\n                                \"directions\": [\n                                    {\n                                        \"directionType\": \"bookmark\",\n                                        \"parameters\": {\n                                            \"variableName\": \"bookmark\"\n                                        },\n                                    },\n                                    {\n                                        \"directionType\": \"go to\",\n                                        \"parameters\": {\n                                            \"target\": \"restart confirm\",\n                                            \"targetSceneProperty\": \"narration\"\n                                        },\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \n            ],\n            id: \"something else\"\n        },\n        {\n            contents: [\n                {\n                    narration: \"testing narration\",\n                    sceneDirections: [\n                        {\n                            directionType: InstructionType.CHOICE,\n                            parameters: {\n                                \"utterances\": [\n                                    \"restart\",\n                                    \"start over\"\n                                ],\n                                \"saveToHistory\": \"true\",\n                                \"directions\": [\n                                    {\n                                        \"directionType\": \"bookmark\",\n                                        \"parameters\": {\n                                            \"variableName\": \"bookmark\"\n                                        },\n                                    },\n                                    {\n                                        \"directionType\": \"go to\",\n                                        \"parameters\": {\n                                            \"target\": \"restart confirm\",\n                                            \"targetSceneProperty\": \"narration\"\n                                        },\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \n            ],\n            id: \"added scene\"\n        }\n    ],\n    storyID: \"something\",\n    storyTitle: \"something\"\n}"]}
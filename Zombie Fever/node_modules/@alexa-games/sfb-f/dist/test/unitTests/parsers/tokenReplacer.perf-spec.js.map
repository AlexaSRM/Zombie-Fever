{"version":3,"file":"tokenReplacer.perf-spec.js","sourceRoot":"","sources":["../../../../test/unitTests/parsers/tokenReplacer.perf-spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TokenReplacer } from '../../../transformers/tokenReplacer';\nimport { SegmenterBuilder } from '../../../transformers/segmenter';\nimport { substituteSlotValues } from '../../../transformers/legacy';\n\n// Segmenter is stateless and so can be used globally.\n\nconst data = {\n    one: 1,\n    two: 2,\n    threestr: 'its 3rd',\n    complex: {\n        four: 4,\n        five: 5,\n        level2: {\n            six: 6\n        },\n        loop: '{complex.loop}'\n    },\n    level1: {\n        level2: {\n            level3: {\n                data: 'Test value goes here',\n                data1: 'More test data.'\n            }\n        }\n    },\n    loop: '{loop}',\n    location1: 'Ballard',\n    location2: 'Seattle',\n    index: 2,\n    pick1: 2,\n    pick2: 1\n};\n\ndescribe(\"TokenReplacer Performance\", function () {\n\n    // *say this will cause a infinite {loop}\n    // *say you are at {location{index}}\n\n    const tokenReplacer = new TokenReplacer(SegmenterBuilder.getVariableSegmenter(), data);\n\n\n    it(\"performance test new parser.\", function () {\n        \n        let input = '';\n        \n        for (let i = 0; i < 1; i++) {\n            input += 'More {two} text to {complex.level2.six} data to {two} expand. {\\'level1.\\'level2.level3.data}, with {missing}. Move to {location{pick{index}}}. '\n        }\n\n        const count = 500000;\n        const newStartTime = Date.now();\n\n        for (let i = 0; i < count; i++) {\n            tokenReplacer.replaceTokens(input, false);\n        }\n        const newEndTime = Date.now();\n\n        console.log(`New Method Time: ${newEndTime - newStartTime}`)\n\n        const oldStartTime = Date.now();\n\n        for (let i = 0; i < count; i++) {\n            substituteSlotValues(input, data, false);\n        }\n        const oldEndTime = Date.now();\n        console.log(`Original Method Time: ${oldEndTime - oldStartTime}`)\n    });\n\n    it(\"common performance test new parser.\", function () {\n        \n        let input = '';\n        \n        for (let i = 0; i < 1; i++) {\n            input += 'This {one} and that {threestr}. '\n        }\n\n        const count = 500000;\n        const newStartTime = Date.now();\n\n        for (let i = 0; i < count; i++) {\n            tokenReplacer.replaceTokens(input, false);\n        }\n        const newEndTime = Date.now();\n\n        console.log(`New Method Time: ${newEndTime - newStartTime}`)\n\n        const oldStartTime = Date.now();\n\n        for (let i = 0; i < count; i++) {\n            substituteSlotValues(input, data, false);\n        }\n        const oldEndTime = Date.now();\n        console.log(`Original Method Time: ${oldEndTime - oldStartTime}`)\n    });\n\n    it(\"long string performance test new parser.\", function () {\n        \n        let input = '';\n        \n        for (let i = 0; i < 200; i++) {\n            input += 'More {two} text to {complex.level2.six} data to {two} expand. {\\'level1.\\'level2.level3.data}, with {missing}. Move to {location{pick{index}}}. '\n        }\n\n        const count = 5000;\n        const newStartTime = Date.now();\n\n        for (let i = 0; i < count; i++) {\n            tokenReplacer.replaceTokens(input, false);\n        }\n        const newEndTime = Date.now();\n\n        console.log(`New Method Time: ${newEndTime - newStartTime}`)\n\n        const oldStartTime = Date.now();\n\n        for (let i = 0; i < count; i++) {\n            substituteSlotValues(input, data, false);\n        }\n        const oldEndTime = Date.now();\n        console.log(`Original Method Time: ${oldEndTime - oldStartTime}`)\n    });\n});"]}
{"version":3,"file":"defaultFormatImportPluginTest.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/importPlugins/defaultFormatImportPluginTest.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as defaultPlugin from '../../../importPlugins/DefaultFormatImportPlugin';\nimport { StoryMetadata, InstructionType } from './../../../story/storyMetadata';\nimport { strict as assert } from 'assert';\nimport { StoryMetadataHelper } from '../../../importPlugins/storyMetadataHelper';\n\ndescribe(\"ABC Format Import Test\", function () {\n    it(\"*say only\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        const storyMetadataHelper = new StoryMetadataHelper({\n            pluginName: \"default\",\n            scenes: importResult.importedScenes,\n            storyID: \"test story\",\n            storyTitle: \"test story\"\n        });\n\n        assert.ok(importResult.errors == undefined || importResult.errors.length === 0);\n        assert.equal(storyMetadataHelper.getAllScenes().length, 1);\n        assert.equal(storyMetadataHelper.getSceneNarration('start').trim(), \"this is a say\");\n    });\n\n    it(\"*say and *then\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            -> somewhere\n\n        @somewhere\n        *then\n            >> END\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        const storyMetadataHelper = new StoryMetadataHelper({\n            pluginName: \"default\",\n            scenes: importResult.importedScenes,\n            storyID: \"test story\",\n            storyTitle: \"test story\"\n        });\n\n        assert.ok(importResult.errors == undefined || importResult.errors.length === 0);\n        assert.equal(storyMetadataHelper.getAllScenes().length, 2);\n        assert.equal(storyMetadataHelper.getSceneNarration('start').trim(), \"this is a say\");\n        assert.equal(storyMetadataHelper.getSceneInstructions('start').length, 1);\n    });\n\n    it(\"*then only\", async function () {\n        const testString: string = `\n        @start\n        *then\n            -> somewhere\n\n        @somewhere\n        *then\n            >> END\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        const storyMetadataHelper = new StoryMetadataHelper({\n            pluginName: \"default\",\n            scenes: importResult.importedScenes,\n            storyID: \"test story\",\n            storyTitle: \"test story\"\n        });\n\n        assert.ok(importResult.errors == undefined || importResult.errors.length === 0);\n        assert.equal(storyMetadataHelper.getAllScenes().length, 2);\n        try {\n            storyMetadataHelper.getSceneNarration('start')\n        } catch(err) {\n            assert.ok(true);\n        }\n        assert.equal(storyMetadataHelper.getSceneInstructions('start').length, 1);\n    });\n\n    it(\"*then with empty lines\", async function () {\n        const testString: string = `\n        @start\n        *then\n\n\n            -> somewhere\n\n\n        @somewhere\n        *then\n\n            >> END\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        const storyMetadataHelper = new StoryMetadataHelper({\n            pluginName: \"default\",\n            scenes: importResult.importedScenes,\n            storyID: \"test story\",\n            storyTitle: \"test story\"\n        });\n\n        assert.ok(importResult.errors == undefined || importResult.errors.length === 0);\n        assert.equal(storyMetadataHelper.getAllScenes().length, 2);\n        try {\n            storyMetadataHelper.getSceneNarration('start')\n        } catch(err) {\n            assert.ok(true);\n        }\n        assert.equal(storyMetadataHelper.getSceneInstructions('start').length, 1);\n    });\n\n    it(\"syntax error line number test\", async function () {\n        const testStrings: string[] = [\n        `\n        @start\n        *say\n            this is a say\n            normal\n        *then\n            flag\n        `,\n        `\n        @start\n\n        *say\n            this is a say\n        *then\n            flag\n        `,\n        `\n        @start\n        *say\n            this is a say\n        *then\n            flag correctly\n            flag\n        `\n        ];\n\n        for (let testString of testStrings) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors) {\n                assert.ok(importResult.errors.length === 1);\n                assert.equal(importResult.errors[0].lineNumber, 7);\n            } else {\n                assert.fail();\n            }\n        }\n    });\n\n    it(\"-> go to not existing scene\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            -> bad\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n    \n    it(\"-> go to syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            ->\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"flag syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            flag\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"increase syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            increase\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"decrease syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            decrease\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"unflag syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            unflag\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"reduce syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            reduce\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"set syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            set\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"slot syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            slot\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"remove syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            remove\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"put syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            put\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"dequeue syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            dequeue\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"pop syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            pop\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"stack syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            stack\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"clear syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            clear\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"bgm syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            clear\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"bgm syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            bgm\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"<-> syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            <->\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"<-> non existing scene error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            -> bad\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"'if' missing opening bracket\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            if something\n                -> start\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n            assert.equal(importResult.errors[0].errorMessage, \"Missing '{': if block must start with 'if [utterances] {'\");\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"'if' missing closing bracket\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            if something {\n                -> start\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n            assert.equal(importResult.errors[0].errorMessage, \"Missing '}'\");\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"if missing conditions\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            if {\n                -> start\n            }\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"if bad conditions\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            if variable >> variable2 {\n                -> start\n            }\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.equal(importResult.errors.length, 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"multiply syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            multiply\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"divide syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            divide\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"roll syntax error\", async function () {\n        const testString: string = `\n        @start\n        *say\n            this is a say\n        *then\n            roll\n        `\n        const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n        const importResult = await plugin.importData([\n                {\n                    id: \"start.abc\",\n                    text: testString\n                }\n            ],\n            {ignoreSyntaxError: false}\n        );\n\n        if (importResult.errors) {\n            assert.ok(importResult.errors.length === 1);\n            assert.equal(importResult.errors[0].lineNumber, 6);\n        } else {\n            assert.fail();\n        }\n    });\n\n    it(\"->: valid syntax variations\", async function () {\n        const testCases: string[] = [\n        `\n        @start\n            *then\n-> start\n        `,\n        `\n        @start\n            *then\n                -> start\n        `,\n        `\n        @start\n            *then\n                ->start\n        `,\n        `\n        @start\n            *then\n->start\n        `,\n        `\n        @start\n            *then\n->          start\n        `,\n        `\n        @start\n            *then\n         ->          start\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].parameters.target, \"start\", `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"<->: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n<-> start\n        `,\n        `\n        @start\n            *then\n                <-> start\n        `,\n        `\n        @start\n            *then\n                <->start\n        `,\n        `\n        @start\n            *then\n<->start\n        `,\n        `\n        @start\n            *then\n<->          start\n        `,\n        `\n        @start\n            *then\n         <->          start\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].parameters.target, \"start\", `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\">>RETURN: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> return\n        `,\n        `\n        @start\n            *then\n                >> return\n        `,\n        `\n        @start\n            *then\n                >>return\n        `,\n        `\n        @start\n            *then\n>>return\n        `,\n        `\n        @start\n            *then\n>>          return\n        `,\n        `\n        @start\n            *then\n         >>          return\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.RETURN, `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\">>RESTART: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> restart\n        `,\n        `\n        @start\n            *then\n                >> restart\n        `,\n        `\n        @start\n            *then\n                >>restart\n        `,\n        `\n        @start\n            *then\n>>restart\n        `,\n        `\n        @start\n            *then\n>>          restart\n        `,\n        `\n        @start\n            *then\n         >>          restart\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.RESTART, `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\">>RESUME: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> RESUME\n        `,\n        `\n        @start\n            *then\n                >> RESUME\n        `,\n        `\n        @start\n            *then\n                >>RESUME\n        `,\n        `\n        @start\n            *then\n>>RESUME\n        `,\n        `\n        @start\n            *then\n>>          RESUME\n        `,\n        `\n        @start\n            *then\n         >>          RESUME\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.GO_TO, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.target, \"{resume}\", `Failed to pass syntax:\\n${testString}`);\n\n                }\n            }\n        }\n    });\n\n    it(\">>REPEAT: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> REPEAT\n        `,\n        `\n        @start\n            *then\n                >> REPEAT\n        `,\n        `\n        @start\n            *then\n                >>REPEAT\n        `,\n        `\n        @start\n            *then\n>>REPEAT\n        `,\n        `\n        @start\n            *then\n>>          REPEAT\n        `,\n        `\n        @start\n            *then\n         >>          REPEAT\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.REPEAT, `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\">>REPROMPT: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> REPROMPT\n        `,\n        `\n        @start\n            *then\n                >> REPROMPT\n        `,\n        `\n        @start\n            *then\n                >>REPROMPT\n        `,\n        `\n        @start\n            *then\n>>REPROMPT\n        `,\n        `\n        @start\n            *then\n>>          REPROMPT\n        `,\n        `\n        @start\n            *then\n         >>          REPROMPT\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.REPEAT_REPROMPT, `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\">>BACK: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> BACK\n        `,\n        `\n        @start\n            *then\n                >> BACK\n        `,\n        `\n        @start\n            *then\n                >>BACK\n        `,\n        `\n        @start\n            *then\n>>BACK\n        `,\n        `\n        @start\n            *then\n>>          BACK\n        `,\n        `\n        @start\n            *then\n         >>          BACK\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.BACK, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.count, 1, `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\">>BACK [int]: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n                >>BACK 3\n        `,\n        `\n        @start\n            *then\n                >>BACK  3\n        `,\n        `\n        @start\n            *then\n                >>BACK                  3\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.BACK, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.count, 3, `Failed to pass syntax:\\n${testString}`);\n\n                }\n            }\n        }\n    });\n\n    it(\">>PAUSE: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> PAUSE\n        `,\n        `\n        @start\n            *then\n                >> PAUSE\n        `,\n        `\n        @start\n            *then\n                >>PAUSE\n        `,\n        `\n        @start\n            *then\n>>PAUSE\n        `,\n        `\n        @start\n            *then\n>>          PAUSE\n        `,\n        `\n        @start\n            *then\n         >>          PAUSE\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.PAUSE, `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\">>END: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n>> END\n        `,\n        `\n        @start\n            *then\n                >> END\n        `,\n        `\n        @start\n            *then\n                >>END\n        `,\n        `\n        @start\n            *then\n>>END\n        `,\n        `\n        @start\n            *then\n>>          END\n        `,\n        `\n        @start\n            *then\n         >>          END\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.END, `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"bgm: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nbgm some.url.com\n        `,\n        `\n        @start\n            *then\n                bgm some.url.com\n        `,\n        `\n        @start\n            *then\nbgm          some.url.com\n        `,\n        `\n        @start\n            *then\n         bgm          some.url.com\n\n        `,\n        `\n        @start\n            *then\nbgm 'some.url.com'\n        `,\n        `\n        @start\n            *then\n                bgm 'some.url.com'\n        `,\n        `\n        @start\n            *then\nbgm          'some.url.com'\n        `,\n        `\n        @start\n            *then\n         bgm          'some.url.com'\n\n        `,\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.BGM, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.audioURL, 'some.url.com', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"clear: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nclear variable\n        `,\n        `\n        @start\n            *then\n                clear variable\n        `,\n        `\n        @start\n            *then\nclear          variable\n        `,\n        `\n        @start\n            *then\n         clear          variable\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.CLEAR, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"unflag: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nunflag variable\n        `,\n        `\n        @start\n            *then\n                unflag variable\n        `,\n        `\n        @start\n            *then\nunflag          variable\n        `,\n        `\n        @start\n            *then\n         unflag          variable\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.UNFLAG, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"flag: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nflag variable\n        `,\n        `\n        @start\n            *then\n                flag variable\n        `,\n        `\n        @start\n            *then\nflag          variable\n        `,\n        `\n        @start\n            *then\n         flag          variable\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.FLAG, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"slot as 'string': valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nslot variable as 'slottype'\n        `,\n        `\n        @start\n            *then\n                slot variable   as   'slottype'\n        `,\n        `\n        @start\n            *then\nslot          variable as 'slottype'\n        `,\n        `\n        @start\n            *then\n         slot          variable  as         'slottype'\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.SLOT, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableType, 'slottype', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"slot as variable: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nslot variable as othervar\n        `,\n        `\n        @start\n            *then\n                slot variable   as   othervar\n        `,\n        `\n        @start\n            *then\nslot          variable as othervar\n        `,\n        `\n        @start\n            *then\n         slot          variable  as         othervar\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.SLOT, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableType, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"set as 'string': valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nset variable as 'string'\n        `,\n        `\n        @start\n            *then\n                set variable   as   'string'\n        `,\n        `\n        @start\n            *then\nset          variable as 'string'\n        `,\n        `\n        @start\n            *then\n         set          variable  as         'string'\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.SET, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, 'string', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"set as number: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nset variable as 32\n        `,\n        `\n        @start\n            *then\n                set variable   as   32\n        `,\n        `\n        @start\n            *then\nset          variable as 32\n        `,\n        `\n        @start\n            *then\n         set          variable  as         32\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.SET, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '32', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"set as variable: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nset variable as othervar\n        `,\n        `\n        @start\n            *then\n                set variable   as   othervar\n        `,\n        `\n        @start\n            *then\nset          variable as othervar\n        `,\n        `\n        @start\n            *then\n         set          variable  as         othervar\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.SET, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"increase by number: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nincrease variable by 32\n        `,\n        `\n        @start\n            *then\n                increase variable   by   32\n        `,\n        `\n        @start\n            *then\nincrease          variable by 32\n        `,\n        `\n        @start\n            *then\n         increase          variable  by         32\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.INCREASE, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '32', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"increase by variable: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nincrease variable by othervar\n        `,\n        `\n        @start\n            *then\n                increase variable   by   othervar\n        `,\n        `\n        @start\n            *then\nincrease          variable by othervar\n        `,\n        `\n        @start\n            *then\n         increase          variable  by         othervar\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.INCREASE, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"decrease by number: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\ndecrease variable by 32\n        `,\n        `\n        @start\n            *then\n                decrease variable   by   32\n        `,\n        `\n        @start\n            *then\ndecrease          variable by 32\n        `,\n        `\n        @start\n            *then\n         decrease          variable  by         32\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.REDUCE, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '32', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"decrease by variable: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\ndecrease variable by othervar\n        `,\n        `\n        @start\n            *then\n                decrease variable   by   othervar\n        `,\n        `\n        @start\n            *then\ndecrease          variable by othervar\n        `,\n        `\n        @start\n            *then\n         decrease          variable  by         othervar\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.REDUCE, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"multiply by number: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nmultiply variable by 32\n        `,\n        `\n        @start\n            *then\n                multiply variable   by   32\n        `,\n        `\n        @start\n            *then\nmultiply          variable by 32\n        `,\n        `\n        @start\n            *then\n         multiply          variable  by         32\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.MULTIPLY, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '32', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"multiply by variable: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nmultiply variable by othervar\n        `,\n        `\n        @start\n            *then\n                multiply variable   by   othervar\n        `,\n        `\n        @start\n            *then\nmultiply          variable by othervar\n        `,\n        `\n        @start\n            *then\n         multiply          variable  by         othervar\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.MULTIPLY, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"divide by number: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\ndivide variable by 32\n        `,\n        `\n        @start\n            *then\n                divide variable   by   32\n        `,\n        `\n        @start\n            *then\ndivide          variable by 32\n        `,\n        `\n        @start\n            *then\n         divide          variable  by         32\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.DIVIDE, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '32', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"divide by variable: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\ndivide variable by othervar\n        `,\n        `\n        @start\n            *then\n                divide variable   by   othervar\n        `,\n        `\n        @start\n            *then\ndivide          variable by othervar\n        `,\n        `\n        @start\n            *then\n         divide          variable  by         othervar\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.DIVIDE, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"modulus by number: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nmod variable by 32\n        `,\n        `\n        @start\n            *then\n                mod variable   by   32\n        `,\n        `\n        @start\n            *then\nmod          variable by 32\n        `,\n        `\n        @start\n            *then\n         mod          variable  by         32\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.MODULUS, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '32', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"modulus by variable: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\nmod variable by othervar\n        `,\n        `\n        @start\n            *then\n                mod variable   by   othervar\n        `,\n        `\n        @start\n            *then\nmod          variable by othervar\n        `,\n        `\n        @start\n            *then\n         mod          variable  by         othervar\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.MODULUS, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableName, 'variable', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.variableValue, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"custom with variable parameter: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\ncustom param=othervar\n        `,\n        `\n        @start\n            *then\n                custom param   =   othervar\n        `,\n        `\n        @start\n            *then\ncustom          param = othervar\n        `,\n        `\n        @start\n            *then\n         custom          param  =         othervar\n\n        `,\n        `\n        @start\n            *then\ncustom param='{othervar}'\n        `,\n        `\n        @start\n            *then\n                custom param   =   '{othervar}'\n        `,\n        `\n        @start\n            *then\ncustom          param = '{othervar}'\n        `,\n        `\n        @start\n            *then\n         custom          param  =         '{othervar}'\n\n        `\n        ]\n\n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n\n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n\n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.CUSTOM, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.customName, 'custom', `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.param, '{othervar}', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n\n    it(\"custom without parameters: valid syntax variations\", async function () {\n        const testCases: string[] = [\n            `\n        @start\n            *then\n    custom\n        `,\n        `\n        @start\n            *then\n                custom\n        `,\n        `\n        @start\n            *then\n    custom  \n        `,\n        `\n        @start\n            *then\n         custom          \n    \n        `\n        ]\n    \n        for (let testString of testCases) {\n            const plugin = new defaultPlugin.DefaultFormatImportPlugin();\n    \n            const importResult = await plugin.importData([\n                    {\n                        id: \"start.abc\",\n                        text: testString\n                    }\n                ],\n                {ignoreSyntaxError: false}\n            );\n    \n            if (importResult.errors && importResult.errors.length > 0) {\n                assert.fail(`Failed to pass syntax:\\n${testString}\\nwith: ${JSON.stringify(importResult.errors,null,4)}`);\n            } else {\n                const startDirections = importResult.importedScenes[0].contents[0].sceneDirections;\n    \n                if (startDirections) {\n                    assert.equal(startDirections[0].directionType, InstructionType.CUSTOM, `Failed to pass syntax:\\n${testString}`);\n                    assert.equal(startDirections[0].parameters.customName, 'custom', `Failed to pass syntax:\\n${testString}`);\n                }\n            }\n        }\n    });\n});\n\ndescribe(\"ABC Format Import Plugin Commands Test\", function () {\n    it(\"Delete Node Command Base\", async function () {\n        const deleteNodeCommand = new defaultPlugin.DeleteNodeCommand({\n            sceneId: \"second scene\"\n        });\n        \n        const result = deleteNodeCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') == null);\n    });\n\n    it(\"New Node Command Base\", async function () {\n        const newNodeCommand = new defaultPlugin.NewNodeCommand({\n            sceneId: \"fourth scene\",\n            parentSceneId: \"third scene\"\n        });\n        \n        const result = newNodeCommand.apply(STANDARD_IMPORTED_STORY, {});\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@fourth scene') !== null);\n    });\n\n    it(\"Remove References to Node Command Base\", async function () {\n        const removeRefCommand = new defaultPlugin.RemoveReferencesToNodeCommand({\n            sceneId: \"third scene\",\n        });\n        \n        const result = removeRefCommand.apply(STANDARD_IMPORTED_STORY, {});\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('-> third scene') === null);\n\n    });\n\n    it(\"Rename Node Command Base\", async function () {\n        const renameCommand = new defaultPlugin.RenameNodeCommand({\n            sceneId: \"fourth scene\",\n            originalSceneId: \"third scene\"\n        });\n        \n        const result = renameCommand.apply(STANDARD_IMPORTED_STORY, {});\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') === null);\n        assert.ok(result.match('@fourth scene') !== null);\n    });\n\n    it(\"Update Command Base\", async function () {\n        const updateCommand = new defaultPlugin.UpdateCommand({\n            sceneId: \"third scene\"\n        });\n        \n        const result = updateCommand.apply(STANDARD_IMPORTED_STORY, {});\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n    });\n\n    it(\"Update Go To Command Base\", async function () {\n        const updateGotoCommand = new defaultPlugin.UpdateGotoCommand({\n            sceneId: \"second scene\",\n            originalGoto: \"third scene\",\n            goto: \"start\",\n            action: InstructionType.GO_TO\n        });\n        \n        const result = updateGotoCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('-> third scene') === null);\n        assert.ok(result.match('-> start') !== null);\n    });\n\n    it(\"Update Hear Command Base\", async function () {\n        const updateHearCommand = new defaultPlugin.UpdateHearCommand({\n            sceneId: \"second scene\",\n            originalHear: \"yes\",\n            hear: \"no\",\n            goto: \"start\",\n            action: InstructionType.GO_TO\n        });\n        \n        const result = updateHearCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('-> third scene') === null);\n        assert.ok(result.match('-> start') !== null);\n        assert.ok(result.match('hear no {') !== null);\n    });\n\n    it(\"Update Hear Command With Original Goto\", async function () {\n        const updateHearCommand = new defaultPlugin.UpdateHearCommand({\n            sceneId: \"second scene\",\n            originalHear: \"yes\",\n            originalGoto: \"third scene\",\n            hear: \"no\",\n            goto: \"start\",\n            action: InstructionType.GO_TO\n        });\n        \n        const result = updateHearCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('-> third scene') === null);\n        assert.ok(result.match('-> start') !== null);\n        assert.ok(result.match('hear no {') !== null);\n    });\n\n    // Negative test case, actually will add a new utterance because original goto does not match\n    it(\"Update Hear Command With Non Matching Original Goto\", async function () {\n        const updateHearCommand = new defaultPlugin.UpdateHearCommand({\n            sceneId: \"second scene\",\n            originalHear: \"yes\",\n            originalGoto: \"fourth scene\",\n            hear: \"no\",\n            goto: \"start\",\n            action: InstructionType.GO_TO\n        });\n        \n        const result = updateHearCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('-> third scene') !== null);\n        assert.ok(result.match('-> start') !== null);\n        assert.ok(result.match('hear no {') !== null);\n    });\n\n    // Only one of the hear's should update\n    it(\"Update Hear Command With Two Hears that are the Same but Different goto targets\", async function () {\n        const updateHearCommand = new defaultPlugin.UpdateHearCommand({\n            sceneId: \"fifth scene\",\n            originalHear: \"something\",\n            originalGoto: \"seventh scene\",\n            hear: \"updated something\",\n            goto: \"fourth scene\",\n            action: InstructionType.GO_TO\n        });\n        \n        const result = updateHearCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('-> sixth scene') !== null);\n        assert.ok(result.match('-> seventh scene') === null);\n        assert.ok(result.match('-> fourth scene') !== null);\n        assert.ok(result.match('hear something {') !== null);\n        assert.ok(result.match('hear updated something {') !== null);\n    });\n\n    it(\"Update Recap Command Base\", async function () {\n        const updateRecapCommand = new defaultPlugin.UpdateRecapCommand({\n            sceneId: \"second scene\"\n        });\n        updateRecapCommand.setRecap(\"this is a recap\");\n        const result = updateRecapCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('\\\\*recap') !== null);\n        assert.ok(result.match('this is a recap') !== null);\n    });\n\n    it(\"Update References Command Base\", async function () {\n        const updateReferencesCommand = new defaultPlugin.UpdateReferencesToNodeCommand({\n            sceneId: \"fourth scene\",\n            originalSceneId: \"third scene\"\n        });\n        const result = updateReferencesCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('-> third scene') === null);\n        assert.ok(result.match('-> fourth scene') !== null);\n    });\n\n    it(\"Update Reprompt Command Base\", async function () {\n        const updateRepromptCommand = new defaultPlugin.UpdateRepromptCommand({\n            sceneId: \"third scene\",\n        });\n        updateRepromptCommand.setReprompt(\"test reprompt\");\n        const result = updateRepromptCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('\\\\*reprompt') !== null);\n        assert.ok(result.match('test reprompt') !== null);\n    });\n\n    it(\"Update Reprompt Command Base\", async function () {\n        const updateSayCommand = new defaultPlugin.UpdateSayCommand({\n            sceneId: \"third scene\",\n        });\n        updateSayCommand.setSay(\"updated say\");\n        const result = updateSayCommand.apply(STANDARD_IMPORTED_STORY, {});\n\n        assert.ok(result.match('@start') !== null);\n        assert.ok(result.match('@second scene') !== null);\n        assert.ok(result.match('@third scene') !== null);\n        assert.ok(result.match('third say') === null);\n        assert.ok(result.match('updated say') !== null);\n    });\n});\n\nconst STANDARD_IMPORTED_STORY: string = `\n@start\n    *say\n        something\n    *then\n        hear yes {\n            -> second scene\n        }\n@second scene\n    *say\n        second say\n    *then\n        hear yes {\n            -> third scene\n        }\n\n@third scene\n    *say\n        third say\n\n@fifth scene\n    *say\n        fifth say\n    *then\n        hear something {\n            -> sixth scene\n        }\n        hear something {\n            -> seventh scene\n        }\n    `;"]}
{"version":3,"file":"storyBlockRange.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/importPlugins/storyBlockRange.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { StoryBlockRange } from '../../../importPlugins/storyBlockRange';\nimport { strict as assert } from 'assert';\n\ndescribe(\"StoryBlockRange\", function () {\n    it(\"constructor - good\", () => {\n        const range = new StoryBlockRange(1, 2, 3, 4);\n\n        assert.equal(range.start.row, 1, 'start row set');\n        assert.equal(range.start.column, 2, 'start column set');\n        assert.equal(range.end.row, 3, 'end row set');\n        assert.equal(range.end.column, 4, 'end column set');\n    });\n\n    it(\"constructor - endRow less than startRow\", () => {\n        try {\n            new StoryBlockRange(10, 2, 3, 4);\n            assert.ok(false, 'Should not reach here.')\n        } catch (e) {\n            assert.ok(e.message.indexOf('less than startRow') >= 0, 'endRow smaller than start row.');\n        }\n    });\n\n    it(\"constructor - endColumn less than startColumn on same row\", () => {\n        try {\n            new StoryBlockRange(10, 20, 10, 4);\n            assert.ok(false, 'Should not reach here.')\n        } catch (e) {\n            assert.ok(e.message.indexOf('less than startColumn') >= 0, 'endRow smaller than start row.');\n        }\n    });\n\n    it(\"intersectsWith - no intersection - before\", () => {\n        const range1 = new StoryBlockRange(10, 0, 15, 0);\n        const range2 = new StoryBlockRange(1, 0, 5, 0);\n\n        const result = range1.intersectsWith(range2);\n\n        assert.equal(result, false, 'Should not intersect');\n    });\n\n    it(\"intersectsWith - no intersection - after\", () => {\n        const range1 = new StoryBlockRange(10, 0, 15, 0);\n        const range2 = new StoryBlockRange(20, 0, 65, 45);\n\n        const result = range1.intersectsWith(range2);\n\n        assert.equal(result, false, 'Should not intersect');\n    });\n\n    it(\"intersectsWith - intersects self\", () => {\n        const range1 = new StoryBlockRange(10, 0, 15, 0);\n\n        const result = range1.intersectsWith(range1);\n\n        assert.equal(result, true, 'Should intersect');\n    });\n\n    it(\"intersectsWith - whole intersection\", () => {\n        const range1 = new StoryBlockRange(10, 0, 55, 0);\n        const range2 = new StoryBlockRange(20, 0, 40, 45);\n\n        const result1 = range1.intersectsWith(range2);\n\n        assert.equal(result1, true, 'Should intersect');\n\n        const result2 = range2.intersectsWith(range1);\n\n        assert.equal(result2, true, 'Should intersect');\n    });\n\n    it(\"intersectsWith - start share row but don't intersect\", () => {\n        const range1 = new StoryBlockRange(10, 15, 55, 16);\n        const range2 = new StoryBlockRange(5, 0, 10, 5);\n\n        const result1 = range1.intersectsWith(range2);\n\n        assert.equal(result1, false, 'Should not intersect');\n\n        const result2 = range2.intersectsWith(range1);\n\n        assert.equal(result2, false, 'Should not intersect');\n    });\n\n    it(\"intersectsWith - start share row and touch but don't intersect\", () => {\n        const range1 = new StoryBlockRange(10, 15, 55, 16);\n        const range2 = new StoryBlockRange(5, 0, 10, 15);\n\n        const result1 = range1.intersectsWith(range2);\n\n        assert.equal(result1, false, 'Should not intersect');\n\n        const result2 = range2.intersectsWith(range1);\n\n        assert.equal(result2, false, 'Should not intersect');\n    });\n\n    it(\"intersectsWith - start share row and columns intersect\", () => {\n        const range1 = new StoryBlockRange(10, 15, 55, 16);\n        const range2 = new StoryBlockRange(5, 0, 10, 16);\n\n        const result1 = range1.intersectsWith(range2);\n\n        assert.equal(result1, true, 'Should intersect');\n\n        const result2 = range2.intersectsWith(range1);\n\n        assert.equal(result2, true, 'Should intersect');\n    });\n\n    it(\"cropToRange large range\", () => {\n        const line = '01234567890123456789012345678901234567890123456789'\n\n        const range = new StoryBlockRange(10, 15, 55, 16);\n\n        const beforeLine = range.cropToRange(line, 0);\n        assert.equal(beforeLine, '', 'Should be empty.')\n\n        const afterLine = range.cropToRange(line, 100);\n        assert.equal(afterLine, '', 'Should be empty.')\n        \n        const middleLine = range.cropToRange(line, 20);\n        assert.equal(middleLine, line, 'Should be whole line.');\n\n        const firstLine = range.cropToRange(line, 10);\n        assert.equal(firstLine, '56789012345678901234567890123456789', 'Match rest of the line.')\n\n        const lastLine = range.cropToRange(line, 55);\n        assert.equal(lastLine, '0123456789012345', 'Match start of the line.')\n        \n    });\n\n    it(\"cropToRange 0 range\", () => {\n        const line = '01234567890123456789012345678901234567890123456789'\n\n        const range = new StoryBlockRange(55, 45, 55, 45);\n       \n        const firstLine = range.cropToRange(line, 55);\n        assert.equal(firstLine, '', 'Start / end column are same, should be empty.')\n    });\n\n    it(\"cropToRange one line range\", () => {\n        const line = 'abcdefghijklmnopqrstuvwxyz';\n\n        const range = new StoryBlockRange(55, 20, 55, 22);\n      \n        const firstLine = range.cropToRange(line, 55);\n        assert.equal(firstLine, 'uv', 'Small slice on line 55')\n    });\n});\n"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const storyFeatureEnumerator_1 = require("../../../importPlugins/storyFeatureEnumerator");
const storyFeatureFinder_spec_1 = require("./storyFeatureFinder.spec");
const storyFeatureFinder_1 = require("../../../importPlugins/storyFeatureFinder");
const assert_1 = require("assert");
const TestStory = `
    @empty

    @not empty
    *say
        Hello

    @has props
    *say
        Hello
    *then
        -> what
        * fake
            Say what
`;
describe("StoryFeatureEnumerator", function () {
    describe("SceneEnumerator", function () {
        it("Empty story", () => {
            const finder = new storyFeatureEnumerator_1.SceneEnumerator([]);
            const block = finder.getNext();
            assert_1.strict.equal(block, undefined, 'Should be undefined.');
        });
        it("One scene story", () => {
            const finder = new storyFeatureEnumerator_1.SceneEnumerator(storyFeatureFinder_spec_1.TestOneSceneStory.split('\n'));
            const scene1 = finder.getNext();
            assert_1.strict.ok(!!scene1, 'Should be defined.');
            assert_1.strict.equal(scene1.blockName, 'scene one');
            const end = finder.getNext();
            assert_1.strict.ok(!end, 'No more here.');
        });
        it("Two scene story", () => {
            const finder = new storyFeatureEnumerator_1.SceneEnumerator(storyFeatureFinder_spec_1.TestTwoSceneStory.split('\n'));
            const scene1 = finder.getNext();
            assert_1.strict.ok(!!scene1, 'Should be defined.');
            assert_1.strict.equal(scene1.blockName, 'scene one abc');
            const scene2 = finder.getNext();
            assert_1.strict.ok(!!scene2, 'Should be defined.');
            assert_1.strict.equal(scene2.blockName, 'scene two');
            const end = finder.getNext();
            assert_1.strict.ok(!end, 'No more here.');
        });
    });
    describe("ScenePropertyEnumerator", function () {
        it("Empty scene", () => {
            const finder = new storyFeatureEnumerator_1.SceneEnumerator(TestStory.split('\n'));
            const scene = finder.getNext();
            const propEnum = scene.getPropertyEnumerator();
            const prop = propEnum.getNext();
            assert_1.strict.equal(prop, undefined, 'Should be undefined.');
        });
        it("One say prop", () => {
            const finder = new storyFeatureFinder_1.StoryFeatureFinder(TestStory.split('\n'));
            const scene = finder.findScene('not empty');
            const propEnum = scene.getPropertyEnumerator('say');
            let prop = propEnum.getNext();
            assert_1.strict.ok(!!prop, 'Should be defined.');
            assert_1.strict.equal(prop.blockName, 'say', 'One say block');
            assert_1.strict.ok(prop.range.end.row === scene.range.end.row, 'Last row should match scene last');
            prop = propEnum.getNext();
            assert_1.strict.equal(prop, undefined, 'Should be undefined.');
        });
        it("Three props", () => {
            const finder = new storyFeatureFinder_1.StoryFeatureFinder(TestStory.split('\n'));
            const scene = finder.findScene('has props');
            const propEnum = scene.getPropertyEnumerator();
            let prop = propEnum.getNext();
            assert_1.strict.ok(!!prop, 'Should be defined.');
            assert_1.strict.equal(prop.blockName, 'say', 'say block');
            prop = propEnum.getNext();
            assert_1.strict.ok(!!prop, 'Should be defined.');
            assert_1.strict.equal(prop.blockName, 'then', 'then block');
            prop = propEnum.getNext();
            assert_1.strict.ok(!!prop, 'Should be defined.');
            assert_1.strict.equal(prop.blockName, 'fake', 'fake block');
            prop = propEnum.getNext();
            assert_1.strict.equal(prop, undefined, 'Should be undefined.');
        });
        it("Three props - only then", () => {
            const finder = new storyFeatureFinder_1.StoryFeatureFinder(TestStory.split('\n'));
            const scene = finder.findScene('has props');
            const propEnum = scene.getPropertyEnumerator('then');
            let prop = propEnum.getNext();
            assert_1.strict.ok(!!prop, 'Should be defined.');
            assert_1.strict.equal(prop.blockName, 'then', 'Should be then block');
            prop = propEnum.getNext();
            assert_1.strict.equal(prop, undefined, 'Should be undefined.');
        });
    });
});
//# sourceMappingURL=storyFeatureEnumerator.spec.js.map
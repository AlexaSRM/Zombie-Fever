{"version":3,"file":"storyFeatureEnumerator.spec.js","sourceRoot":"","sources":["../../../../test/unitTests/importPlugins/storyFeatureEnumerator.spec.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { SceneEnumerator, ScenePropertyEnumerator } from '../../../importPlugins/storyFeatureEnumerator';\nimport { TestOneSceneStory, TestTwoSceneStory, TestThreeSceneStory } from './storyFeatureFinder.spec';\nimport { StoryFeatureFinder } from '../../../importPlugins/storyFeatureFinder';\nimport { strict as assert } from 'assert';\n\nconst TestStory = `\n    @empty\n\n    @not empty\n    *say\n        Hello\n\n    @has props\n    *say\n        Hello\n    *then\n        -> what\n        * fake\n            Say what\n`;\n\ndescribe(\"StoryFeatureEnumerator\", function () {\n    describe(\"SceneEnumerator\", function () {\n        it(\"Empty story\", () => {\n            const finder = new SceneEnumerator([]);\n            const block = finder.getNext();\n\n            assert.equal(block, undefined, 'Should be undefined.');\n        });\n\n        it(\"One scene story\", () => {\n            const finder = new SceneEnumerator(TestOneSceneStory.split('\\n'));\n            const scene1 = finder.getNext();\n\n            assert.ok(!!scene1,'Should be defined.');\n            assert.equal(scene1!.blockName, 'scene one');\n\n            const end = finder.getNext();\n            assert.ok(!end, 'No more here.');\n        });\n\n        it(\"Two scene story\", () => {\n            const finder = new SceneEnumerator(TestTwoSceneStory.split('\\n'));\n\n            const scene1 = finder.getNext();\n            assert.ok(!!scene1,'Should be defined.');\n            assert.equal(scene1!.blockName, 'scene one abc');\n\n            const scene2 = finder.getNext();\n            assert.ok(!!scene2,'Should be defined.');\n            assert.equal(scene2!.blockName, 'scene two');\n\n            const end = finder.getNext();\n            assert.ok(!end, 'No more here.');\n        });\n    });\n\n    describe(\"ScenePropertyEnumerator\", function () {\n        \n        it(\"Empty scene\", () => {\n            const finder = new SceneEnumerator(TestStory.split('\\n'));\n            const scene = finder.getNext();\n\n            const propEnum = scene!.getPropertyEnumerator();\n\n            const prop = propEnum.getNext();\n\n            assert.equal(prop, undefined, 'Should be undefined.');\n        });\n\n        it(\"One say prop\", () => {\n            const finder = new StoryFeatureFinder(TestStory.split('\\n'));\n            const scene = finder.findScene('not empty');\n\n            const propEnum = scene!.getPropertyEnumerator('say');\n\n            let prop = propEnum.getNext();\n\n            assert.ok(!!prop, 'Should be defined.');\n            assert.equal(prop!.blockName, 'say', 'One say block');\n            assert.ok(prop!.range.end.row === scene!.range.end.row, 'Last row should match scene last');\n\n            prop = propEnum.getNext();\n\n            assert.equal(prop, undefined, 'Should be undefined.');\n        });\n\n        it(\"Three props\", () => {\n            const finder = new StoryFeatureFinder(TestStory.split('\\n'));\n            const scene = finder.findScene('has props');\n\n            const propEnum = scene!.getPropertyEnumerator();\n\n            let prop = propEnum.getNext();\n\n            assert.ok(!!prop, 'Should be defined.');\n            assert.equal(prop!.blockName, 'say', 'say block');\n\n            prop = propEnum.getNext();\n\n            assert.ok(!!prop, 'Should be defined.');\n            assert.equal(prop!.blockName, 'then', 'then block');\n\n            prop = propEnum.getNext();\n\n            assert.ok(!!prop, 'Should be defined.');\n            assert.equal(prop!.blockName, 'fake', 'fake block');\n\n            prop = propEnum.getNext();\n\n            assert.equal(prop, undefined, 'Should be undefined.');\n        });\n\n        it(\"Three props - only then\", () => {\n            const finder = new StoryFeatureFinder(TestStory.split('\\n'));\n            const scene = finder.findScene('has props');\n\n            const propEnum = scene!.getPropertyEnumerator('then');\n\n            let prop = propEnum.getNext();\n\n            assert.ok(!!prop, 'Should be defined.');\n            assert.equal(prop!.blockName, 'then', 'Should be then block');\n\n            prop = propEnum.getNext();\n\n            assert.equal(prop, undefined, 'Should be undefined.');\n        });\n    });\n});\n"]}
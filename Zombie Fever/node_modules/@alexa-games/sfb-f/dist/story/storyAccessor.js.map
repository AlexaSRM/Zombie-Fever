{"version":3,"file":"storyAccessor.js","sourceRoot":"","sources":["../../story/storyAccessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { StoryMetadata, Scene, Instruction, BuiltInScenes } from \"./storyMetadata\";\n\n/**\n * Accessor / Helper for StoryMetadata object.\n */\nexport class StoryAccessor {\n    protected story: {[key: string]: Scene};\n    protected sourceData: StoryMetadata;\n\n    constructor(story: StoryMetadata) {\n        this.sourceData = JSON.parse(JSON.stringify(story));\n\n        this.story = {};\n\n        let id2Page: {[key: string]: Scene} = {};\n\n        for (let scene of this.sourceData.scenes) {\n            id2Page[scene.id.toLowerCase()] = scene;\n        }\n\n        this.story = id2Page;\n    }\n\n    /**\n     * Get the scene object of the currently driving story givene the scene ID.\n     * @param sceneID scene ID\n     */\n    public getSceneByID(sceneID: string): Scene {\n        let adjustedSceneID: string = sceneID.trim().toLowerCase();\n\n        if (this.story[adjustedSceneID] || BuiltInScenes.PauseScene.toLowerCase() == adjustedSceneID ||\n            BuiltInScenes.ResumeScene.toLowerCase() == adjustedSceneID) {\n            return this.story[adjustedSceneID];\n        } else {\n            throw new Error(`Cannot find the scene ${adjustedSceneID}.`); \n        }\n    }\n\n    public getSceneNarration(sceneID: string): string {\n        let adjustedSceneID: string = sceneID.trim().toLowerCase();\n\n        if (this.story[adjustedSceneID] && this.story[adjustedSceneID].contents && this.story[adjustedSceneID].contents[0]) {\n            const narration = this.story[adjustedSceneID].contents[0].narration;\n            if (narration) {\n                return narration;\n            }\n        }\n\n        throw new Error(`Cannot find the scene ${adjustedSceneID}.`);\n    }\n\n    public getSceneInstructions(sceneID: string): Instruction[] {\n        let adjustedSceneID: string = sceneID.trim().toLowerCase();\n\n        if (this.story[adjustedSceneID] && this.story[adjustedSceneID].contents && this.story[adjustedSceneID].contents[0]) {\n            const instructions = this.story[adjustedSceneID].contents[0].sceneDirections;\n            if (instructions) {\n                return instructions;\n            }\n        }\n\n        throw new Error(`Cannot find the scene ${adjustedSceneID}.`);\n    }\n\n    /**\n     * Gets a list of Scenes within the current story.\n     */\n    public getAllScenes(): Scene[] {\n        let storyReference: {[key: string]: Scene} = JSON.parse(JSON.stringify(this.story));\n        let scenes: Scene[] = Object.keys(storyReference).map(function (value: string, index: number, array: string[]) {\n            return storyReference[value];\n        });\n\n        return scenes;\n    }\n\n    public async getStoryID(): Promise<string> {\n        return this.sourceData.storyID;\n    }\n\n    public async getStoryMetadata(): Promise<StoryMetadata> {\n        return JSON.parse(JSON.stringify(this.sourceData));\n    }\n}"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const storyMetadata_1 = require("./storyMetadata");
/**
 * Accessor / Helper for StoryMetadata object.
 */
class StoryAccessor {
    constructor(story) {
        this.sourceData = JSON.parse(JSON.stringify(story));
        this.story = {};
        let id2Page = {};
        for (let scene of this.sourceData.scenes) {
            id2Page[scene.id.toLowerCase()] = scene;
        }
        this.story = id2Page;
    }
    /**
     * Get the scene object of the currently driving story givene the scene ID.
     * @param sceneID scene ID
     */
    getSceneByID(sceneID) {
        let adjustedSceneID = sceneID.trim().toLowerCase();
        if (this.story[adjustedSceneID] || storyMetadata_1.BuiltInScenes.PauseScene.toLowerCase() == adjustedSceneID ||
            storyMetadata_1.BuiltInScenes.ResumeScene.toLowerCase() == adjustedSceneID) {
            return this.story[adjustedSceneID];
        }
        else {
            throw new Error(`Cannot find the scene ${adjustedSceneID}.`);
        }
    }
    getSceneNarration(sceneID) {
        let adjustedSceneID = sceneID.trim().toLowerCase();
        if (this.story[adjustedSceneID] && this.story[adjustedSceneID].contents && this.story[adjustedSceneID].contents[0]) {
            const narration = this.story[adjustedSceneID].contents[0].narration;
            if (narration) {
                return narration;
            }
        }
        throw new Error(`Cannot find the scene ${adjustedSceneID}.`);
    }
    getSceneInstructions(sceneID) {
        let adjustedSceneID = sceneID.trim().toLowerCase();
        if (this.story[adjustedSceneID] && this.story[adjustedSceneID].contents && this.story[adjustedSceneID].contents[0]) {
            const instructions = this.story[adjustedSceneID].contents[0].sceneDirections;
            if (instructions) {
                return instructions;
            }
        }
        throw new Error(`Cannot find the scene ${adjustedSceneID}.`);
    }
    /**
     * Gets a list of Scenes within the current story.
     */
    getAllScenes() {
        let storyReference = JSON.parse(JSON.stringify(this.story));
        let scenes = Object.keys(storyReference).map(function (value, index, array) {
            return storyReference[value];
        });
        return scenes;
    }
    async getStoryID() {
        return this.sourceData.storyID;
    }
    async getStoryMetadata() {
        return JSON.parse(JSON.stringify(this.sourceData));
    }
}
exports.StoryAccessor = StoryAccessor;
//# sourceMappingURL=storyAccessor.js.map
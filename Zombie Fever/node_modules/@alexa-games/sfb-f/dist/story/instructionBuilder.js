"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const storyMetadata_1 = require("../story/storyMetadata");
class InstructionBuilder {
    constructor() {
        this.instructions = [];
        this.nestingStack = [];
    }
    registerChoiceDirections(utterances, directions, narration, saveToHistory = true) {
        let parameters = {
            utterances: utterances,
            saveToHistory: String(saveToHistory),
            directions: directions
        };
        if (narration) {
            parameters.narration = narration;
        }
        this.instructions.push({
            directionType: storyMetadata_1.InstructionType.CHOICE,
            parameters: parameters
        });
        return this;
    }
    startChoice(utterances, narration, saveToHistory = true) {
        let parameters = {
            utterances: utterances,
            saveToHistory: String(saveToHistory)
        };
        if (narration) {
            parameters.narration = narration;
        }
        let direction = {
            directionType: storyMetadata_1.InstructionType.CHOICE,
            parameters: parameters
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        this.nestingStack.push(direction);
        return this;
    }
    registerCondition(conditionString, directions) {
        let parameters = {
            condition: conditionString,
            directions: directions
        };
        this.instructions.push({
            directionType: storyMetadata_1.InstructionType.CONDITION,
            parameters: parameters
        });
        return this;
    }
    startCondition(conditionString) {
        let parameters = {
            condition: conditionString,
        };
        let direction = {
            directionType: storyMetadata_1.InstructionType.CONDITION,
            parameters: parameters
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        this.nestingStack.push(direction);
        return this;
    }
    goTo(targetSceneID, targetSceneProperty) {
        let parameters = {
            target: targetSceneID,
        };
        if (targetSceneProperty) {
            parameters.targetSceneProperty = targetSceneProperty;
        }
        let direction = {
            directionType: storyMetadata_1.InstructionType.GO_TO,
            parameters: parameters
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    saveAndGoTo(targetSceneID, targetSceneProperty) {
        let parameters = {
            target: targetSceneID,
        };
        if (targetSceneProperty) {
            parameters.targetSceneProperty = targetSceneProperty;
        }
        let direction = {
            directionType: storyMetadata_1.InstructionType.SAVE_AND_GO,
            parameters: parameters
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    return() {
        let direction = {
            directionType: storyMetadata_1.InstructionType.RETURN,
            parameters: {}
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    pause() {
        let direction = {
            directionType: storyMetadata_1.InstructionType.PAUSE,
            parameters: {}
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    restart() {
        let direction = {
            directionType: storyMetadata_1.InstructionType.RESTART,
            parameters: {}
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    repeat() {
        let direction = {
            directionType: storyMetadata_1.InstructionType.REPEAT,
            parameters: {}
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    repeatReprompt() {
        let direction = {
            directionType: storyMetadata_1.InstructionType.REPEAT_REPROMPT,
            parameters: {}
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    goBack(backNumber) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.BACK,
            parameters: {
                count: backNumber
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    setReprompt(repromptSSML) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.REPROMPT,
            parameters: {
                message: repromptSSML,
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    setBackgroundMusic(audioURL, delayMs, volume, blendOption) {
        let param = {
            audioURL: audioURL
        };
        if (delayMs)
            param.delayMs = delayMs;
        if (volume)
            param.volume = volume;
        if (blendOption)
            param.blend = blendOption;
        let direction = {
            directionType: storyMetadata_1.InstructionType.BGM,
            parameters: param
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
    }
    setVisuals(visualOptions) {
        let params = {};
        Object.keys(visualOptions).forEach(function (key) {
            params[key] = visualOptions[key];
        });
        this.instructions.push({
            directionType: storyMetadata_1.InstructionType.VISUALS,
            parameters: params
        });
        return this;
    }
    increaseVariable(variableName, increaseBy) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.INCREASE,
            parameters: {
                variableName: variableName,
                variableValue: increaseBy
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    multiplyVariable(variableName, multiplyBy) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.MULTIPLY,
            parameters: {
                variableName: variableName,
                variableValue: multiplyBy
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    divideVariable(variableName, divideBy) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.DIVIDE,
            parameters: {
                variableName: variableName,
                variableValue: divideBy
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    modVariable(variableName, modBy) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.MODULUS,
            parameters: {
                variableName: variableName,
                variableValue: modBy
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    reduceVariable(variableName, reduceBy) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.REDUCE,
            parameters: {
                variableName: variableName,
                variableValue: reduceBy
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    setVariable(variableName, value) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.SET,
            parameters: {
                variableName: variableName,
                variableValue: value
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    setSlot(variableName, slotType) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.SLOT,
            parameters: {
                variableName: variableName,
                variableType: slotType
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    flag(variableName) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.FLAG,
            parameters: {
                variableName: variableName
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    unflag(variableName) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.UNFLAG,
            parameters: {
                variableName: variableName
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    clearVariable(variableName) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.CLEAR,
            parameters: {
                variableName: variableName
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    setRecap(message) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.RECAP,
            parameters: {
                message: message,
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    addToInventory(variableName, item) {
        let param = {
            variableName: variableName,
            itemName: item,
        };
        let direction = {
            directionType: storyMetadata_1.InstructionType.ADD_TO_INVENTORY,
            parameters: param
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    addItem(variableName, item, listSizeLimit) {
        let param = {
            variableName: variableName,
            itemName: item,
        };
        if (listSizeLimit) {
            param.size = String(listSizeLimit);
        }
        let direction = {
            directionType: storyMetadata_1.InstructionType.ADD_ITEM,
            parameters: param
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    removeItem(variableName, item) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.REMOVE_ITEM,
            parameters: {
                variableName: variableName,
                itemName: item
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    removeFirstItem(listName) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.REMOVE_FIRST,
            parameters: {
                variableName: listName
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    removeLastItem(listName) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.REMOVE_LAST,
            parameters: {
                variableName: listName
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    rollDice(diceString) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.ROLL,
            parameters: {
                diceString: diceString
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    markEnding() {
        let direction = {
            directionType: storyMetadata_1.InstructionType.END,
            parameters: {}
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    closeChoice() {
        if (this.nestingStack.length > 0) {
            this.nestingStack.splice(this.nestingStack.length - 1, 1);
        }
        return this;
    }
    closeCondition() {
        if (this.nestingStack.length > 0) {
            this.nestingStack.splice(this.nestingStack.length - 1, 1);
        }
        return this;
    }
    /**
     * @deprecated Use addInstruction() instead
     */
    addSceneDirection(direction) {
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(JSON.parse(JSON.stringify(direction)));
        }
        return this;
    }
    addInstruction(direction) {
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(JSON.parse(JSON.stringify(direction)));
        }
        return this;
    }
    customDirection(customDirectionName, customParameters = {}) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.CUSTOM,
            parameters: Object.assign({
                customName: customDirectionName
            }, customParameters)
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    getCurrentEpochTime() {
        let direction = {
            directionType: storyMetadata_1.InstructionType.GET_TIME,
            parameters: {}
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    setBookmark(bookmarkName, sceneName) {
        let direction = {
            directionType: storyMetadata_1.InstructionType.BOOKMARK,
            parameters: {
                variableName: bookmarkName,
                variableValue: sceneName
            }
        };
        if (this.nestingStack.length > 0) {
            if (!this.nestingStack[this.nestingStack.length - 1].parameters.directions) {
                this.nestingStack[this.nestingStack.length - 1].parameters.directions = [];
            }
            this.nestingStack[this.nestingStack.length - 1].parameters.directions.push(direction);
        }
        else {
            this.instructions.push(direction);
        }
        return this;
    }
    build() {
        return this.instructions;
    }
}
exports.InstructionBuilder = InstructionBuilder;
//# sourceMappingURL=instructionBuilder.js.map
{"version":3,"file":"languageModel.js","sourceRoot":"","sources":["../../bakeUtilities/languageModel.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Last Updated Aug-13-2019\n * As found in https://developer.amazon.com/docs/smapi/interaction-model-schema.html\n */\n\nexport interface VoiceModel {\n    languageModel: LanguageModel;\n}\n\nexport interface LanguageModel {\n    invocationName: string;\n    intents: LanguageModelIntent[];\n    types?: LanguageModelSlotType[];\n}\n\nexport interface LanguageModelIntent {\n    name: string;\n    slots?: LanguageModelSlot[];\n    samples?: string[];\n}\n\nexport interface LanguageModelSlot {\n    name: string;\n    type: string;\n    samples?: string[];\n}\n\nexport interface LanguageModelSlotType {\n    name: string;\n    values: LanguageModelValue[];\n}\n\nexport interface LanguageModelValue {\n    id?: string;\n    name: {\n        value: string;\n        synonyms?: string[];\n    };\n}\n\nexport class LanguageModelBuilder {\n    private model: VoiceModel;\n    constructor(invocationName: string) {\n        this.model = {\n            languageModel: {\n                intents: [],\n                invocationName: invocationName,\n            }\n        }\n    }\n\n    public build(): VoiceModel {\n        return this.model;\n    }\n\n    public addSlotSamplesToIntent(intentName: string, samples: string[], slots: LanguageModelSlot[]) {\n        if (this.intentExists(intentName)) {\n            for (let intentItem of this.model.languageModel.intents) {\n                if (intentItem.name === intentName) {\n                    const combinedSamples =  this.concatDedupe(samples, intentItem.samples || [], (a) => {\n                        return a;\n                    });\n\n                    const combinedSlots = this.concatDedupe(slots, intentItem.slots || [], (a) => {\n                        return a.name;\n                    });\n\n                    intentItem.samples = combinedSamples;\n                    intentItem.slots = combinedSlots;\n                    break;\n                }\n            }\n        } else {\n            this.addIntent({\n                name: intentName,\n                samples: samples,\n                slots: slots\n            });\n        }\n\n        return this;\n    }\n\n    public addIntent(intent: LanguageModelIntent): LanguageModelBuilder {\n        if (this.intentExists(intent.name)) {\n            for (let intentItem of this.model.languageModel.intents) {\n                if (intentItem.name === intent.name) {\n                    intentItem.samples = intent.samples;\n                    intentItem.slots = intent.slots;\n                    break;\n                }\n            }\n        } else {\n            this.model.languageModel.intents.push(intent);\n        }\n\n        return this;\n    }\n\n    public addSlotType(slotType: LanguageModelSlotType): LanguageModelBuilder {\n        if (!this.model.languageModel.types) {\n            this.model.languageModel.types = [];\n        }\n\n        if (this.slotTypeExists(slotType.name)) {\n            for (let typeItem of this.model.languageModel.types) {\n                if (typeItem.name === slotType.name) {\n                    typeItem.values = slotType.values;\n                    break;\n                }\n            }\n        } else {\n            this.model.languageModel.types.push(slotType);\n        }\n\n        return this;\n    }\n\n    public addSlotValues(slotTypeName: string, values: (string|LanguageModelValue)[]) {\n        if (!this.model.languageModel.types) {\n            this.model.languageModel.types = [];\n        }\n\n        const slotValues = [];\n\n        for (let valueItem of values) {\n            if (LanguageModelBuilder.isSlotValue(valueItem)){\n                slotValues.push(valueItem);\n            } else if (typeof(valueItem) === \"string\") {\n                slotValues.push(this.buildSlotValue(valueItem));\n            }\n        }\n\n        if (this.slotTypeExists(slotTypeName)) {\n            for (let typeItem of this.model.languageModel.types) {\n                if (typeItem.name === slotTypeName) {\n                    const combined =  this.concatDedupe(typeItem.values, slotValues, (a) => {\n                        return JSON.stringify(a);\n                    });\n\n                    typeItem.values = combined;\n                    break;\n                }\n            }\n        } else {\n            this.model.languageModel.types.push({\n                name: slotTypeName,\n                values: slotValues\n            });\n        }\n    }\n\n    public slotTypeExists(slotTypeName: string) {        \n        if (this.model.languageModel.types) {\n            for (let type of this.model.languageModel.types) {\n                if (type.name === slotTypeName) {\n                    return true;\n                }\n            }\n        } \n\n        return false;\n    }\n\n    public intentExists(intentName: string) {\n        for (let intent of this.model.languageModel.intents) {\n            if (intent.name === intentName) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public buildSlotValue(value: string): LanguageModelValue {\n        return {\n            name: {\n                value: value\n            }\n        }\n    }\n\n    private concatDedupe<T>(arr1: T[], arry2: T[], hash:(a:T) => string): T[] {\n        const result: {[key: string]: T} = {};\n\n        arr1.forEach((item) => {\n            const itemHash = hash(item);\n            result[itemHash] = item;\n        });\n\n        arry2.forEach((item) => {\n            const itemHash = hash(item);\n            result[itemHash] = item;\n        })\n\n        return Object.values(result);\n    }\n\n    /**\n     * Verifies if the object is an instance of interface [[LanguageModelValue]]\n     */\n    static isSlotValue(object: any): object is LanguageModelValue {\n        let isSlotValue = true;\n\n        const isObject = typeof(object) === \"object\";\n\n        isSlotValue = isSlotValue && isObject;\n\n        if (isObject) {\n            const hasID = \"id\" in object;\n            const hasName = \"name\" in object;\n\n            isSlotValue = isSlotValue && hasName;\n            if (hasID) {\n                isSlotValue = isSlotValue && typeof(object.id) === \"string\";\n            }\n\n            if (hasName) {\n                const isNameCorrect = typeof(object.name) === \"object\";\n                const isNameValueCorrect = isNameCorrect && \"value\" in object.name && typeof(object.name.value) === \"string\";\n                const hasSynonyms = isNameCorrect && \"synonyms\" in object.name;\n\n                isSlotValue = isSlotValue && isNameCorrect && isNameValueCorrect;\n\n                if (hasSynonyms) {\n                    const isNameSynonymsCorrect =  typeof(object.name.synonyms) === \"object\";\n                    \n                    isSlotValue = isSlotValue && isNameSynonymsCorrect;\n\n                    const hasNameSynonymsItem = isNameSynonymsCorrect && object.name.synonyms[0];\n                    if (hasNameSynonymsItem) {\n                        const isNameSynonymsItemCorrect = typeof(object.name.synonyms[0]) === \"string\";\n                        isSlotValue = isSlotValue && isNameSynonymsItemCorrect;\n                    }\n                }\n            }\n        }\n\n        return isSlotValue;\n    }\n}"]}
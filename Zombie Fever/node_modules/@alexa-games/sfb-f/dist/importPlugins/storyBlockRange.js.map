{"version":3,"file":"storyBlockRange.js","sourceRoot":"","sources":["../../importPlugins/storyBlockRange.ts"],"names":[],"mappings":";;AAaA,MAAa,eAAe;IAWxB,YAAY,QAAgB,EAAE,WAAmB,EAAE,MAAc,EAAE,SAAiB;QAChF,IAAI,QAAQ,KAAK,CAAC,IAAI,MAAM,GAAG,QAAQ,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,UAAU,MAAM,wBAAwB,QAAQ,GAAG,CAAC,CAAC;SACxE;QAED,IAAI,WAAW,GAAG,CAAC,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QAED,IAAI,SAAS,GAAG,CAAC,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACvD;QAED,IAAI,QAAQ,KAAK,MAAM,IAAI,SAAS,GAAG,WAAW,EAAE;YAChD,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;SACtE;QAED,IAAI,CAAC,KAAK,GAAG;YACT,GAAG,EAAE,QAAQ;YACb,MAAM,EAAE,WAAW;SACtB,CAAC;QACF,IAAI,CAAC,GAAG,GAAG;YACP,GAAG,EAAE,MAAM;YACX,MAAM,EAAE,SAAS;SACpB,CAAC;IACN,CAAC;IAEM,WAAW,CAAC,IAAY,EAAE,GAAW;QACxC,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;YAC5C,OAAO,EAAE,CAAC;SACb;QAED,IAAI,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;YAChD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAC7D;aAAM,IAAI,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;YAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC5C;aAAM,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;YAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAC7C;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,cAAc,CAAC,CAAkB;QACpC,OAAO,eAAe,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC;IAEO,MAAM,CAAC,eAAe,CAAC,CAAkB,EAAE,CAAkB;QACjE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE;YACpD,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG;YACzB,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE;YAChC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG;YACzB,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE;YAChC,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA3ED,0CA2EC","sourcesContent":["export interface StoryBlockPoint {\n    /**\n     * Index into an array of strings where 0 is the first row\n     */\n    row: number;\n\n    /**\n     * Index into a string. The first column is 0 and the last column is the length of the string.\n     * Think of the last column as pointing to an invisible CR character.\n     */\n    column: number;\n}\n\nexport class StoryBlockRange {\n    /**\n     * Starting point of the range, including the character at the specified column\n     */\n    public readonly start: StoryBlockPoint;\n\n    /**\n     * Ending point of the range, not including the character at the specified column.\n     */\n    public readonly end: StoryBlockPoint;\n\n    constructor(startRow: number, startColumn: number, endRow: number, endColumn: number) {\n        if (startRow !== 0 && endRow < startRow) {\n            throw new Error(`endRow(${endRow}) less than startRow(${startRow})`);\n        }\n\n        if (startColumn < 0) {\n            throw new Error(`startColumn cannot be less than 0.`);\n        }\n\n        if (endColumn < 0) {\n            throw new Error(`endColumn cannot be less than 0.`);\n        }\n\n        if (startRow === endRow && endColumn < startColumn) {\n            throw new Error('endColumn less than startColumn on a single row.')\n        }\n\n        this.start = { \n            row: startRow, \n            column: startColumn \n        };\n        this.end = { \n            row: endRow, \n            column: endColumn \n        };\n    }\n\n    public cropToRange(line: string, row: number): string {\n        if (row < this.start.row || row > this.end.row) {\n            return '';\n        }\n    \n        if (row === this.start.row && row === this.end.row) {\n            return line.substring(this.start.column, this.end.column);\n        } else if (row === this.start.row) {\n            return line.substring(this.start.column);\n        } else if (row === this.end.row) {\n            return line.substring(0, this.end.column);\n        }\n    \n        return line;\n    }\n\n    public intersectsWith(b: StoryBlockRange): boolean {\n        return StoryBlockRange.rangesIntersect(this, b);\n    }\n\n    private static rangesIntersect(a: StoryBlockRange, b: StoryBlockRange): boolean {\n        if (a.end.row < b.start.row || a.start.row > b.end.row) {\n            return false;\n        }\n    \n        if (a.end.row === b.start.row &&\n            a.end.column <= b.start.column) {\n            return false;\n        }\n    \n        if (b.end.row === a.start.row &&\n            b.end.column <= a.start.column) {\n            return false;\n        }\n    \n        return true;\n    }\n}\n"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class StoryBlockRange {
    constructor(startRow, startColumn, endRow, endColumn) {
        if (startRow !== 0 && endRow < startRow) {
            throw new Error(`endRow(${endRow}) less than startRow(${startRow})`);
        }
        if (startColumn < 0) {
            throw new Error(`startColumn cannot be less than 0.`);
        }
        if (endColumn < 0) {
            throw new Error(`endColumn cannot be less than 0.`);
        }
        if (startRow === endRow && endColumn < startColumn) {
            throw new Error('endColumn less than startColumn on a single row.');
        }
        this.start = {
            row: startRow,
            column: startColumn
        };
        this.end = {
            row: endRow,
            column: endColumn
        };
    }
    cropToRange(line, row) {
        if (row < this.start.row || row > this.end.row) {
            return '';
        }
        if (row === this.start.row && row === this.end.row) {
            return line.substring(this.start.column, this.end.column);
        }
        else if (row === this.start.row) {
            return line.substring(this.start.column);
        }
        else if (row === this.end.row) {
            return line.substring(0, this.end.column);
        }
        return line;
    }
    intersectsWith(b) {
        return StoryBlockRange.rangesIntersect(this, b);
    }
    static rangesIntersect(a, b) {
        if (a.end.row < b.start.row || a.start.row > b.end.row) {
            return false;
        }
        if (a.end.row === b.start.row &&
            a.end.column <= b.start.column) {
            return false;
        }
        if (b.end.row === a.start.row &&
            b.end.column <= a.start.column) {
            return false;
        }
        return true;
    }
}
exports.StoryBlockRange = StoryBlockRange;
//# sourceMappingURL=storyBlockRange.js.map
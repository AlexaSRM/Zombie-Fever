{"version":3,"file":"storyMetadataHelper.js","sourceRoot":"","sources":["../../importPlugins/storyMetadataHelper.ts"],"names":[],"mappings":";;AAAA,0DAAuD;AAGvD;;GAEG;AACH,MAAa,mBAAoB,SAAQ,6BAAa;IAClD,YAAY,KAAoB;QAC5B,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,MAAe;QAC/B,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QAE5D,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YACtC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;SAChC;IACL,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,OAAe,EAAE,SAAkB,EAAE,YAA4B,EAAE,mBAAyB;QACxG,MAAM,eAAe,GAAW,OAAO,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE7D,MAAM,WAAW,GAAU;YACvB,EAAE,EAAE,eAAe;YACnB,QAAQ,EAAE;gBACN;oBACI,SAAS,EAAE,SAAS;oBACpB,eAAe,EAAE,YAAY;iBAChC;aACJ;YACD,gBAAgB,EAAE,mBAAmB;SACxC,CAAA;QAED,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,WAAW,CAAC;QAC1C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACK,iBAAiB,CAAC,OAAe,EAAE,SAAiB;QACvD,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACzC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,qBAAqB,CAAC,OAAe,EAAE,YAA2B;QACrE,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACzC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,eAAe,GAAG,YAAY,CAAC;IACrD,CAAC;CAEJ;AArDD,kDAqDC","sourcesContent":["import { StoryAccessor } from \"../story/storyAccessor\";\nimport { Instruction, Scene, StoryMetadata } from '../story/storyMetadata';\n\n/**\n * Help access and navigate the StoryMetadata used by the Driver\n */\nexport class StoryMetadataHelper extends StoryAccessor {\n    constructor(story: StoryMetadata) {\n        super(story);\n    }\n\n    /**\n     * Set and replace all Scenes for the current import result.\n     */\n    public setAllScenes(scenes: Scene[]) {\n        this.sourceData.scenes = JSON.parse(JSON.stringify(scenes));\n\n        for (let scene of this.sourceData.scenes) {\n            this.story[scene.id] = scene;\n        }   \n    }\n\n    /**\n     * Set and replace a scene for the current import result.\n     */\n    public setScene(sceneID: string, narration?: string, instructions?: Instruction[], customSceneProperty?: any): void {\n        const adjustedSceneID: string = sceneID.trim().toLowerCase();\n\n        const addingScene: Scene = {\n            id: adjustedSceneID,\n            contents: [\n                {\n                    narration: narration,\n                    sceneDirections: instructions\n                }\n            ],\n            customProperties: customSceneProperty\n        }\n\n        this.story[adjustedSceneID] = addingScene;\n        this.sourceData.scenes.push(addingScene);\n   }\n\n   /**\n    * Set and replace the narration property of the given scene.\n    */\n    public setSceneNarration(sceneID: string, narration: string): void {\n        const scene = this.getSceneByID(sceneID);\n        scene.contents[0].narration = narration;\n    }\n\n    /**\n     * Set and replace instructions for the given scene.\n     */\n    public setSeceneInstructions(sceneID: string, instructions: Instruction[]): void {\n        const scene = this.getSceneByID(sceneID);\n        scene.contents[0].sceneDirections = instructions;\n    }\n    \n}"]}
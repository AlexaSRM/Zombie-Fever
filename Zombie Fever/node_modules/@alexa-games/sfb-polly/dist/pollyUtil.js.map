{"version":3,"file":"pollyUtil.js","sourceRoot":"","sources":["../pollyUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import {AudioFileAccessor} from './audioAccessor/audioFileAccessor';\nimport {AudioMixer, SequenceType, MixMode, TrimOption} from './audioMixer';\nimport {Polly, CognitoIdentityCredentials, SharedIniFileCredentials, config as AWSConfig} from 'aws-sdk';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst mp3Duration = require('mp3-duration');\n\nexport interface PollyRequestItem {\n    name: string;\n    text: string;\n    delayMs: number;\n    engine: string;\n    volume: string;\n    rate: string;\n    pitch: string;\n    speechMarkTypes?: [string];\n}\n\nexport enum PollyOutFormat {\n    MP3 = 'mp3',\n    JSON ='json'\n}\n\nexport interface PollyConfig {\n    dontUseCache?: boolean;\n    dontCombineIfAudioTagSeperatedBySpace?: boolean;\n    combineAudioTags?: boolean;\n    dontUploadToS3?: boolean;\n    awsProfileName?: string;\n    awsRegion?: string;\n    cognito?: {\n        identityPoolId: string;\n        loginWithAmazonAccessToken?: string;\n    }\n    [key: string]: any;\n}\n\nexport class PollyUtil {\n    private static pollyClient: Polly;\n    public static pollyConfig: PollyConfig;\n    \n    constructor(private audioAccessor: AudioFileAccessor, pollyClient?: Polly, awsRegion?: string) {\n        if (pollyClient) {\n            PollyUtil.pollyClient = pollyClient;\n        } else {\n            PollyUtil.pollyClient = new Polly({\n                region: awsRegion||\"us-east-1\",\n                signatureVersion: \"v4\"    \n            });\n        }\n    }\n\n    public static configurePolly(config: PollyConfig) {\n        PollyUtil.pollyConfig = config;\n\n        if(config.awsRegion) {\n            AWSConfig.region = config.awsRegion;\n        }\n\n        if (config.awsProfileName) {\n            const credentials = new SharedIniFileCredentials({profile: config.awsProfileName});\n            AWSConfig.credentials = credentials;\n        }\n\n        if (config.cognito) {        \n                const cognitoOptions: any = {\n                    \"IdentityPoolId\": config.cognito.identityPoolId\n                };\n\n                if (config.cognito.loginWithAmazonAccessToken) {\n                    cognitoOptions.Logins = {\n                        \"www.amazon.com\": config.cognito.loginWithAmazonAccessToken\n                    }\n                }\n\n                AWSConfig.credentials = new CognitoIdentityCredentials(cognitoOptions);\n        }\n    }\n\n    public synthesize(request: PollyRequestItem, workingDir: string, filename: string, outputFormat: PollyOutFormat = PollyOutFormat.MP3): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            let speechText = request.text.trim();\n\n            let contentExtract = /^<speak>([\\s\\S]*?)<\\/speak>$/.exec(speechText);\n            if (contentExtract != null) {\n                speechText = contentExtract[1];\n            }\n\n            const hasPitchChange = !!(request.pitch && request.pitch.length > 0 && request.pitch !== \"+0%\" && request.pitch !== \"-0%\");\n            const hasRateChange = !!(request.rate && request.rate.length > 0 && request.rate !== \"100%\");\n            const hasVolumeChange = !!(request.volume !== \"1.0\" && request.volume !== \"1\");\n\n            let prosodyOpenTag: string = \"\";\n            let prosodyCloseTag: string = \"\";\n\n            if (hasPitchChange || hasRateChange || hasVolumeChange) {\n                let prosodyOptions = \"\";\n                if (hasPitchChange) {\n                    prosodyOptions += `pitch='${request.pitch}'`;\n                }\n\n                if (hasRateChange) {\n                    prosodyOptions += ` rate='${request.rate}'`;\n                }\n\n                if (hasVolumeChange) {\n                    prosodyOptions += ` volume='${request.volume}'`;\n                }\n                \n                prosodyOpenTag += `<prosody ${prosodyOptions}>`;\n                prosodyCloseTag = `</prosody>`;\n            }\n\n            const params: Polly.SynthesizeSpeechInput = {\n                'Text': `<speak>${prosodyOpenTag}${speechText}${prosodyCloseTag}</speak>`,\n                'TextType': 'ssml', \n                'OutputFormat': outputFormat,\n                'VoiceId': request.name,\n                'SampleRate': '24000', \n            }\n\n            if (request.engine) {\n                params.Engine = request.engine;\n            }\n\n            if (request.speechMarkTypes) {\n                params.SpeechMarkTypes = request.speechMarkTypes;\n            }\n\n            PollyUtil.pollyClient.synthesizeSpeech(params, (err: any, data: any) => {\t\n                if (err) {\n                    // Adding a hook for catching Missing Credentails Error from cognito and say that it is because you are offline\n                    if(err.message && err.message.match(/Missing credentials in config/g)) {\n                        err.message = \"Voice Preview Error: Voice Preview will not work in offline mode. Please connect to an Internet connection or disable Voice Preview.\";\n                    } else {\n                        err.message = \"Voice Preview Error: '\" + err.message + \"' given voice '\" + request.name + \"' and text '\" + request.text + \"'\";\n                    }\n        \n                    return reject(err);\n                } else if (data) {\n                    if (data.AudioStream instanceof Buffer) {\n                        // If outputFormat is ssml, just return the metadata directly in our callback instead of saving to disk\n                        if(outputFormat === PollyOutFormat.JSON) {\n                            const speechMarksData = data.AudioStream.toString('utf-8');\n        \n                            try {\n                                const jsonSpeechMarksObj = JSON.parse(speechMarksData);\n                                return resolve(jsonSpeechMarksObj)\n                            } catch (err) {\n                                reject(err);\n                            }\n                        } else {\n                            const pollyFilename = path.join(workingDir, filename);\n    \n                            try {\n                                fs.writeFileSync(pollyFilename, data.AudioStream);\n                                resolve();\n                            } catch(err) {\n                                reject(err);\n                            }\n                        }\n                    }\n                }\n            })\n        });\n    }\n\n    public async estimateSSMLDuration(ssml: string, workingDir: string): Promise<number> {\n        const audioTagRegex = /<audio[ \\t]+?src=['\"']([ \\S]*?)['\"][ \\t]*?\\/[ \\t]*?>/g;\n\n        let match = audioTagRegex.exec(ssml);\n        let duration = 0;\n\n        while (match !== null) {\n            const url = match[1];\n            const fileName = path.basename(url);\n            const filePath = path.resolve(workingDir, fileName);\n\n            if (!fs.existsSync(filePath)) {\n                await this.audioAccessor.downloadAudio(url, workingDir);\n            }\n\n            duration += await this.calculateMP3Duration(filePath);\n\n            match = audioTagRegex.exec(ssml);\n        }\n\n        duration += await this.estimateNonAudioTagDuration(ssml, workingDir);\n    \n        return duration;\n    }\n\n    public calculateMP3Duration(filePath: string): Promise<number> {\n        return new Promise<number> ((resolve, reject) => {\n            mp3Duration(filePath, function (err: any, durationForThisFile: any): any {\n                if (err) {\n                    return reject(err);\n                }\n\n                const durationInMs = durationForThisFile * 1000.0; // convert to milliseconds\n\n                return resolve(durationInMs);\n            });\n        });\n    }\n\n    private async estimateNonAudioTagDuration(ssml: string, workingDir: string): Promise<number> {\n        let duration = 0;\n        const audioTagRegex = /<audio[ \\t]+?src=['\"'][ \\S]*?['\"][ \\t]*?\\/[ \\t]*?>/g;\n\n        let nonAudioOnlyText = ssml.replace(audioTagRegex, \" \");\n    \n         // In tests, the Joanna voice takes the same time to read text as Alexa's natural voice does\n        const defaultVoice = 'Joanna';\n\n        // Add a <mark name='the_end'/> tag to the end of the request\n        nonAudioOnlyText = nonAudioOnlyText.trim();\n\n        if(nonAudioOnlyText && nonAudioOnlyText.length > 0) {\n            nonAudioOnlyText += \"<mark name='the_end'/>\";\n\n            const pollyConfig: PollyRequestItem  = {\n                name: defaultVoice,\n                text: nonAudioOnlyText,\n                delayMs: 0,\n                engine: \"standard\",\n                speechMarkTypes: [\"ssml\"],\n                pitch: \"+0%\",\n                rate: \"100%\",\n                volume: \"1.0\"\n            };\n\n            const speechMarks = await this.synthesize(pollyConfig, workingDir, \"\", PollyOutFormat.JSON);\n            if(speechMarks && speechMarks.time) {\n                duration = speechMarks.time;\n            }\n        }\n    \n        return duration;\n    }\n}"]}
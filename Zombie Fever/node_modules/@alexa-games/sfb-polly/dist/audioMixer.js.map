{"version":3,"file":"audioMixer.js","sourceRoot":"","sources":["../audioMixer.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\nimport { execSync } from 'child_process';\n\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nimport { AudioFileAccessor } from './audioAccessor/audioFileAccessor';\nimport { PollyRequestItem, PollyUtil } from './pollyUtil';\n\nexport interface AudioSequence {\n\tsequenceType: SequenceType;\n\tfilename: string;\n\turl: string;\n\tdelayMs: number;\n\tvolume: number;\n\tfadeOutTime: number;\n\tfadeOutDuration: number;\n\tfadeInDuration: number;\n}\n\nexport interface AudioMixSetting {\n\ttrim: TrimOption;\n\tmode: MixMode\n}\n\nexport enum SequenceType {\n    MUSIC = 'MUSIC',\n\tSFX = 'SFX'\n}\n\n/**\n * Trim option for mixing down the sequence of audio\n */\nexport enum TrimOption {\n    /**\n     * mix down the audio to the longest audio in the sequence\n     */\n    LONGEST = 'longest',\n    /**\n     * mix down the audio to the length of the first audio in the sequence\n     */\n    FIRST = 'first'\n}\n\nexport enum MixMode {\n\tCONCATENATE = 'concat',\n\tLAYER = 'layer'\n}\n\n/**\n * Builder for mixing multiple audio files using the FFMPEG binary\n */\nexport class AudioMixer {\n\tprivate audioSequence: AudioSequence[] = [];\n\n    constructor(private ffmpegPath: string, private audioWorkingDir: string, private audioAccessor: AudioFileAccessor) {}\n\n\t/**\n\t * add audio item to the sequence to mix\n\t * @param audio \n\t */\n    public addAudio(audio: AudioSequence) {\n\t\tthis.audioSequence.push(audio);\n\t}\n\n\t/**\n\t * add polly item in the audio sequence\n\t * @param polly \n\t * @returns resulting audio file path in disc.\n\t */\n\tpublic async addPollyItem(request: PollyRequestItem): Promise<string> {\n\t\tconst pollyKeyString: string = JSON.stringify(request);\n\t\tconst pollyFileName: string = `polly${createHash('md5').update(pollyKeyString).digest('hex')}.mp3`;\n\n\t\ttry {\n\t\t\tconst exists = !PollyUtil.pollyConfig.dontUseCache && await this.audioAccessor.exists(pollyFileName);\n\n\t\t\tif (!exists && !fs.existsSync(path.resolve(this.audioWorkingDir, pollyFileName))) {\n\t\t\t\tconsole.info(`[INFO] Calling AWS Polly with request=${JSON.stringify(request, null, 4)}`);\n\t\t\t\tconst pollyUtil = new PollyUtil(this.audioAccessor);\n\t\n\t\t\t\tawait pollyUtil.synthesize(request, this.audioWorkingDir, pollyFileName);\n\t\t\t}\n\t\n\t\t\tconst pollyUrl = await this.audioAccessor.getAudioURL(pollyFileName);\n\t\n\t\t\tthis.audioSequence.push({\n\t\t\t\tsequenceType: SequenceType.SFX,\n\t\t\t\tfilename: pollyFileName,\n\t\t\t\turl: pollyUrl,\n\t\t\t\tdelayMs: request.delayMs,\n\t\t\t\tfadeInDuration: 0,\n\t\t\t\tfadeOutDuration: 0,\n\t\t\t\tfadeOutTime: 0,\n\t\t\t\tvolume: 1.0 // Use Polly Volume to adjust your voice volume before mixing, will be better this way\n\t\t\t});\n\n\t\t\treturn path.resolve(this.audioWorkingDir, pollyFileName);\n\t\t} catch (err) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * Mix down the audio using FFMPEG binary with the generated file name, and return the URL of the resulting audio.\n\t * @param setting audio mix setting\n\t * @returns resulting audio file path in disc\n\t */\n\tpublic async mix(setting: AudioMixSetting): Promise<string> {\n\t\tif (this.audioSequence.length === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (this.audioSequence.length === 1) {\n\t\t\tconst item = this.audioSequence[0];\n\t\t\tif (!this.isAudioModified(item)) {\n\t\t\t\treturn path.resolve(this.audioWorkingDir, item.filename);\n\t\t\t}\n\t\t}\n\t\t\n\t\tconst sequenceString = this.audioSequence\n\t\t\t.map((audio) => JSON.stringify(audio))\n\t\t\t.reduce((prev: string, curr: string, i: number, arr: string[]): string => {\n\t\t\t\tif (prev) {\n\t\t\t\t\treturn `${prev} ${curr}`;\n\t\t\t\t} else {\n\t\t\t\t\treturn curr;\n\t\t\t\t}\n\t\t\t});\n\t\t\n\t\tconst checksum = createHash('md5').update(sequenceString + JSON.stringify(setting)).digest('hex');\n        const generatedFilename = `${checksum}.mp3`;\n\t\tconst mixedAudioPath = path.resolve(this.audioWorkingDir, generatedFilename);\n\n\t\tconst audioExistsInCache = !PollyUtil.pollyConfig.dontUseCache && await this.audioAccessor.exists(generatedFilename);\n\t\tconst audioExistsInDisc = fs.existsSync(mixedAudioPath);\n\n\t\tif (!audioExistsInCache) {\n\t\t\tawait this.downloadSequenceItems(this.audioSequence);\n\t\t\tconst command = this.getFFMPEGCommand(this.audioSequence, generatedFilename, setting);\n\t\t\ttry {\n\t\t\t\tif (!audioExistsInDisc) {\n\t\t\t\t\tconsole.info(`Processing audio with FFMPEG: ${command}`);\n\t\t\t\t\tconst execStart = new Date().getTime();\n\t\t\t\t\texecSync(command);\n\t\t\t\t\tconst execDuration = new Date().getTime() - execStart;\n\t\t\t\t\tconsole.debug(`ffmpeg process finished in ${execDuration} ms.`);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.info(`Skipping ffmpeg to generate '${generatedFilename}' since it exists in disc already. `);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\n\t\treturn mixedAudioPath;\n\t}\n\t\n\tprivate isAudioModified(item: AudioSequence) {\n\t\treturn !((!item.delayMs || item.delayMs === 0) && (!item.fadeInDuration || item.fadeInDuration === 0) \n\t\t\t&& (!item.fadeOutDuration || item.fadeOutDuration === 0) && (!item.fadeOutTime || item.fadeOutTime === 0) && (!item.volume || item.volume === 1.0));\n\t}\n\n\t/**\n\t * Check if the audio files in the sequence are available locally, then download the ones that are not available.\n\t */\n\tprivate async downloadSequenceItems(sequence: AudioSequence[]): Promise<void> {\n\t\tconst downloadTasks: Promise<void>[] = [];\n\n\t\tfor (let audio of sequence) {\n\t\t\tdownloadTasks.push(this.checkAndDownloadAudio(audio));\n\t\t}\n\n\t\tawait Promise.all(downloadTasks);\n\t}\n\n\t/**\n\t * Check if the given audio file exists locally, if not download that file.\n\t */\n\tprivate async checkAndDownloadAudio(audio: AudioSequence): Promise<void> {\n\t\tconst filePath = path.resolve(this.audioWorkingDir, audio.filename);\n\n\t\tconst existsLocally = fs.existsSync(filePath);\n\t\t\n\t\tif (!existsLocally) {\n\t\t\tconsole.info(`[INFO] Downloading '${audio.url}' for mixing.`);\n\n\t\t\tawait this.audioAccessor.downloadAudio(audio.url, this.audioWorkingDir);\n\t\t} else {\n\t\t\tconsole.info(`[INFO] Skip downloading ${audio.url}. Available locally already.`);\n\t\t}\n\t}\n\n\t/**\n\t * Generate a FFMPEG command string with option flags and values given the audio sequence and setting\n\t */\n\tprivate getFFMPEGCommand(audioSequence: AudioSequence[], outputName: string, setting: AudioMixSetting): string {\n\t\tconst postMixFilepath = path.join(this.audioWorkingDir, outputName);\n\n\t\tif (setting.mode === MixMode.LAYER) {\n\t\t\tlet inputFiles = \"\";\n\t\t\tlet streamProcessingList = \"\";\n\t\t\tlet streamList = \"\";\n\t\n\t\t\tfor (let i = 0; i < audioSequence.length; i++) {\n\t\t\t\tconst sequence = audioSequence[i];\n\t\t\t\t\n\t\t\t\tinputFiles += ` -i \"${path.join(this.audioWorkingDir, sequence.filename)}\" `;\n\t\n\t\t\t\t// Use adelay filter to add a delay to the start of various sounds\n\t\t\t\t// List this  [1:a] adelay=2500|2500 [delayed];  // 2500 listed for each audio channel\n\t\t\t\tconst volumeFilter = (sequence.volume != 1.0) ? \"volume=volume=\" + sequence.volume : \"\";\n\t\t\t\tconst fadeInFilter = (sequence.fadeInDuration) ? \"afade=t=in:start_time=0:d=\" + sequence.fadeInDuration: \"\";\n\t\t\t\tconst fadeOutFilter = (sequence.fadeOutTime && sequence.fadeOutDuration) ? \"afade=t=out:start_time=\" + sequence.fadeOutTime + \":d=\" + sequence.fadeOutDuration + \",atrim=duration=\" + (sequence.fadeOutTime + sequence.fadeOutDuration): \"\";\n\t\t\t\tconst adelayFilter = (sequence.delayMs) ? \"adelay=\" + sequence.delayMs + \"|\" + sequence.delayMs : \"\";\n\t\n\t\t\t\tlet filtersString = \"\";\n\t\t\t\tif(fadeInFilter) {\n\t\t\t\t\tfiltersString += fadeInFilter;\n\t\t\t\t}\n\t\n\t\t\t\tif(fadeOutFilter) {\n\t\t\t\t\tif(filtersString) {\n\t\t\t\t\t\tfiltersString += \",\";\n\t\t\t\t\t}\n\t\t\t\t\tfiltersString += fadeOutFilter;\n\t\t\t\t}\n\t\n\t\t\t\tif(adelayFilter) {\n\t\t\t\t\tif(filtersString) {\n\t\t\t\t\t\tfiltersString += \",\";\n\t\t\t\t\t}\n\t\t\t\t\tfiltersString += adelayFilter;\n\t\t\t\t}\n\t\n\t\t\t\tif(volumeFilter) {\n\t\t\t\t\tif(filtersString) {\n\t\t\t\t\t\tfiltersString += \",\";\n\t\t\t\t\t}\n\t\t\t\t\tfiltersString += volumeFilter;\n\t\t\t\t}\n\t\n\t\t\t\tif (filtersString.trim().length > 0) {\n\t\t\t\t\tstreamProcessingList += `[${i}:0] ${filtersString}[in${i}]; `; \n\t\t\t\t\tstreamList += `[in${i}]`;\n\t\t\t\t} else {\n\t\t\t\t\tstreamList += `[${i}:0]`;\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tconst trimCommand = setting.trim? setting.trim : TrimOption.LONGEST;\n\t\n\t\t\tconst ffmpegOptions = ` -filter_complex \"${streamProcessingList} ${streamList} amix=inputs=${this.audioSequence.length}:duration=${trimCommand}:dropout_transition=0[out];[out]volume=${this.audioSequence.length}\" -t 240 -ac 1 -c:a libmp3lame -b:a 48k -ar 24000 -write_xing 0 \"${postMixFilepath}\" -loglevel fatal`;\n\t\t\tconst ffmpegCommand = `\"${this.ffmpegPath}\" -y ${inputFiles} ${ffmpegOptions}`;\n\t\n\t\t\treturn ffmpegCommand;\n\t\t} else {\n\t\t\tlet inputFiles = \"\";\n\t\t\tlet delayFilter = \"\";\n\t\t\tlet concatenatingStreams = \"\";\n\t\n\t\t\tfor (let i = 0; i < audioSequence.length; i++) {\n\t\t\t\tconst sequence = audioSequence[i];\n\t\t\t\tconst inputStream = `[${i}:0]`;\n\t\t\t\tconst delayedStream = `[d${i}]`;\n\n\t\t\t\tinputFiles += ` -i \"${path.join(this.audioWorkingDir, sequence.filename)}\" `;\n\n\t\t\t\t/*if (i > 0) {\n\t\t\t\t\t// add 400ms between concatenating audio\n\t\t\t\t\tdelayFilter += `${inputStream}adelay=400|400${delayedStream};`;\n\t\t\t\t\tconcatenatingStreams += delayedStream;\n\t\t\t\t} else {*/\n\t\t\t\t\tconcatenatingStreams += inputStream;\n\t\t\t\t//}\n\t\t\t};\n\n\t\t\tconst concatCommand = `\"${this.ffmpegPath}\" -y ${inputFiles} -filter_complex \"${delayFilter}${concatenatingStreams} concat=n=${audioSequence.length}:v=0:a=1\" -t 240 -ac 1 -c:a libmp3lame -b:a 48k -ar 24000 -write_xing 0 \"${postMixFilepath}\" -loglevel fatal`;\n\n\t\t\treturn concatCommand;\n\t\t}\n\t}\n}"]}
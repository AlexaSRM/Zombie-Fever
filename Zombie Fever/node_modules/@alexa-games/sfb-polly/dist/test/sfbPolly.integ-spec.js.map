{"version":3,"file":"sfbPolly.integ-spec.js","sourceRoot":"","sources":["../../test/sfbPolly.integ-spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {PollyRequestItem, PollyOutFormat, PollyUtil} from './../pollyUtil';\nimport {S3AudioAccessor} from './../audioAccessor/s3AudioAccessor';\nimport {AudioFileAccessor} from './../audioAccessor/audioFileAccessor';\nimport {S3, Polly, SharedIniFileCredentials, config} from 'aws-sdk';\nimport { strict as assert } from 'assert';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe(\"Polly utility integration test\", function () {\n    before(async () => {\n        const workingDir = path.resolve(\".\", \".out\");\n        if (!fs.existsSync(workingDir)) {\n            fs.mkdirSync(workingDir);\n        }\n    });\n\n    it(\"synthesize polly and download file with AWS Profile Name.\", async function () {\n        PollyUtil.configurePolly({\n            awsProfileName: \"default\",\n            awsRegion: \"us-east-1\"\n        });\n\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const util = new PollyUtil(audioFileAccessor);\n\n        await util.synthesize({\n            delayMs: 0,\n            engine: \"standard\",\n            name: \"Joanna\",\n            pitch: \"+0%\",\n            rate: \"100%\",\n            text: \"<speak>hello this is a test synthesize.</speak>\",\n            volume: \"1.0\"\n        }, outDir, testFileName);\n\n        const resultPath = path.resolve(outDir, testFileName);\n        assert.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);\n    });\n\n    it(\"synthesize polly and download file with Cognito.\", async function () {\n        PollyUtil.configurePolly({\n            awsProfileName: \"invalid_profile_name_for_testing\",\n            awsRegion: \"us-east-1\",\n            cognito: {\n                identityPoolId: \"us-east-1:11cce95b-36e9-4d5e-8e95-db76d27d1ab0\"\n            }\n        });\n\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const util = new PollyUtil(audioFileAccessor);\n\n        await util.synthesize({\n            delayMs: 0,\n            engine: \"standard\",\n            name: \"Joanna\",\n            pitch: \"+0%\",\n            rate: \"100%\",\n            text: \"<speak>hello this is a test synthesize.</speak>\",\n            volume: \"1.0\"\n        }, outDir, testFileName);\n\n        const resultPath = path.resolve(outDir, testFileName);\n        assert.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);\n    });\n\n    it(\"synthesize polly and download file with pitch & rate change.\", async function () {\n        PollyUtil.configurePolly({\n            awsProfileName: \"invalid_profile_name_for_testing\",\n            awsRegion: \"us-east-1\",\n            cognito: {\n                identityPoolId: \"us-east-1:11cce95b-36e9-4d5e-8e95-db76d27d1ab0\"\n            }\n        });\n\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test_pitched.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const util = new PollyUtil(audioFileAccessor);\n\n        await util.synthesize({\n            delayMs: 0,\n            engine: \"standard\",\n            name: \"Joanna\",\n            pitch: \"+10%\",\n            rate: \"120%\",\n            text: \"<speak>hello this is a test synthesize.</speak>\",\n            volume: \"1.0\"\n        }, outDir, testFileName);\n\n        const resultPath = path.resolve(outDir, testFileName);\n        assert.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);\n    });\n\n    it(\"synthesize without <speak> tag.\", async function () {\n        PollyUtil.configurePolly({\n            awsProfileName: \"invalid_profile_name_for_testing\",\n            awsRegion: \"us-east-1\",\n            cognito: {\n                identityPoolId: \"us-east-1:11cce95b-36e9-4d5e-8e95-db76d27d1ab0\"\n            }\n        });\n\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_no_speak.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const util = new PollyUtil(audioFileAccessor);\n\n        await util.synthesize({\n            delayMs: 0,\n            engine: \"standard\",\n            name: \"Joanna\",\n            pitch: \"+0%\",\n            rate: \"100%\",\n            text: \"hello this is a test synthesize.\",\n            volume: \"-6dB\"\n        }, outDir, testFileName);\n\n        const resultPath = path.resolve(outDir, testFileName);\n        assert.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);\n    });\n\n    it(\"estimate non audio tag duration.\", async function () {\n        PollyUtil.configurePolly({\n            awsRegion: \"us-east-1\",\n            awsProfileName: \"default\"\n        });\n\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const util = new PollyUtil(audioFileAccessor);\n\n        await util.estimateSSMLDuration(\"This is my SSML text here. <audio src='https://s3.amazonaws.com/alexa-ml/sounds/sound-library-loud/Instruments/Trumpet_1.mp3' /> Yay!\", outDir);\n    });\n\n    it(\"estimate non audio tag duration invalid ssml request.\", async function () {\n        PollyUtil.configurePolly({\n            awsRegion: \"us-east-1\",\n            awsProfileName: \"default\"\n        });\n\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const util = new PollyUtil(audioFileAccessor);\n\n        try {\n            await util.estimateSSMLDuration(\"<spebroken>This is my SSML text here. <audio src='https://s3.amazonaws.com/alexa-ml/sounds/sound-library-loud/Instruments/Trumpet_1.mp3' /> Yay!\", outDir);\n        } catch(err) {\n            assertIncludes(err.message, \"Invalid SSML request\");\n        }\n    });\n\n    function assertIncludes(line : string, includes : string) {\n        assert.ok(line.includes(includes), \"Line: \" + line + \" must include \" + includes);\n    }\n\n});"]}
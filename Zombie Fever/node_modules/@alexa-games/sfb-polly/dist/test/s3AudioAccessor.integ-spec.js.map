{"version":3,"file":"s3AudioAccessor.integ-spec.js","sourceRoot":"","sources":["../../test/s3AudioAccessor.integ-spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {PollyRequestItem, PollyOutFormat, PollyUtil} from './../pollyUtil';\nimport {S3AudioAccessor, s3FileStatusStaticCache, S3FileStatus} from './../audioAccessor/s3AudioAccessor';\nimport {AudioFileAccessor} from './../audioAccessor/audioFileAccessor';\nimport {S3, Polly, SharedIniFileCredentials, config} from 'aws-sdk';\nimport { strict as assert } from 'assert';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe(\"S3 Audio Accessor integration test\", function () {\n    before(async () => {\n        const workingDir = path.resolve(\".\", \".out\");\n        if (!fs.existsSync(workingDir)) {\n            fs.mkdirSync(workingDir);\n        }\n    });\n\n    it(\"test custom s3 client.\", async function () {\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir,\n            s3Client: new S3()\n        });\n\n        assert.ok(audioFileAccessor);\n    });\n\n    it(\"test upload audio.\", async function () {\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const output = await audioFileAccessor.uploadAudio(testFileName, outDir);\n        assert.equal(output, \"https://s3.amazonaws.com/alexa-ml/tempPolly/pollyCache/\" + testFileName);\n\n        // Make sure it is in the s3 file status cache\n        assert(s3FileStatusStaticCache[`alexa-ml/tempPolly:${S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === S3FileStatus.Exists);        \n    });\n\n    it(\"test upload audio invalid filename.\", async function () {\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test_invalid.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        try {\n            const output = await audioFileAccessor.uploadAudio(testFileName, outDir)\n        } catch (err) {\n            assertIncludes(err, \"\");            \n\n            // Make sure not in the S3 file status cache on error\n            assert(!s3FileStatusStaticCache[`alexa-ml/tempPolly:${S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`]);\n        }\n    });\n\n    it(\"test download audio.\", async function () {\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        await audioFileAccessor.downloadAudio('https://s3.amazonaws.com/alexa-ml/sounds/sound-library-loud/Instruments/Trumpet_1.mp3', outDir);\n        const resultPath = path.resolve(outDir, \"Trumpet_1.mp3\");\n        assert.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);\n    });\n\n    it(\"test download audio invalid url.\", async function () {\n        const outDir = path.resolve('.', '.out');\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        try {\n            await audioFileAccessor.downloadAudio('htinvalidtps://s3.amazonaws.com/alexa-ml/sounds/sound-library-loud/Instruments/Trumpet_1_invalid_url.mp3', outDir);\n        } catch (err) {\n            assertIncludes(err, \"invalid\");\n\n            // Make sure not in the S3 file status cache on error\n            assert(!s3FileStatusStaticCache[`alexa-ml/tempPolly:${S3AudioAccessor.CACHE_DIR_NAME}/Trumpet_1_invalid_url.mp3`]);\n        }\n\n    });\n\n    it(\"test audio exists.\", async function () {\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'synthesize_test.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const exists = await audioFileAccessor.exists(testFileName);\n        assert.ok(exists);\n\n        // Make sure it exists if the file status cache\n        assert(s3FileStatusStaticCache[`alexa-ml/tempPolly:${S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === S3FileStatus.Exists);\n\n        // Make sure cached calls return same status\n        const exists2 = await audioFileAccessor.exists(testFileName);\n        assert.ok(exists2);\n    });\n\n    it(\"test audio file that does not exist.\", async function () {\n        const outDir = path.resolve('.', '.out');\n        const testFileName = 'file_that_does_not_exist.mp3';\n\n        const audioFileAccessor = new S3AudioAccessor({\n            bucketName: \"alexa-ml/tempPolly\",\n            s3DomainName: \"s3.amazonaws.com\",\n            audioWorkingDir: outDir\n        });\n\n        const exists = await audioFileAccessor.exists(testFileName);\n        assert.ok(!exists);\n\n        // Make sure it does not exists if the file status cache\n        assert(s3FileStatusStaticCache[`alexa-ml/tempPolly:${S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === S3FileStatus.NotExists);\n\n        // Make sure cached calls return same status\n        const exists2 = await audioFileAccessor.exists(testFileName);\n        assert.ok(!exists2);\n    });\n\n    function assertIncludes(line : string, includes : string) {\n        assert.ok(line.includes(includes), \"Line: \" + line + \" must include \" + includes);\n    }\n\n});"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const path = require('path');
const sfb_f_1 = require("@alexa-games/sfb-f");
const index_1 = require("../index");
const assert_1 = require("assert");
const events_1 = require("events");
class Logger {
    constructor() {
        this.lineHistory = [];
        this.log = (input) => {
            this.lineHistory.push(input);
            console.log(input);
        };
        this.getLastLine = () => {
            return (this.lineHistory.length > 0) ? this.lineHistory[this.lineHistory.length - 1] : "";
        };
        this.outputResponse = (response, gameState) => {
        };
    }
    // get the last line of actual output, which is preceded by a line of '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
    // the return the line one after that line
    getLastOutputLine() {
        if (this.lineHistory.length == 0) {
            return "";
        }
        for (let i = this.lineHistory.length; i > 0; i--) {
            const line = this.lineHistory[i - 1];
            if (line.includes("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")) {
                return (this.lineHistory.length > i) ? this.lineHistory[i] : "";
            }
        }
        return "";
    }
}
async function initTestStoryMetadata() {
    const testABCStoryString = `
  @start
  *say
      this is a say at the start
  *then
      hear go to the ballpark {
          -> ballpark
      }

      hear go to the zoo {
        -> zoo
      }

      slot healthnumber as 'AMAZON.NUMBER'
      hear my health to {healthnumber} {
        -> health
      }

      slot fruit as 'customFruitSlot'
      hear my favorite fruit is {fruit}, {fruit} {
        -> fruit
      }

      hear * {
        -> start
      }

  @ballpark
  *say
      You're at the baseball game.
  *reprompt
      Still at the baseball game.
  *show
      template: 'default'
      background: 'ballpark.jpg'

  @zoo
  *say
      You're at the zoo.
  *then
      hear other scene {
        -> other scene
      }      

  @health
  *say
      Your health is now X
  *then
      -> start

  @fruit
  *say
      I love fruit too
  *then
      -> start

  @other scene
  *say
      I am an ending scene
          `;
    const testLanguageModel = {
        "languageModel": {
            "types": [
                {
                    "name": "customFruitSlot",
                    "values": [
                        {
                            "id": null,
                            "name": {
                                "value": "banana",
                                "synonyms": []
                            }
                        },
                        {
                            "id": null,
                            "name": {
                                "value": "pear",
                                "synonyms": []
                            }
                        }
                    ]
                }
            ],
            "intents": [
                {
                    "name": "FlexibleAnswerIntent",
                    "samples": [
                        "{healthNumber}",
                    ],
                    "slots": [
                        {
                            "name": "healthNumber",
                            "type": "AMAZON.NUMBER"
                        }
                    ]
                },
            ],
            "invocationName": "testtest"
        }
    };
    const plugin = new sfb_f_1.DefaultFormatImportPlugin();
    const importResult = await plugin.importData([
        {
            id: "start.abc",
            text: testABCStoryString
        }
    ], { ignoreSyntaxError: false });
    const storyMetadataHelper = new sfb_f_1.StoryMetadataHelper({
        pluginName: "default",
        scenes: importResult.importedScenes,
        storyID: "test story",
        storyTitle: "test story"
    });
    const storyJson = await storyMetadataHelper.getStoryMetadata();
    storyJson.alexaVoiceModel = testLanguageModel;
    return storyJson;
}
function assertIncludes(line, includes) {
    assert_1.strict.ok(line.includes(includes), "Line: " + line + " must include " + includes);
}
let abcDebugger;
describe('SFB Story Debugger Tests', () => {
    it('Simple hear with choice', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("go to the ballpark", logger);
        assertIncludes(logger.getLastOutputLine(), "baseball");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test load and reload from file', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], path.resolve("./test/testStory.json"), {}, ".");
        const logger = new Logger();
        abcDebugger.run(undefined, logger);
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("go to the ballpark", logger);
        assertIncludes(logger.getLastOutputLine(), "baseball");
        await abcDebugger.runCommand("!reload", logger);
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test clear state', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], path.resolve("./test/testStory.json"), {}, ".");
        const logger = new Logger();
        abcDebugger.run(undefined, logger);
        await abcDebugger.runCommand("", logger);
        abcDebugger.clearState();
    });
    it('Simple hear with choice no emitter', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const logger = new Logger();
        abcDebugger.run(undefined, logger);
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("go to the ballpark", logger);
        assertIncludes(logger.getLastOutputLine(), "baseball");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test slot value', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const logger = new Logger();
        abcDebugger.run(undefined, logger);
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("set my health to 5", logger);
        assertIncludes(logger.getLastOutputLine(), "Your health is now X");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test custom slot value', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const logger = new Logger();
        abcDebugger.run(undefined, logger);
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("my favorite fruit is banana", logger);
        assertIncludes(logger.getLastOutputLine(), "I love fruit too");
        await abcDebugger.runCommand("banana", logger);
        assertIncludes(logger.getLastOutputLine(), "I love fruit too");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test set and get', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("!set", logger);
        await abcDebugger.runCommand("!set newVariable=myValue", logger);
        await abcDebugger.runCommand("!set newVariableTrue=true", logger);
        await abcDebugger.runCommand("!set newVariableFalse=false", logger);
        await abcDebugger.runCommand("!get", logger);
        assertIncludes(logger.getLastLine(), "Available Variables");
        await abcDebugger.runCommand("!get newVariable", logger);
        assertIncludes(logger.getLastLine(), "myValue");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test invalid command', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("!", logger);
        assertIncludes(logger.getLastLine(), "an unrecognized debugger command");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test save and load', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        // Verify we are at the beginning
        await abcDebugger.runCommand("", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        // go to baseball field
        await abcDebugger.runCommand("go to the ballpark", logger);
        assertIncludes(logger.getLastOutputLine(), "baseball");
        // invalid save
        await abcDebugger.runCommand("!save", logger);
        assertIncludes(logger.getLastLine(), "Need save NAME");
        // then save
        await abcDebugger.runCommand("!save mySaveFile", logger);
        // then reset back to the beginning and verify we are at the beginning
        await abcDebugger.runCommand("!restart", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        // invalid load
        await abcDebugger.runCommand("!load", logger);
        // then load from our file and verify that we resume back at the baseball field
        await abcDebugger.runCommand("!load mySaveFile", logger);
        assertIncludes(logger.getLastOutputLine(), "baseball");
        // load something that doesn't exist
        await abcDebugger.runCommand("!load doesn't exist", logger);
        assertIncludes(logger.getLastLine(), "doesn't exist");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test save and load from first scene', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        // Verify we are at the beginning
        await abcDebugger.runCommand("", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        // then save
        await abcDebugger.runCommand("!save mySaveFile", logger);
        // then load from our file and verify that we are at the beginning
        await abcDebugger.runCommand("!load mySaveFile", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test back', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        // Verify we are at the beginning
        await abcDebugger.runCommand("", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        // go to baseball field
        await abcDebugger.runCommand("go to the ballpark", logger);
        assertIncludes(logger.getLastOutputLine(), "baseball");
        // then save
        await abcDebugger.runCommand("!back", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        await abcDebugger.runCommand("!back", logger);
        assertIncludes(logger.getLastLine(), "Not enough history to go back to");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test pause', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        // Verify we are at the beginning
        await abcDebugger.runCommand("", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        // then save
        await abcDebugger.runCommand("!pause", logger);
        await abcDebugger.runCommand("start", logger);
        await abcDebugger.runCommand("go to the zoo", logger);
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test clear_and_goto', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        await abcDebugger.runCommand("", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        await abcDebugger.runCommand("!clear_and_goto zoo", logger);
        assertIncludes(logger.getLastOutputLine(), "zoo");
        await abcDebugger.runCommand("!clear_and_goto", logger);
        assertIncludes(logger.getLastLine(), "Need scene ID to go to ie");
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test help', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        await abcDebugger.runCommand("", logger);
        assertIncludes(logger.getLastOutputLine(), "start");
        await abcDebugger.runCommand("!help", logger);
        await abcDebugger.runCommand("!quit", logger);
    });
    it('Test goto', async () => {
        const storyJson = await initTestStoryMetadata();
        abcDebugger = new index_1.ABCDebugger(storyJson, [], undefined, {}, ".");
        const emitter = new events_1.EventEmitter();
        const logger = new Logger();
        abcDebugger.run(emitter, logger);
        await abcDebugger.runCommand("!goto", logger);
        assertIncludes(logger.getLastLine(), "Need scene ID to go to ie");
        await abcDebugger.runCommand("!goto zoo", logger);
        assertIncludes(logger.getLastOutputLine(), "zoo");
        await abcDebugger.runCommand("", logger);
        await abcDebugger.runCommand("!quit", logger);
    });
});
// Clean up afterwards if there was an error and an abcDebugger was left running, as it freezes the console window
after(async () => {
    if (abcDebugger) {
        const logger = new Logger();
        await abcDebugger.runCommand("!quit", logger);
    }
    // clean up any temp files created
    if (fs.existsSync("./mySaveFile.json")) {
        fs.unlinkSync("./mySaveFile.json");
    }
    if (fs.existsSync("./saves/mySaveFile.json")) {
        fs.unlinkSync("./saves/mySaveFile.json");
    }
});
//# sourceMappingURL=sfb-story-debugger.spec.js.map